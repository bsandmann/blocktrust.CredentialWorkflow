using Blocktrust.CredentialWorkflow.Core.Commands.VerifyCredentials.VerifyW3cCredentials.CheckExpiry;
using Blocktrust.CredentialWorkflow.Core.Commands.VerifyCredentials.VerifyW3cCredentials.CheckRevocation;
using Blocktrust.CredentialWorkflow.Core.Commands.VerifyCredentials.VerifyW3cCredentials.CheckSignature;
using Blocktrust.CredentialWorkflow.Core.Commands.VerifyCredentials.VerifyW3cCredentials.VerifyW3cCredential;
using Blocktrust.CredentialWorkflow.Core.Crypto;
using Blocktrust.CredentialWorkflow.Core.Services.DIDPrism;
using FluentAssertions;
using FluentResults;
using MediatR;
using Microsoft.Extensions.DependencyInjection;

namespace Blocktrust.CredentialWorkflow.Core.Tests.Commands.VerifyCredentialsTests.VerifyW3cCredentialTests;

using Services;

public class VerifyW3CCredentialTests
{
    private readonly IMediator _mediator;
    private readonly CredentialParser _credentialParser;
    private readonly VerifyW3CCredentialHandler _handler;
    private readonly HttpClient _httpClient;

    private const string ValidJwt = """
                                    eyJhbGciOiJFUzI1NksifQ..RaXJtH8DXmHEEDpJMrbT8e-AxsjH4zqXeGHIxT0Ly13zzJ0GStlFkdw_SLiggQI_7iyl9xupf2icaPURcOkouw
                                    """;

    private const string ExpiredJwt = """
                                      eyJhbGciOiJFUzI1NksifQ..RaXJtH8DXmHEEDpJMrbT8e-AxsjH4zqXeGHIxT0Ly13zzJ0GStlFkdw_SLiggQI_7iyl9xupf2icaPURcOkouw
                                      """;

    private const string RevokedJwt = """
                                      eyJhbGciOiJFUzI1NksifQ..RaXJtH8DXmHEEDpJMrbT8e-AxsjH4zqXeGHIxT0Ly13zzJ0GStlFkdw_SLiggQI_7iyl9xupf2icaPURcOkouw
                                      """;

    public VerifyW3CCredentialTests()
    {
        _httpClient = new HttpClient();
        _credentialParser = new CredentialParser();

        var signatureHandler = new CheckSignatureHandler(new ExtractPrismPubKeyFromLongFormDid(), new EcServiceBouncyCastle());
        var expiryHandler = new CheckExpiryHandler();
        var revocationHandler = new CheckRevocationHandler(_httpClient);

        var serviceProvider = new ServiceCollection()
            .AddMediatR(cfg => cfg.RegisterServicesFromAssembly(typeof(CheckSignatureHandler).Assembly))
            .AddScoped<IRequestHandler<CheckSignatureRequest, Result<bool>>, CheckSignatureHandler>(_ => signatureHandler)
            .AddScoped<IRequestHandler<CheckExpiryRequest, Result<bool>>, CheckExpiryHandler>(_ => expiryHandler)
            .AddScoped<IRequestHandler<CheckRevocationRequest, Result<bool>>, CheckRevocationHandler>(_ => revocationHandler)
            .BuildServiceProvider();

        _mediator = serviceProvider.GetRequiredService<IMediator>();
        _handler = new VerifyW3CCredentialHandler(_mediator, _credentialParser);
    }

    [Fact]
    public async Task Handle_ValidCredential_ShouldReturnValidResult()
    {
        // Arrange
        var request = new VerifyW3CCredentialRequest(ValidJwt, true, true, false, false, false);

        // Act
        var result = await _handler.Handle(request, CancellationToken.None);

        // Assert
        result.IsSuccess.Should().BeTrue();
        result.Value.SignatureValid.Should().BeTrue();
        result.Value.IsExpired.Should().BeFalse();
        result.Value.IsRevoked.Should().BeFalse();
        result.Value.IsValid.Should().BeTrue();
    }

    [Fact]
    public async Task Handle_ExpiredCredential_ShouldReturnInvalidResult()
    {
        // Arrange
        var request = new VerifyW3CCredentialRequest(ExpiredJwt, true, true, false, false, false);

        // Act
        var result = await _handler.Handle(request, CancellationToken.None);

        // Assert
        result.IsSuccess.Should().BeTrue();
        result.Value.IsExpired.Should().BeTrue();
        result.Value.IsValid.Should().BeFalse();
    }

    [Fact]
    public async Task Handle_RevokedCredential_ShouldReturnInvalidResult()
    {
        // Arrange
        var request = new VerifyW3CCredentialRequest(RevokedJwt, true, false, true, false, false);

        // Act
        var result = await _handler.Handle(request, CancellationToken.None);

        // Assert
        result.IsSuccess.Should().BeTrue();
        result.Value.IsRevoked.Should().BeTrue();
        result.Value.IsValid.Should().BeFalse();
    }

    [Fact]
    public async Task Handle_InvalidCredentialFormat_ShouldReturnFailure()
    {
        // Arrange
        const string invalidFormat = "invalid_format";
        var request = new VerifyW3CCredentialRequest(invalidFormat, true, false, false, false, false);

        // Act
        var result = await _handler.Handle(request, CancellationToken.None);

        // Assert
        result.IsFailed.Should().BeTrue();
        result.Errors.Should().Contain(e => e.Message.Contains("Failed to parse credential"));
    }

    [Fact]
    public async Task Handle_NullCredential_ShouldReturnFailure()
    {
        // Arrange
        var request = new VerifyW3CCredentialRequest(null, true, false, false, false, false);

        // Act
        var result = await _handler.Handle(request, CancellationToken.None);

        // Assert
        result.IsFailed.Should().BeTrue();
        result.Errors.Should().Contain(e => e.Message.Contains("Failed to parse credential"));
    }
}