@using Blocktrust.CredentialWorkflow.Web.Services
@using Blocktrust.CredentialWorkflow.Core.Domain.Workflow
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.GetWorkflowById
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.CreateWorkflow
@using MediatR
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject AppStateService AppStateService
@inject IMediator Mediator
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<LeftNavMenu> Logger
@rendermode @(new InteractiveServerRenderMode(prerender: false))


<div class="w-64 min-h-screen bg-slate-50 border-r border-slate-200">
    <div class="flex flex-col py-6">
        @if (showToast)
        {
            <div class="fixed top-4 right-4 bg-slate-800 text-white px-4 py-2 rounded-lg shadow-lg transition-opacity duration-500 @(showToast ? "opacity-100" : "opacity-0")">
                @toastMessage
            </div>
        }

        <!-- Workflow Selector -->
        @if (isCreatingNew)
        {
            <div class="px-4 mb-4">
                <input type="text" 
                       placeholder="Enter workflow name" 
                       class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-slate-500" 
                       @bind="workflowName"/>
                <div class="flex space-x-2 mt-2">
                    <button class="flex-1 bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-md transition duration-300 ease-in-out flex items-center justify-center"
                            @onclick="SaveNewWorkflow">
                        <span class="material-symbols-outlined mr-2">save</span>
                        Save
                    </button>
                    <button class="flex-1 bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md transition duration-300 ease-in-out flex items-center justify-center"
                            @onclick="CancelNewWorkflow">
                        <span class="material-symbols-outlined mr-2">close</span>
                        Cancel
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="px-4 mb-4">
                <select @bind="selectedWorkflowId" 
                        @oninput="OnWorkflowSelectionChanged" 
                        class="w-full px-3 py-2 bg-white border rounded-md focus:outline-none focus:ring-2 focus:ring-slate-500 text-sm">
                    <option value="">Select Workflow</option>
                    @foreach (var workflow in AppStateService.WorkflowSummaries.OrderByDescending(w => w.UpdatedUtc))
                    {
                        <option value="@workflow.WorkflowId">@workflow.Name</option>
                    }
                </select>
            </div>

            <div class="px-4 mb-6">
                <button @onclick="InitiateNewWorkflow" 
                        class="w-full flex items-center justify-center px-4 py-2 bg-slate-700 text-white rounded-md hover:bg-slate-600 transition-colors duration-200">
                    <span class="material-symbols-outlined mr-2 !text-[20px]">add</span>
                    <span class="text-sm">New Workflow</span>
                </button>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="mx-4 mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
                <p class="font-bold">Error</p>
                <p>@errorMessage</p>
            </div>
        }

        <!-- Navigation Links -->
        @if (selectedWorkflowId is not null)
        {
            <div class="space-y-2">
                <NavLink href="@($"designer/{selectedWorkflowId}")" Match="NavLinkMatch.All" class="@GetNavLinkClass("designer")">
                    <div class="flex items-center h-10 px-4">
                        <span class="material-symbols-outlined mr-3 !text-[20px] flex items-center">edit_note</span>
                        <span class="text-sm">Design</span>
                    </div>
                </NavLink>
                
                <NavLink href="@($"workflowlogs/{selectedWorkflowId}")" Match="NavLinkMatch.All" class="@GetNavLinkClass("log")">
                    <div class="flex items-center h-10 px-4">
                        <span class="material-symbols-outlined mr-3 !text-[20px] flex items-center">monitoring</span>
                        <span class="text-sm">Logs</span>
                    </div>
                </NavLink>
            </div>
        }
    </div>
</div>

@code {
    private Guid? selectedWorkflowId;
    private bool isCreatingNew;
    private string? workflowName;
    private string? errorMessage;
    private string? toastMessage;
    private bool showToast;

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var segments = uri.Segments;
        if (segments.Length >= 3 && Guid.TryParse(segments[2].TrimEnd('/'), out Guid workflowId))
        {
            selectedWorkflowId = workflowId;
        }
        else if (AppStateService.WorkflowSummaries.Any())
        {
            selectedWorkflowId = AppStateService.WorkflowSummaries
                .OrderByDescending(w => w.UpdatedUtc)
                .First()
                .WorkflowId;
        }
    }

    private async Task OnWorkflowSelectionChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out Guid selectedId))
        {
            selectedWorkflowId = selectedId;
            var currentPage = NavigationManager.Uri.Contains("/workflowlogs/") ? "workflowlogs" : "designer";
            NavigationManager.NavigateTo($"/{currentPage}/{selectedId}", forceLoad: false);
        }
    }

    private void InitiateNewWorkflow()
    {
        isCreatingNew = true;
        workflowName = "";
        errorMessage = "";
        StateHasChanged();
    }

    private async Task SaveNewWorkflow()
    {
        if (string.IsNullOrWhiteSpace(workflowName))
        {
            errorMessage = "Please enter a workflow name.";
            return;
        }

        try
        {
            var newProcessFlow = new ProcessFlow();
            var createResult = await Mediator.Send(new CreateWorkflowRequest(AppStateService.Tenant.TenantId, workflowName, newProcessFlow));
            
            if (createResult.IsFailed)
            {
                errorMessage = "Failed to create the workflow. Please try again.";
                return;
            }

            var newWorkflow = createResult.Value;
            selectedWorkflowId = newWorkflow.WorkflowId;
            isCreatingNew = false;

            AppStateService.WorkflowSummaries.Add(new WorkflowSummary
            {
                Name = newWorkflow.Name,
                UpdatedUtc = newWorkflow.UpdatedUtc,
                WorkflowId = newWorkflow.WorkflowId
            });

            NavigationManager.NavigateTo($"/designer/{newWorkflow.WorkflowId}", forceLoad: false);
            await ShowToast("Workflow created successfully");
            errorMessage = "";
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while creating the workflow.";
            Logger.LogError(ex, "Error creating workflow");
        }
    }

    private void CancelNewWorkflow()
    {
        isCreatingNew = false;
        workflowName = "";
        errorMessage = "";
        StateHasChanged();
    }

    private async Task ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        showToast = false;
        StateHasChanged();
    }

    private string GetNavLinkClass(string page)
    {
        var isActive = NavigationManager.Uri.Contains(page, StringComparison.InvariantCultureIgnoreCase);
        return $"transition-colors duration-150 rounded-lg mx-2 {(isActive ? "bg-slate-200 text-slate-900" : "text-slate-600 hover:bg-slate-100 hover:text-slate-900")}";
    }
}