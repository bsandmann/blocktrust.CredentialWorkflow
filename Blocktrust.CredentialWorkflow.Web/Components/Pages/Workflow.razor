@page "/workflows"
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.GetWorkflows
@using Blocktrust.CredentialWorkflow.Core.Domain.Workflow
@using Blocktrust.CredentialWorkflow.Web.Components.Layout
@using Blocktrust.CredentialWorkflow.Web.Services
@using MediatR
@using Microsoft.AspNetCore.Components.Authorization
@using Blocktrust.CredentialWorkflow.Core.Domain.Enums
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.DeleteWorkflow
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.CreateWorkflow
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow
@using System.Text.Json
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.GetWorkflowById
@using Blocktrust.CredentialWorkflow.Core.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMediator Mediator
@inject AppStateService AppStateService
@inject NavigationManager NavigationManager
@inject ISchemaValidationService _schemaValidationService
@inject IJSRuntime JSRuntime
@inject ILogger<Workflow> Logger

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@layout AppLayout
<PageTitle>Blocktrust Credential Workflow Platform - Workflows</PageTitle>

<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-800">Workflows</h1>
        <div class="flex space-x-4">
            <button @onclick="CreateNewWorkflow" class="bg-slate-700 hover:bg-slate-600 text-white font-bold py-2 px-4 rounded flex items-center transition duration-300 ease-in-out">
                <span class="material-symbols-outlined mr-2">add</span>
                Create New
            </button>
            <button @onclick="OpenJsonImportModal" class="bg-slate-700 hover:bg-slate-600 text-white font-bold py-2 px-4 rounded flex items-center transition duration-300 ease-in-out">
                <span class="material-symbols-outlined mr-2">upload_file</span>
                Import
            </button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-md" role="alert">
            <p class="font-bold">Error</p>
            <p>@errorMessage</p>
        </div>
    }

    @if (AppStateService.IsInitialized)
    {
        @if (workflows.Any())
        {
            <div class="bg-white shadow-md rounded-lg overflow-hidden">
                <table class="min-w-full">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" colspan="6">
                                <div class="grid grid-cols-6 gap-4">
                                    <div>Name</div>
                                    <div>Last Updated</div>
                                    <div>State</div>
                                    <div>Last Run ActionOutcomes</div>
                                    <div>Last Run Started</div>
                                    <div>Last Run Ended</div>
                                </div>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actionss</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var workflow in workflows)
                    {
                        <tr class="hover:bg-gray-50 transition-colors duration-150">
                            <td class="cursor-pointer" @onclick="() => NavigateToWorkflow(workflow.WorkflowId)" colspan="6">
                                <div class="grid grid-cols-6 gap-4">
                                    <div class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm font-medium text-gray-900">@workflow.Name</div>
                                    </div>
                                    <div class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm text-gray-500">@workflow.UpdatedUtc.ToString("g")</div>
                                    </div>
                                    <div class="px-6 py-4 whitespace-nowrap">
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @GetWorkflowStateColor(workflow.WorkflowState)">
                                            @workflow.WorkflowState
                                        </span>
                                    </div>
                                    <div class="px-6 py-4 whitespace-nowrap">
                                        @if (workflow.LastOutcome != null)
                                        {
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @GetOutcomeStateColor(workflow.LastOutcome.OutcomeState)">
                                                @workflow.LastOutcome.OutcomeState
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-sm text-gray-500">N/A</span>
                                        }
                                    </div>
                                    <div class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm text-gray-500">@(workflow.LastOutcome?.StartedUtc?.ToString("g") ?? "N/A")</div>
                                    </div>
                                    <div class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm text-gray-500">@(workflow.LastOutcome?.EndedUtc?.ToString("g") ?? "N/A")</div>
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <button @onclick="() => DeleteWorkflow(workflow.WorkflowId)" @onclick:stopPropagation="true"
                                        class="text-red-600 hover:text-red-900 mr-2">
                                    <span class="material-symbols-outlined">delete</span>
                                </button>
                                <button @onclick="() => ExportWorkflow(workflow.WorkflowId)" @onclick:stopPropagation="true"
                                        class="text-blue-600 hover:text-blue-900">
                                    <span class="material-symbols-outlined">file_download</span>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="bg-white shadow-md rounded-lg p-6 text-center">
                <p class="text-gray-600 mb-4">No workflows found.</p>
                <button @onclick="CreateNewWorkflow" class="bg-slate-700 hover:bg-slate-600 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out">
                    Create Your First Workflow
                </button>
            </div>
        }
    }
    else
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-slate-500"></div>
        </div>
    }
</div>

@if (isJsonImportModalOpen)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" id="my-modal">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Import Workflow from JSON</h3>
                <div class="mt-2 px-7 py-3">
                    <textarea @bind="jsonInput" class="w-full h-40 border rounded p-2" placeholder="Paste your JSON here..."></textarea>
                </div>
                <div class="mt-2 px-7 py-3">
                    <InputFile OnChange="OnFileSelected" class="w-full" />
                </div>
                <div class="items-center px-4 py-3">
                    <button @onclick="ImportFromJson" class="px-4 py-2 bg-slate-700 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-slate-600 focus:outline-none focus:ring-2 focus:ring-slate-300">
                        Import
                    </button>
                </div>
                <div class="items-center px-4 py-3">
                    <button @onclick="CloseJsonImportModal" class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-300">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private readonly CancellationTokenSource cts = new();
    private List<WorkflowOutcome> workflows = new();
    private bool isJsonImportModalOpen;
    private string jsonInput = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!AppStateService.IsInitialized)
            {
                await AppStateService.Initialize(AuthenticationStateProvider, Logger, cts, Mediator);
            }

            await LoadWorkflows();
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while initializing the page. Please try again later.";
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                using var streamReader = new StreamReader(file.OpenReadStream());
                jsonInput = await streamReader.ReadToEndAsync();
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while reading the file. Please try again.";
        }
    }

    private async Task LoadWorkflows()
    {
        try
        {
            var workflowResults = await Mediator.Send(new GetWorkflowsRequest(AppStateService.Tenant.TenantId));
            if (workflowResults.IsFailed)
            {
                errorMessage = "Failed to load workflows. Please try again later.";
            }
            else
            {
                AppStateService.WorkflowSummaries = workflowResults.Value.Select(p => new WorkflowSummary()
                {
                    Name = p.Name,
                    WorkflowId = p.WorkflowId,
                    UpdatedUtc = p.UpdatedUtc,
                }).ToList();
                workflows = workflowResults.Value;
                errorMessage = ""; // Clear error message on successful load
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred while loading workflows. Please try again later.";
        }
    }

    private string GetWorkflowStateColor(EWorkflowState state) => state switch
    {
        EWorkflowState.ActiveWithExternalTrigger => "bg-green-100 text-green-800",
        EWorkflowState.ActiveWithRecurrentTrigger => "bg-green-100 text-green-800",
        EWorkflowState.Inactive => "bg-gray-100 text-gray-800",
        _ => "bg-gray-100 text-gray-800"
    };

    private string GetOutcomeStateColor(EOutcomeState state) => state switch
    {
        EOutcomeState.Success => "bg-green-100 text-green-800",
        EOutcomeState.FailedWithErrors => "bg-red-100 text-red-800",
        EOutcomeState.NotStarted => "bg-yellow-100 text-yellow-800",
        EOutcomeState.Running => "bg-blue-100 text-blue-800",
        _ => "bg-gray-100 text-gray-800"
    };

    private void NavigateToWorkflow(Guid workflowWorkflowId)
    {
        NavigationManager.NavigateTo($"designer/{workflowWorkflowId}");
    }

    private void CreateNewWorkflow()
    {
        NavigationManager.NavigateTo("designer/new");
    }

    private async Task DeleteWorkflow(Guid workflowId)
    {
        try
        {
            var deleteResult = await Mediator.Send(new DeleteWorkflowRequest(workflowId));
            if (deleteResult.IsFailed)
            {
                errorMessage = "Failed to delete the workflow. Please try again.";
            }
            else
            {
                await LoadWorkflows();
                errorMessage = ""; // Clear error message on successful delete
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred while deleting the workflow. Please try again later.";
        }
    }

    private void OpenJsonImportModal()
    {
        isJsonImportModalOpen = true;
        jsonInput = "";
        errorMessage = ""; // Clear any existing error messages
    }

    private void CloseJsonImportModal()
    {
        isJsonImportModalOpen = false;
        jsonInput = "";
    }

    private async Task ExportWorkflow(Guid workflowId)
    {
        try
        {
            var workflowResult = await Mediator.Send(new GetWorkflowByIdRequest(workflowId, AppStateService.Tenant.TenantId));
            if (workflowResult.IsFailed)
            {
                errorMessage = "Failed to export the workflow. Please try again.";
                return;
            }

            var workflow = workflowResult.Value;
            var processFlowJson = workflow.ProcessFlow.SerializeToJson();

            var fileName = $"workflow_{workflowId}.json";
            var fileContent = System.Text.Encoding.UTF8.GetBytes(processFlowJson);
            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(fileContent));
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred while exporting the workflow. Please try again later.";
        }
    }

    private async Task ImportFromJson()
    {
        if (string.IsNullOrWhiteSpace(jsonInput))
        {
            errorMessage = "Please provide JSON input before importing.";
            return;
        }

        try
        {
            var errors = await _schemaValidationService.ValidateJsonAgainstSchema(jsonInput, "TestSchema1");

            if (errors.Any())
            {
                errorMessage = "Invalid JSON format. Please check your input and try again.";
                return;
            }

            var processFlow = ProcessFlow.DeserializeFromJson(jsonInput);
            if (processFlow == null)
            {
                errorMessage = "Failed to parse the JSON input. Please check the format and try again.";
                return;
            }

            var createResult = await Mediator.Send(new CreateWorkflowRequest(AppStateService.Tenant.TenantId, "Imported Workflow", processFlow));
            if (createResult.IsFailed)
            {
                errorMessage = "Failed to create workflow from imported JSON. Please try again.";
                return;
            }

            await LoadWorkflows();
            CloseJsonImportModal();
            errorMessage = ""; // Clear any error messages on successful import
        }
        catch (JsonException)
        {
            errorMessage = "Invalid JSON format. Please check your input and try again.";
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred while importing the workflow. Please try again later.";
        }
    }
}