@page "/workflow"
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.GetWorkflows
@using Blocktrust.CredentialWorkflow.Core.Domain.Workflow
@using Blocktrust.CredentialWorkflow.Web.Components.Layout
@using Blocktrust.CredentialWorkflow.Web.Services
@using MediatR
@using Microsoft.AspNetCore.Components.Authorization
@using Blocktrust.CredentialWorkflow.Core.Domain.Enums

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMediator Mediator
@inject AppStateService AppStateService
@inject ILogger<Overview> Logger
@inject NavigationManager NavigationManager

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@layout AppLayout

<PageTitle>Blocktrust Credential Workflow Platform - Workflows</PageTitle>

@if (AppStateService.IsInitialized)
{
    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold mb-4">Workflows</h1>

        @if (workflows.Any())
        {
            <div class="overflow-x-auto mb-4">
                <table class="min-w-full bg-white">
                    <thead class="bg-gray-100">
                    <tr>
                        <th class="px-4 py-2 text-left">Name</th>
                        <th class="px-4 py-2 text-left">Last Updated</th>
                        <th class="px-4 py-2 text-left">State</th>
                        <th class="px-4 py-2 text-left">Last Run Outcome</th>
                        <th class="px-4 py-2 text-left">Last Run Started</th>
                        <th class="px-4 py-2 text-left">Last Run Ended</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var workflow in workflows)
                    {
                        <tr @onclick="() => NavigateToWorkflow(workflow.WorkflowId)"
                            class="cursor-pointer hover:bg-gray-50 transition-colors duration-150">
                            <td class="border-t px-4 py-2">@workflow.Name</td>
                            <td class="border-t px-4 py-2">@workflow.UpdatedUtc.ToString("g")</td>
                            <td class="border-t px-4 py-2">
                                <span class="@GetWorkflowStateColor(workflow.WorkflowState)">
                                    @workflow.WorkflowState
                                </span>
                            </td>
                            <td class="border-t px-4 py-2">
                                @if (workflow.LastOutcome != null)
                                {
                                    <span class="@GetOutcomeStateColor(workflow.LastOutcome.OutcomeState)">
                                        @workflow.LastOutcome.OutcomeState
                                    </span>
                                }
                                else
                                {
                                    <span>N/A</span>
                                }
                            </td>
                            <td class="border-t px-4 py-2">
                                @(workflow.LastOutcome?.StartedUtc?.ToString("g") ?? "N/A")
                            </td>
                            <td class="border-t px-4 py-2">
                                @(workflow.LastOutcome?.EndedUtc?.ToString("g") ?? "N/A")
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-gray-600 mb-4">No workflows found.</p>
        }

        <div class="flex justify-center">
            <button @onclick="CreateNewWorkflow" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Create New Workflow
            </button>
        </div>
    </div>
}
else
{
    <p class="text-center mt-8">Loading...</p>
}

@code {
    private readonly CancellationTokenSource cts = new CancellationTokenSource();
    private List<WorkflowWithLastResult> workflows = new List<WorkflowWithLastResult>();

    protected override async Task OnInitializedAsync()
    {
        if (!AppStateService.IsInitialized)
        {
            await AppStateService.Initialize(AuthenticationStateProvider, Logger, cts, Mediator);
        }

        var workflowResults = await Mediator.Send(new GetWorkflowsRequest(AppStateService.Tenant.TenantId));
        if (workflowResults.IsFailed)
        {
// Handle error
            Logger.LogError("Failed to fetch workflows");
        }
        else
        {
            workflows = workflowResults.Value;
        }
    }

    private string GetWorkflowStateColor(EWorkflowState state) => state switch
    {
        EWorkflowState.ActiveWithExternalTrigger => "text-green-600",
        EWorkflowState.ActiveWithRecurrentTrigger => "text-green-600",
        EWorkflowState.Inactive => "text-gray-600",
        _ => "text-gray-600"
    };

    private string GetOutcomeStateColor(EOutcomeState state) => state switch
    {
        EOutcomeState.Success => "text-green-600",
        EOutcomeState.FailedWithErrors => "text-red-600",
        EOutcomeState.NotStarted => "text-gray-600",
        EOutcomeState.Running => "text-blue-600",
        _ => "text-gray-600"
    };

    private void NavigateToWorkflow(Guid workflowWorkflowId)
    {
        NavigationManager.NavigateTo($"designer/{workflowWorkflowId}");
    }

    private void CreateNewWorkflow()
    {
        NavigationManager.NavigateTo("designer/new");
    }

}