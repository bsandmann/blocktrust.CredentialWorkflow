@page "/workflows"
@using Blocktrust.CredentialWorkflow.Core.Domain.Workflow
@using Blocktrust.CredentialWorkflow.Web.Components.Layout
@using Blocktrust.CredentialWorkflow.Web.Services
@using MediatR
@using Microsoft.AspNetCore.Components.Authorization
@using Blocktrust.CredentialWorkflow.Core.Domain.Enums
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.DeleteWorkflow
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.CreateWorkflow
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow
@using System.Text.Json
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.ChangeWorkflowState
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.GetWorkflowById
@using JsonException = System.Text.Json.JsonException
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.GetWorkflowSummaries
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using Blocktrust.CredentialWorkflow.Core.Domain.Template
@using Blocktrust.CredentialWorkflow.Core.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Http

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMediator Mediator
@inject AppStateService AppStateService
@inject NavigationManager NavigationManager
@inject ISchemaValidationService _schemaValidationService
@inject IJSRuntime JSRuntime
@inject ILogger<Workflow> Logger
@inject TemplateService TemplateService
@inject IHttpContextAccessor HttpContextAccessor

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize()]
@layout AppLayout

<PageTitle>Blocktrust Credential Workflow Platform - Workflows</PageTitle>

<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-800">Workflows</h1>
        <div class="flex space-x-4">
            <button @onclick="CreateNewWorkflow"
                    class="bg-slate-700 hover:bg-slate-600 text-white font-bold py-2 px-4 rounded flex items-center transition duration-300 ease-in-out">
                <span class="material-symbols-outlined mr-2">add</span>
                Create New
            </button>
            <button @onclick="OpenJsonImportModal"
                    class="bg-slate-700 hover:bg-slate-600 text-white font-bold py-2 px-4 rounded flex items-center transition duration-300 ease-in-out">
                <span class="material-symbols-outlined mr-2">upload_file</span>
                Import
            </button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-md" role="alert">
            <p class="font-bold">Error</p>
            <p>@errorMessage</p>
        </div>
    }

    @if (AppStateService.IsInitialized)
    {
        @if (workflowSummaries.Any())
        {
            <div class="bg-white shadow-md rounded-lg overflow-hidden">
                <table class="min-w-full">
                    <thead class="bg-gray-100">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                            colspan="6">
                            <div class="grid grid-cols-6 gap-4">
                                <div>Name</div>
                                <div>Last Updated</div>
                                <div>State</div>
                                <div>Last Run ActionOutcomes</div>
                                <div>Last Run Started</div>
                                <div>Last Run Ended</div>
                            </div>
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Actions
                        </th>
                    </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var workflow in workflowSummaries)
                    {
                        <tr class="hover:bg-gray-50 transition-colors duration-150">
                            <td class="cursor-pointer" @onclick="() => NavigateToWorkflow(workflow.WorkflowId)"
                                colspan="6">
                                <div class="grid grid-cols-6 gap-4">
                                    <div class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm font-medium text-gray-900">@workflow.Name</div>
                                    </div>
                                    <div class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm text-gray-500">@workflow.UpdatedUtc.ToString("g")</div>
                                    </div>
                                    <div class="px-6 py-4 whitespace-nowrap">
                                            <span
                                                class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @GetWorkflowStateColor(workflow.WorkflowState)">
                                                @workflow.WorkflowState
                                            </span>
                                    </div>
                                    <div class="px-6 py-4 whitespace-nowrap">
                                        @if (workflow.LastWorkflowOutcome != null)
                                        {
                                            <span @onclick="() => NavigateToLogs(workflow.WorkflowId)"
                                                  @onclick:stopPropagation="true"
                                                  class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @GetOutcomeStateColor(workflow.LastWorkflowOutcome.WorkflowOutcomeState) cursor-pointer hover:opacity-80">
                                                    @workflow.LastWorkflowOutcome.WorkflowOutcomeState
                                                </span>
                                        }
                                        else
                                        {
                                            <span class="text-sm text-gray-500">N/A</span>
                                        }
                                    </div>
                                    <div class="px-6 py-4 whitespace-nowrap">
                                        <div
                                            class="text-sm text-gray-500">@(workflow.LastWorkflowOutcome?.StartedUtc?.ToString("g") ?? "N/A")</div>
                                    </div>
                                    <div class="px-6 py-4 whitespace-nowrap">
                                        <div
                                            class="text-sm text-gray-500">@(workflow.LastWorkflowOutcome?.EndedUtc?.ToString("g") ?? "N/A")</div>
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                @if (workflow.IsRunable == true)
                                {
                                    <button @onclick="() => ToggleWorkflowState(workflow)"
                                            @onclick:stopPropagation="true"
                                            class="inline-flex items-center text-green-600 hover:text-green-900 mr-2">
                                        @if (workflow.WorkflowState == EWorkflowState.Inactive)
                                        {
                                            <span class="material-symbols-outlined mr-1">play_arrow</span>
                                            <span>Run</span>
                                        }
                                        else
                                        {
                                            <span class="material-symbols-outlined mr-1">stop</span>
                                            <span>Stop</span>
                                        }
                                    </button>
                                }
                                else
                                {
                                    <button disabled
                                            class="inline-flex items-center text-gray-400 cursor-not-allowed mr-2">
                                        <span class="material-symbols-outlined mr-1">play_arrow</span>
                                        Run
                                    </button>
                                }

                                <button @onclick="() => DeleteWorkflow(workflow.WorkflowId)"
                                        @onclick:stopPropagation="true"
                                        class="text-red-600 hover:text-red-900 mr-2">
                                    <span class="material-symbols-outlined">delete</span>
                                </button>

                                <button @onclick="() => ExportWorkflow(workflow.WorkflowId)"
                                        @onclick:stopPropagation="true"
                                        class="text-blue-600 hover:text-blue-900">
                                    <span class="material-symbols-outlined">file_download</span>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="bg-white shadow-md rounded-lg p-6 text-center">
                <p class="text-gray-600 mb-4">No workflows found.</p>
                <button @onclick="CreateNewWorkflow"
                        class="bg-slate-700 hover:bg-slate-600 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out">
                    Create Your First Workflow
                </button>
            </div>
        }
    }
    else
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-slate-500"></div>
        </div>
    }
</div>

<!-- Templates Section -->
<div class="container mx-auto p-6 mt-10">
    <h2 class="text-2xl font-bold text-gray-800 mb-6">Templates</h2>

    @if (templates.Any())
    {
        <div class="bg-white shadow-md rounded-lg overflow-hidden">
            <table class="min-w-full">
                <thead class="bg-gray-100">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Name
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Description
                    </th>
                    <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Actions
                    </th>
                </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                @foreach (var template in templates)
                {
                    <tr class="hover:bg-gray-50 transition-colors duration-150">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-medium text-gray-900">@template.Name</div>
                        </td>
                        <td class="px-6 py-4">
                            <div class="text-sm text-gray-500">@template.Description</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <button @onclick="() => CreateWorkflowFromTemplate(template)" @onclick:stopPropagation="true"
                                    class="bg-slate-700 hover:bg-slate-600 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out">
                                Create from Template
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="bg-white shadow-md rounded-lg p-6 text-center">
            <p class="text-gray-600">No templates available.</p>
        </div>
    }
</div>

@if (isJsonImportModalOpen)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" id="my-modal">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Import Workflow from JSON</h3>
                <div class="mt-2 px-7 py-3">
                    <textarea @bind="jsonInput" class="w-full h-40 border rounded p-2"
                              placeholder="Paste your JSON here..."></textarea>
                </div>
                <div class="mt-2 px-7 py-3">
                    <InputFile OnChange="OnFileSelected" class="w-full"/>
                </div>
                <div class="items-center px-4 py-3">
                    <button @onclick="ImportFromJson"
                            class="px-4 py-2 bg-slate-700 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-slate-600 focus:outline-none focus:ring-2 focus:ring-slate-300">
                        Import
                    </button>
                </div>
                <div class="items-center px-4 py-3">
                    <button @onclick="CloseJsonImportModal"
                            class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-300">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private readonly CancellationTokenSource cts = new();
    private List<WorkflowSummary> workflowSummaries = new();
    private List<Template> templates = new();
    private bool isJsonImportModalOpen;
    private string jsonInput = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!AppStateService.IsInitialized)
            {
                await AppStateService.Initialize(AuthenticationStateProvider, Logger, cts, Mediator);
            }

            await LoadWorkflowSummaries();
            await LoadTemplates();
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while initializing the page. Please try again later.";
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                using var streamReader = new StreamReader(file.OpenReadStream());
                jsonInput = await streamReader.ReadToEndAsync();
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while reading the file. Please try again.";
        }
    }

    private async Task LoadWorkflowSummaries()
    {
        try
        {
            var workflowSummariesResult = await Mediator.Send(new GetWorkflowSummariesRequest(AppStateService.Tenant.TenantId));
            if (workflowSummariesResult.IsFailed)
            {
                errorMessage = "Failed to load workflows. Please try again later.";
            }
            else
            {
                AppStateService.WorkflowSummaries = workflowSummariesResult.Value;
                workflowSummaries = workflowSummariesResult.Value;
                errorMessage = "";
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred while loading workflows. Please try again later.";
        }
    }

    private string GetWorkflowStateColor(EWorkflowState state) => state switch
    {
        EWorkflowState.ActiveWithExternalTrigger => "bg-green-100 text-green-800",
        EWorkflowState.ActiveWithRecurrentTrigger => "bg-green-100 text-green-800",
        EWorkflowState.ActiveWithFormTrigger => "bg-green-100 text-green-800",
        EWorkflowState.ActiveWithWalletInteractionTrigger => "bg-green-100 text-green-800",
        EWorkflowState.Inactive => "bg-gray-100 text-gray-800",
        _ => "bg-gray-100 text-gray-800"
    };

    private string GetOutcomeStateColor(EWorkflowOutcomeState state) => state switch
    {
        EWorkflowOutcomeState.Success => "bg-green-100 text-green-800",
        EWorkflowOutcomeState.FailedWithErrors => "bg-red-100 text-red-800",
        EWorkflowOutcomeState.NotStarted => "bg-yellow-100 text-yellow-800",
        EWorkflowOutcomeState.Running => "bg-blue-100 text-blue-800",
        _ => "bg-gray-100 text-gray-800"
    };

    private void NavigateToWorkflow(Guid workflowWorkflowId)
    {
        NavigationManager.NavigateTo($"designer/{workflowWorkflowId}");
    }

    private void NavigateToLogs(Guid workflowId)
    {
        NavigationManager.NavigateTo($"logs/{workflowId}");
    }

    private async Task CreateNewWorkflow()
    {
        var workflowResult = await Mediator.Send(new CreateWorkflowRequest(AppStateService.Tenant.TenantId, "New Workflow", new ProcessFlow()));
        if (workflowResult.IsFailed)
        {
            errorMessage = "Failed to create the workflow. Please try again.";
            return;
        }

        NavigateToWorkflow(workflowResult.Value.WorkflowId);
    }

    private async Task DeleteWorkflow(Guid workflowId)
    {
        try
        {
            var deleteResult = await Mediator.Send(new DeleteWorkflowRequest(workflowId));
            if (deleteResult.IsFailed)
            {
                errorMessage = "Failed to delete the workflow. Please try again.";
            }
            else
            {
                await LoadWorkflowSummaries();
                errorMessage = ""; // Clear error message on successful delete
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred while deleting the workflow. Please try again later.";
        }
    }

    private void OpenJsonImportModal()
    {
        isJsonImportModalOpen = true;
        jsonInput = "";
        errorMessage = ""; // Clear any existing error messages
    }

    private void CloseJsonImportModal()
    {
        isJsonImportModalOpen = false;
        jsonInput = "";
    }

    private async Task ExportWorkflow(Guid workflowId)
    {
        try
        {
            var workflowResult = await Mediator.Send(new GetWorkflowByIdRequest(workflowId));
            if (workflowResult.IsFailed)
            {
                errorMessage = "Failed to export the workflow. Please try again.";
                return;
            }

            var workflow = workflowResult.Value;
            var processFlowJson = workflow.ProcessFlow.SerializeToJson();

            var fileName = $"workflow_{workflowId}.json";
            var fileContent = System.Text.Encoding.UTF8.GetBytes(processFlowJson);
            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(fileContent));
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred while exporting the workflow. Please try again later.";
        }
    }

    private async Task ImportFromJson()
    {
        if (string.IsNullOrWhiteSpace(jsonInput))
        {
            errorMessage = "Please provide JSON input before importing.";
            return;
        }

        try
        {
            var errors = await _schemaValidationService.ValidateJsonAgainstSchema(jsonInput, "TestSchema1");

            if (errors.Any())
            {
                errorMessage = "Invalid JSON format. Please check your input and try again.";
                return;
            }

            var processFlow = ProcessFlow.DeserializeFromJson(jsonInput);
            if (processFlow == null)
            {
                errorMessage = "Failed to parse the JSON input. Please check the format and try again.";
                return;
            }

            var createResult = await Mediator.Send(new CreateWorkflowRequest(AppStateService.Tenant.TenantId, "Imported Workflow", processFlow));
            if (createResult.IsFailed)
            {
                errorMessage = "Failed to create workflow from imported JSON. Please try again.";
                return;
            }

            await LoadWorkflowSummaries();
            CloseJsonImportModal();
            errorMessage = ""; // Clear any error messages on successful import
        }
        catch (JsonException)
        {
            errorMessage = "Invalid JSON format. Please check your input and try again.";
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred while importing the workflow. Please try again later.";
        }
    }

    private async Task LoadTemplates()
    {
        try
        {
            var templatesResult = TemplateService.ListTemplates();
            if (templatesResult.IsFailed)
            {
                errorMessage = "Failed to load templates. Please try again later.";
            }
            else
            {
                templates = templatesResult.Value;
                errorMessage = "";
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred while loading templates. Please try again later.";
        }
    }
    
    private async Task CreateWorkflowFromTemplate(Template template)
    {
        try
        {
            // Get the current host URL
            var request = HttpContextAccessor.HttpContext?.Request;
            string hostUrl = null;
            
            if (request != null)
            {
                hostUrl = $"{request.Scheme}://{request.Host}";
            }
            else
            {
                // Fallback if HttpContextAccessor is not available - use NavigationManager
                hostUrl = NavigationManager.BaseUri.TrimEnd('/');
            }
            
            // Get template with processed placeholders, including tenant-specific GUIDs and host URL
            var templateResult = TemplateService.GetTemplateById(template.Id, AppStateService.Tenant.TenantId, hostUrl);
            if (templateResult.IsFailed)
            {
                errorMessage = "Failed to load template details. Please try again.";
                return;
            }
            
            var processedTemplate = templateResult.Value;
            
            // Convert template body to ProcessFlow
            var processFlow = ProcessFlow.DeserializeFromJson(processedTemplate.TemplateBody);
            
            // Create workflow from template
            var workflowResult = await Mediator.Send(
                new CreateWorkflowRequest(
                    AppStateService.Tenant.TenantId, 
                    $"From Template: {processedTemplate.Name}",
                    processFlow)
            );
            
            if (workflowResult.IsFailed)
            {
                errorMessage = "Failed to create workflow from template. Please try again.";
                return;
            }
            
            // Navigate to the newly created workflow
            NavigateToWorkflow(workflowResult.Value.WorkflowId);
        }
        catch (JsonException)
        {
            errorMessage = "The template contains invalid JSON format. Please contact an administrator.";
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while creating workflow from template: {ex.Message}";
        }
    }

    private async Task ToggleWorkflowState(WorkflowSummary workflow)
    {
        try
        {
            if (workflow.WorkflowState == EWorkflowState.Inactive)
            {
                var completeWorkflow = await Mediator.Send(new GetWorkflowByIdRequest(workflow.WorkflowId));
                if (completeWorkflow.IsFailed)
                {
                    errorMessage = "Failed to run the workflow. Please try again.";
                    return;
                }

                if (completeWorkflow.Value.ProcessFlow is null || !completeWorkflow.Value.ProcessFlow.Triggers.Any())
                {
                    errorMessage = "Workflow has no triggers. Please add a trigger before running.";
                    return;
                }

                var firstTriggerType = completeWorkflow.Value.ProcessFlow.Triggers.First().Value.Type;
                EWorkflowState newState = firstTriggerType switch
                {
                    ETriggerType.HttpRequest => EWorkflowState.ActiveWithExternalTrigger,
                    ETriggerType.RecurringTimer => EWorkflowState.ActiveWithRecurrentTrigger,
                    ETriggerType.WalletInteraction => EWorkflowState.ActiveWithWalletInteractionTrigger,
                    ETriggerType.Form => EWorkflowState.ActiveWithFormTrigger,
                    _ => throw new InvalidOperationException($"Unsupported trigger type: {firstTriggerType}")
                };

                var result = await Mediator.Send(new ChangeWorkflowStateRequest(workflow.WorkflowId, newState));
                if (result.IsFailed)
                {
                    errorMessage = "Failed to run the workflow. Please try again.";
                }
                else
                {
                    workflow.WorkflowState = newState;
                }
            }
            else
            {
                var result = await Mediator.Send(new ChangeWorkflowStateRequest(workflow.WorkflowId, EWorkflowState.Inactive));
                if (result.IsFailed)
                {
                    errorMessage = "Failed to stop the workflow. Please try again.";
                }
                else
                {
                    workflow.WorkflowState = EWorkflowState.Inactive;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }

        StateHasChanged();
    }

}