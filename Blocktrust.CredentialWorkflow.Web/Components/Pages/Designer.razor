@page "/designer/{workflowId:guid}"
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow
@using Blocktrust.CredentialWorkflow.Web.Components.Features
@using Blocktrust.CredentialWorkflow.Web.Components.Features.PropertyWindow
@using Blocktrust.CredentialWorkflow.Web.Components.Layout
@using Blocktrust.CredentialWorkflow.Web.Services
@using MediatR
@using Microsoft.AspNetCore.Components.Authorization
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.GetWorkflowById
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.UpdateWorkflow
@using Blocktrust.CredentialWorkflow.Core.Commands.Outcome.CreateOutcome
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMediator Mediator
@inject AppStateService AppStateService
@inject ILogger<Designer> Logger
@inject WorkflowChangeTrackerService ChangeTracker
@inject IJSRuntime JSRuntime

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize()]
@layout AppLayout

<PageTitle>Blocktrust Credential Workflow Platform - Designer</PageTitle>

@if (AppStateService.IsInitialized)
{
    <div class="flex flex-col h-screen">
        <!-- Top bar -->
        <div class="bg-gray-100 p-4 flex items-center justify-end flex-row border-b-2 border-slate-200">
            @if (currentWorkflow is not null)
            {
                <div class="flex-1 text-xl flex items-center">
                    @if (!isEditingName)
                    {
                        <div class="flex items-center space-x-2">
                            <span>@currentWorkflow.Name</span>
                            <button class="text-gray-600" @onclick="EditName">
                                <span class="material-symbols-outlined mt-1">edit</span>
                            </button>
                        </div>
                    }
                    else
                    {
                        <input class="border rounded px-2 py-1"
                               @bind="tempName"
                               @bind:event="oninput"
                               @onkeypress="HandleKeyPress"/>
                        <button class="bg-slate-700 hover:bg-slate-600  text-white px-4 py-2 rounded-md transition duration-300 ease-in-out flex items-center ml-4 text-base"
                                @onclick="SaveName">Save
                        </button>
                    }
                </div>

                <div class="flex space-x-4">
                    <button
                        class="@(hasUnsavedChanges ? "bg-slate-700 hover:bg-slate-600" : "bg-gray-500 cursor-not-allowed")
                            text-white px-4 py-2 rounded-md transition duration-300 ease-in-out flex items-center"
                        @onclick="SaveWorkflow"
                        disabled="@(!hasUnsavedChanges)">
                        <span class="material-symbols-outlined mr-2">save</span>
                        Save
                    </button>

                    @if (currentWorkflow.ProcessFlow is not null &&
                         currentWorkflow.ProcessFlow.Triggers.Any() &&
                         currentWorkflow.ProcessFlow.Actions.Any())
                    {
                        <button
                            class="@(hasUnsavedChanges ? "bg-gray-500 cursor-not-allowed" : "bg-slate-700 hover:bg-slate-600")
                                text-white px-4 py-2 rounded-md transition duration-300 ease-in-out flex items-center"
                            @onclick="RunWorkflow"
                            disabled="@hasUnsavedChanges">
                            <span class="material-symbols-outlined mr-2">play_arrow</span>
                            Run
                        </button>
                    }
                    else
                    {
                        <button class="bg-gray-500 text-white px-4 py-2 rounded-md cursor-not-allowed flex items-center"
                                disabled>
                            <span class="material-symbols-outlined mr-2">play_arrow</span>
                            Run
                        </button>
                    }
                </div>
            }
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4" role="alert">
                <p class="font-bold">Error</p>
                <p>@errorMessage</p>
            </div>
        }

        <!-- Main content area -->
        <div class="flex-grow flex flex-row">
            <div class="flex-grow bg-white p-4">
                @if (showToast)
                {
                    <div
                        class="fixed top-4 right-4 bg-slate-800 text-white px-4 py-2 rounded-lg shadow-lg transition-opacity duration-500 @(showToast ? "opacity-100" : "opacity-0")">
                        @toastMessage
                    </div>
                }
                <WorkflowDesigner @ref="workflowDesigner"
                                  Workflow="@currentWorkflow"
                                  OnItemSelected="HandleItemSelected"
                                  OnChange="HandleChange"/>
            </div>
            <div class="bg-gray-200 p-4 w-1/3">
                <PropertyWindow SelectedItem="@selectedItem"
                                OnItemCreated="HandleItemCreated"
                                OnChange="HandleChange"
                                FlowItems="@flowItems"/>
            </div>
        </div>
    </div>
}
else
{
    <div class="flex justify-center items-center h-screen">
        <div class="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-slate-900"></div>
    </div>
}

@code {
    [Parameter] public Guid workflowId { get; set; }
    private readonly CancellationTokenSource cts = new();
    private Core.Domain.Workflow.Workflow? currentWorkflow;
    private object? selectedItem;
    private WorkflowDesigner? workflowDesigner;
    private bool hasUnsavedChanges;
    private DotNetObjectReference<Designer>? objRef;
    private string errorMessage = "";
    private List<object> flowItems = new();
    private string? toastMessage;
    private bool showToast;

    // Fields for editing the workflow name
    private bool isEditingName;
    private string? tempName;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("navigationHandler.setUnsavedChanges", false);
        ChangeTracker.OnChange += HandleChangeTrackerChanged;

        if (!AppStateService.IsInitialized)
        {
            await AppStateService.Initialize(AuthenticationStateProvider, Logger, cts, Mediator);
        }

        await LoadWorkflow(workflowId);
        await base.OnInitializedAsync();
    }

    private void HandleChangeTrackerChanged()
    {
        hasUnsavedChanges = ChangeTracker.HasUnsavedChanges;
        InvokeAsync(StateHasChanged);
    }

    private void HandleChange()
    {
        ChangeTracker.HasUnsavedChanges = true;
        hasUnsavedChanges = true;
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadWorkflow(Guid id)
    {
        var workflowResult = await Mediator.Send(new GetWorkflowByIdRequest(id, AppStateService.Tenant.TenantId));
        if (workflowResult.IsFailed)
        {
            errorMessage = "Failed to load the workflow. Please try again.";
            return;
        }

        currentWorkflow = workflowResult.Value;
        if (currentWorkflow.ProcessFlow is null)
        {
            currentWorkflow.ProcessFlow = new ProcessFlow();
        }

        // Initialize tempName for editing
        tempName = currentWorkflow.Name;

        UpdateFlowItems();
        StateHasChanged();
    }

    private void UpdateFlowItems()
    {
        flowItems.Clear();
        if (currentWorkflow?.ProcessFlow?.Triggers != null)
            flowItems.AddRange(currentWorkflow.ProcessFlow.Triggers.Values);
        if (currentWorkflow?.ProcessFlow?.Actions != null)
            flowItems.AddRange(currentWorkflow.ProcessFlow.Actions.Values);
        if (currentWorkflow?.ProcessFlow?.Outcome != null)
            flowItems.Add(currentWorkflow.ProcessFlow.Outcome);
    }

    private async Task SaveWorkflow()
    {
        try
        {
            if (currentWorkflow != null)
            {
                var updateResult = await Mediator.Send(new UpdateWorkflowRequest(
                    currentWorkflow.WorkflowId,
                    currentWorkflow.Name,
                    currentWorkflow.WorkflowState,
                    currentWorkflow.ProcessFlow));

                if (updateResult.IsSuccess)
                {
                    var workflowInAppStateService = AppStateService.WorkflowSummaries
                        .FirstOrDefault(p => p.WorkflowId == currentWorkflow.WorkflowId);
                    if (workflowInAppStateService is not null)
                    {
                        workflowInAppStateService.Name = currentWorkflow.Name;
                    }

                    ChangeTracker.ResetChanges();
                    hasUnsavedChanges = false;
                    errorMessage = "";
                    await ShowToast("Workflow saved successfully");
                }
                else
                {
                    errorMessage = "Failed to save the workflow. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while saving the workflow.";
            Logger.LogError(ex, "Error saving workflow");
        }

        StateHasChanged();
    }

    private async Task RunWorkflow()
    {
        if (currentWorkflow is not null)
        {
            var createResult = await Mediator.Send(new CreateOutcomeRequest(currentWorkflow.WorkflowId));
            if (createResult.IsFailed)
            {
                errorMessage = "Failed to run the workflow. Please try again.";
            }
            else
            {
                await ShowToast("Workflow executed successfully");
                errorMessage = "";
            }
        }
    }

    private void HandleItemSelected(object? item)
    {
        selectedItem = item;
        StateHasChanged();
    }

    private void HandleItemCreated(object newItem)
    {
        if (currentWorkflow?.ProcessFlow == null)
        {
            errorMessage = "No active workflow. Please create or select a workflow first.";
            return;
        }

        workflowDesigner?.AddItem(newItem);
        selectedItem = newItem;
        HandleChange();
    }

    private async Task ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        showToast = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        ChangeTracker.OnChange -= HandleChangeTrackerChanged;
    }

    public async ValueTask DisposeAsync()
    {
        if (objRef != null)
        {
            objRef.Dispose();
        }
    }

    private void EditName()
    {
        tempName = currentWorkflow?.Name;
        isEditingName = true;
    }

    private async Task SaveName()
    {
        isEditingName = false;
        if (currentWorkflow != null && !string.IsNullOrWhiteSpace(tempName) && tempName != currentWorkflow.Name)
        {
            currentWorkflow.Name = tempName;
            await SaveWorkflow();
        }

        StateHasChanged();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveName();
        }
    }

}
