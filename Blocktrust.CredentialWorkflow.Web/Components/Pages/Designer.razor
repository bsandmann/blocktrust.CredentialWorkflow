@page "/designer"
@page "/designer/{workflowWorkflowId:guid}"
@page "/designer/new"
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow
@using Blocktrust.CredentialWorkflow.Core.Domain.Workflow
@using Blocktrust.CredentialWorkflow.Web.Components.Features
@using Blocktrust.CredentialWorkflow.Web.Components.Features.PropertyWindow
@using Blocktrust.CredentialWorkflow.Web.Components.Layout
@using Blocktrust.CredentialWorkflow.Web.Services
@using MediatR
@using Microsoft.AspNetCore.Components.Authorization
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.GetWorkflowById
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.UpdateWorkflow
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.CreateWorkflow
@using Blocktrust.CredentialWorkflow.Core.Commands.Outcome.CreateOutcome
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMediator Mediator
@inject AppStateService AppStateService
@inject ILogger<Designer> Logger
@inject WorkflowChangeTrackerService ChangeTracker
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@layout DesignerLayout

<PageTitle>Blocktrust Credential Workflow Platform - Designer</PageTitle>

@if (AppStateService.IsInitialized)
{
    <div class="flex flex-col h-screen">
 
<!-- Top bar -->
<div class="bg-gray-100 p-4 flex items-center flex-row border-b-2 border-slate-200">
    @if (isCreatingNew)
    {
        <div class="flex items-center">
            <input type="text" 
                   placeholder="Enter workflow name" 
                   class="w-64 mr-2 px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-slate-500" 
                   @bind="workflowName"/>
            <div class="flex space-x-2">
                <button class="bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-md transition duration-300 ease-in-out flex items-center"
                        @onclick="SaveNewWorkflow">
                    <span class="material-symbols-outlined mr-2">save</span>
                    Save
                </button>
                <button class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md transition duration-300 ease-in-out flex items-center"
                        @onclick="CancelNewWorkflow">
                    <span class="material-symbols-outlined mr-2">close</span>
                    Cancel
                </button>
            </div>
        </div>
    }
    else
    {
        <select @bind="selectedWorkflowId" 
                @oninput="OnWorkflowSelectionChanged" 
                class="w-64 mr-2 px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-slate-500">
            @foreach (var workflow in AppStateService.WorkflowSummaries.OrderByDescending(w => w.UpdatedUtc))
            {
                <option value="@workflow.WorkflowId">@workflow.Name</option>
            }
        </select>
        <button class="bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-md transition duration-300 ease-in-out flex items-center" 
                @onclick="EditWorkflow">
            <span class="material-symbols-outlined mr-2">edit</span>
            Edit
        </button>
        
        <button class="bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-md transition duration-300 ease-in-out ml-4 flex items-center" 
                @onclick="InitiateNewWorkflow">
            <span class="material-symbols-outlined mr-2">add</span>
            New Workflow
        </button>
        
        <div class="flex-grow"></div>
        
        <div class="flex space-x-4">
            @if (currentWorkflow is not null)
            {
                <button class="@(hasUnsavedChanges || isEditing ? 
                                "bg-slate-700 hover:bg-slate-600" : 
                                "bg-gray-500 cursor-not-allowed") 
                        text-white px-4 py-2 rounded-md transition duration-300 ease-in-out flex items-center" 
                        @onclick="SaveWorkflow" 
                        disabled="@(!hasUnsavedChanges && !isEditing)">
                    <span class="material-symbols-outlined mr-2">save</span>
                    Save
                </button>
                
                @if (currentWorkflow.ProcessFlow is not null && 
                     currentWorkflow.ProcessFlow.Triggers.Any() && 
                     currentWorkflow.ProcessFlow.Actions.Any())
                {
                    <button class="@(hasUnsavedChanges ? 
                                    "bg-gray-500 cursor-not-allowed" : 
                                    "bg-slate-700 hover:bg-slate-600") 
                            text-white px-4 py-2 rounded-md transition duration-300 ease-in-out flex items-center" 
                            @onclick="RunWorkflow" 
                            disabled="@hasUnsavedChanges">
                        <span class="material-symbols-outlined mr-2">play_arrow</span>
                        Run
                    </button>
                }
                else
                {
                    <button class="bg-gray-500 text-white px-4 py-2 rounded-md cursor-not-allowed flex items-center" 
                            disabled>
                        <span class="material-symbols-outlined mr-2">play_arrow</span>
                        Run
                    </button>
                }
            }
        </div>
    }
</div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4" role="alert">
                <p class="font-bold">Error</p>
                <p>@errorMessage</p>
            </div>
        }

        <!-- Main content area -->
        <div class="flex-grow flex flex-row">
            <div class="flex-grow bg-white p-4">
                @if (showToast)
                {
                    <div class="fixed top-4 right-4 bg-slate-800 text-white px-4 py-2 rounded-lg shadow-lg transition-opacity duration-500 @(showToast ? "opacity-100" : "opacity-0")">
                        @toastMessage
                    </div>
                }
                <WorkflowDesigner @ref="workflowDesigner"
                              Workflow="@currentWorkflow"
                              OnItemSelected="HandleItemSelected"
                              OnChange="HandleChange"/>
            </div>
            <div class="bg-gray-200 p-4 w-1/3">
                <PropertyWindow SelectedItem="@selectedItem"
                           OnItemCreated="HandleItemCreated"
                           OnChange="HandleChange"
                           flowItems="@flowItems"/>
            </div>
        </div>
    </div>
}
else
{
    <div class="flex justify-center items-center h-screen">
        <div class="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-slate-900"></div>
    </div>
}

@code {
    [Parameter] public Guid? WorkflowWorkflowId { get; set; }
    private readonly CancellationTokenSource cts = new();
    private string? workflowName;
    private Core.Domain.Workflow.Workflow? currentWorkflow;
    private ProcessFlow? currentProcessFlow;
    private bool isEditing;
    private bool isCreatingNew;
    private Guid? selectedWorkflowId;
    private object? selectedItem;
    private WorkflowDesigner? workflowDesigner;
    private bool hasUnsavedChanges;
    private DotNetObjectReference<Designer>? objRef;
    private string errorMessage = "";
    private List<object> flowItems = new();
    private string? toastMessage;
    private bool showToast;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("navigationHandler.setUnsavedChanges", false);
        ChangeTracker.OnChange += HandleChangeTrackerChanged;

        if (!AppStateService.IsInitialized)
        {
            await AppStateService.Initialize(AuthenticationStateProvider, Logger, cts, Mediator);
        }

        var currentUrl = NavigationManager.Uri;
        if (currentUrl.EndsWith("/designer/new"))
        {
            InitiateNewWorkflow();
        }
        else if (WorkflowWorkflowId is not null)
        {
            await LoadWorkflow(WorkflowWorkflowId.Value);
        }
        else if (!AppStateService.WorkflowSummaries.Any())
        {
            InitiateNewWorkflow();
        }
        else
        {
            var latestWorkflow = AppStateService.WorkflowSummaries.OrderByDescending(w => w.UpdatedUtc).First();
            await LoadWorkflow(latestWorkflow.WorkflowId);
        }

        await base.OnInitializedAsync();
    }

    private void HandleChangeTrackerChanged()
    {
        hasUnsavedChanges = ChangeTracker.HasUnsavedChanges;
        InvokeAsync(StateHasChanged);
    }

    private void HandleChange()
    {
        ChangeTracker.HasUnsavedChanges = true;
        hasUnsavedChanges = true;
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadWorkflow(Guid workflowId)
    {
        var workflowResult = await Mediator.Send(new GetWorkflowByIdRequest(workflowId, AppStateService.Tenant.TenantId));
        if (workflowResult.IsFailed)
        {
            errorMessage = "Failed to load the workflow. Please try again.";
            return;
        }

        currentWorkflow = workflowResult.Value;
        if (currentWorkflow.ProcessFlow is null)
        {
            currentWorkflow.ProcessFlow = new ProcessFlow();
        }

        workflowName = currentWorkflow.Name;
        selectedWorkflowId = currentWorkflow.WorkflowId;
        isEditing = false;
        isCreatingNew = false;
        errorMessage = "";

        flowItems.Clear();
        if (currentWorkflow.ProcessFlow.Triggers != null)
            flowItems.AddRange(currentWorkflow.ProcessFlow.Triggers.Values);
        if (currentWorkflow.ProcessFlow.Actions != null)
            flowItems.AddRange(currentWorkflow.ProcessFlow.Actions.Values);
        if (currentWorkflow.ProcessFlow.Outcome != null)
            flowItems.Add(currentWorkflow.ProcessFlow.Outcome);

        StateHasChanged();
    }
    
    private async Task SaveNewWorkflow()
    {
        if (string.IsNullOrWhiteSpace(workflowName))
        {
            errorMessage = "Please enter a workflow name.";
            return;
        }

        var newProcessFlow = new ProcessFlow();
        var createResult = await Mediator.Send(new CreateWorkflowRequest(AppStateService.Tenant.TenantId, workflowName, newProcessFlow));
        if (createResult.IsFailed)
        {
            errorMessage = "Failed to create the workflow. Please try again.";
            return;
        }

        currentWorkflow = createResult.Value;
        selectedWorkflowId = currentWorkflow.WorkflowId;
        isEditing = false;
        isCreatingNew = false;

        AppStateService.WorkflowSummaries.Add(new WorkflowSummary
        {
            Name = currentWorkflow.Name,
            UpdatedUtc = currentWorkflow.UpdatedUtc,
            WorkflowId = currentWorkflow.WorkflowId
        });

        NavigationManager.NavigateTo($"/designer/{currentWorkflow.WorkflowId}", forceLoad: false);
        await ShowToast("Workflow created successfully");
        errorMessage = "";
        StateHasChanged();
    }

    private async Task CancelNewWorkflow()
    {
        if (selectedWorkflowId.HasValue)
        {
            await LoadWorkflow(selectedWorkflowId.Value);
        }
        else
        {
            // If there was no previous workflow selected, reset to initial state
            currentWorkflow = null;
            workflowName = "";
        }
    
        isCreatingNew = false;
        errorMessage = "";
        StateHasChanged();
    }

    private void InitiateNewWorkflow()
    {
        isCreatingNew = true;
        workflowName = "";
        errorMessage = "";
        StateHasChanged();
    }

    private async Task SaveWorkflow()
    {
        if (string.IsNullOrWhiteSpace(workflowName))
        {
            errorMessage = "Please enter a workflow name.";
            return;
        }

        try 
        {
            if (isCreatingNew)
            {
                await CreateNewWorkflow();
                return;
            }

            if (currentWorkflow != null)
            {
                var updateResult = await Mediator.Send(new UpdateWorkflowRequest(
                    currentWorkflow.WorkflowId,
                    workflowName,
                    currentWorkflow.WorkflowState,
                    currentWorkflow.ProcessFlow));

                if (updateResult.IsSuccess)
                {
                    var workflowInAppStateService = AppStateService.WorkflowSummaries
                        .FirstOrDefault(p => p.WorkflowId == currentWorkflow.WorkflowId);
                    if (workflowInAppStateService is not null)
                    {
                        workflowInAppStateService.Name = workflowName;
                    }

                    isEditing = false;
                    ChangeTracker.ResetChanges();
                    hasUnsavedChanges = false;
                    errorMessage = "";
                    await ShowToast("Workflow saved successfully");
                }
                else
                {
                    errorMessage = "Failed to save the workflow. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while saving the workflow.";
            Logger.LogError(ex, "Error saving workflow");
        }

        StateHasChanged();
    }


    private async Task CreateNewWorkflow()
    {
        if (string.IsNullOrWhiteSpace(workflowName))
        {
            errorMessage = "Please enter a workflow name.";
            return;
        }

        var newProcessFlow = new ProcessFlow();
        var createResult = await Mediator.Send(new CreateWorkflowRequest(AppStateService.Tenant.TenantId, workflowName, newProcessFlow));
        if (createResult.IsFailed)
        {
            errorMessage = "Failed to create the workflow. Please try again.";
            return;
        }

        currentWorkflow = createResult.Value;
        selectedWorkflowId = currentWorkflow.WorkflowId;
        isEditing = false;
        isCreatingNew = false;

        AppStateService.WorkflowSummaries.Add(new WorkflowSummary
        {
            Name = currentWorkflow.Name,
            UpdatedUtc = currentWorkflow.UpdatedUtc,
            WorkflowId = currentWorkflow.WorkflowId
        });

        NavigationManager.NavigateTo($"/designer/{currentWorkflow.WorkflowId}", forceLoad: false);
        await ShowToast("Workflow created successfully");
        errorMessage = "";
        StateHasChanged();
    }

    private void EditWorkflow()
    {
        isEditing = true;
    }

    private async Task RunWorkflow()
    {
        if (currentWorkflow is not null)
        {
            var createResult = await Mediator.Send(new CreateOutcomeRequest(currentWorkflow.WorkflowId));
            if (createResult.IsFailed)
            {
                errorMessage = "Failed to run the workflow. Please try again.";
            }
            else
            {
                await ShowToast("Workflow executed successfully");
                errorMessage = "";
            }
        }
    }

    private async Task OnWorkflowSelectionChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out Guid selectedId))
        {
            await LoadWorkflow(selectedId);
            NavigationManager.NavigateTo($"/designer/{selectedId}", forceLoad: false);
        }
    }

    private void HandleItemSelected(object? item)
    {
        selectedItem = item;
        StateHasChanged();
    }

    private void HandleItemCreated(object newItem)
    {
        if (currentWorkflow?.ProcessFlow == null)
        {
            errorMessage = "No active workflow. Please create or select a workflow first.";
            return;
        }

        workflowDesigner?.AddItem(newItem);
        selectedItem = newItem;
        HandleChange();
    }

    private async Task ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        showToast = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        ChangeTracker.OnChange -= HandleChangeTrackerChanged;
    }

    public async ValueTask DisposeAsync()
    {
        if (objRef != null)
        {
            objRef.Dispose();
        }
    }
}