@page "/form/{WorkflowId:guid}"
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.GetWorkflowById
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using MediatR
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Blocktrust.CredentialWorkflow.Core.Services
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject ILogger<DynamicForm> Logger
@inject IFormService FormService
@attribute [AllowAnonymous]

<PageTitle>Workflow Form</PageTitle>

<div class="min-h-screen bg-gray-50 py-12">
    <div class="max-w-2xl mx-auto bg-white p-8 rounded-xl shadow-sm">
        @if (isLoading)
        {
            <div class="flex justify-center items-center h-32">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-slate-800"></div>
            </div>
        }
        else if (!string.IsNullOrEmpty(error))
        {
            <div class="bg-red-50 border-l-4 border-red-400 p-4">
                <div class="flex">
                    <div class="ml-3">
                        <h3 class="text-sm font-medium text-red-800">Error</h3>
                        <p class="text-sm text-red-700 mt-2">@error</p>
                    </div>
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="bg-green-50 border-l-4 border-green-400 p-4 mb-6">
                <div class="flex">
                    <div class="ml-3">
                        <p class="text-sm text-green-700">@successMessage</p>
                    </div>
                </div>
            </div>
        }
        else
        {
            <EditForm Model="@formModel" OnValidSubmit="@HandleSubmit">
                <DataAnnotationsValidator />
                
                @foreach (var field in formModel.Fields)
                {
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">
                            @(field.Description ?? field.Name)
                        </label>
                        
                        @switch (field.Type.ToLower())
                        {
                            case "string":
                            case "email":
                                <InputText @bind-Value="field.StringValue"
                                         type="@(field.Type.ToLower() == "email" ? "email" : "text")"
                                         class="block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 focus:border-slate-500 focus:outline-none focus:ring-1 focus:ring-slate-500 sm:text-sm" />
                                break;
                                
                            case "number":
                                <InputNumber @bind-Value="field.NumberValue"
                                           class="block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 focus:border-slate-500 focus:outline-none focus:ring-1 focus:ring-slate-500 sm:text-sm" />
                                break;
                                
                            case "boolean":
                                <InputCheckbox @bind-Value="field.BoolValue"
                                             class="h-4 w-4 rounded border-gray-300 text-slate-600 focus:ring-slate-500" />
                                break;
                                
                            case "date":
                                <InputDate @bind-Value="field.DateValue"
                                         class="block w-full rounded-md border border-gray-300 px-3 py-2 text-gray-900 focus:border-slate-500 focus:outline-none focus:ring-1 focus:ring-slate-500 sm:text-sm" />
                                break;
                        }
                        
                        @if (!string.IsNullOrEmpty(field.ValidationMessage))
                        {
                            <div class="mt-1 text-sm text-red-600">@field.ValidationMessage</div>
                        }
                    </div>
                }

                <div class="pt-4">
                    <button type="submit"
                            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-slate-700 hover:bg-slate-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500">
                        Submit
                    </button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid WorkflowId { get; set; }

    private bool isLoading = true;
    private string? error;
    private string? successMessage;
    private DynamicFormModel formModel = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await Mediator.Send(new GetWorkflowByIdRequest(WorkflowId));
            if (result.IsFailed)
            {
                error = "Failed to load the form. The workflow may not exist.";
                return;
            }

            var workflow = result.Value;
            if (workflow.ProcessFlow?.Triggers == null || !workflow.ProcessFlow.Triggers.Any())
            {
                error = "This workflow does not have any triggers configured.";
                return;
            }

            var trigger = workflow.ProcessFlow.Triggers.First().Value;
            if (trigger.Type != ETriggerType.Form)
            {
                error = "This workflow is not configured with a form trigger.";
                return;
            }

            if (trigger.Input is TriggerInputForm formTrigger)
            {
                foreach (var param in formTrigger.Parameters)
                {
                    formModel.Fields.Add(new FormField
                    {
                        Name = param.Key,
                        Type = param.Value.Type.ToString().ToLower(),
                        Description = param.Value.Description,
                        IsRequired = param.Value.Required
                    });
                }
            }
        }
        catch (Exception ex)
        {
            error = "An unexpected error occurred while loading the form.";
            Logger.LogError(ex, "Error loading form for workflow {WorkflowId}", WorkflowId);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (!ValidateForm())
            {
                return;
            }

            isLoading = true;
            StateHasChanged();

            var formData = formModel.Fields.ToDictionary(
                field => field.Name,
                field => field.GetValue()
            );

            var result = await FormService.ProcessFormSubmission(WorkflowId, formData);
            if (result.IsSuccess)
            {
                successMessage = "Form submitted successfully!";
                formModel = new DynamicFormModel(); // Reset form
            }
            else
            {
                error = result.Errors.First().Message;
            }
        }
        catch (Exception ex)
        {
            error = "An error occurred while submitting the form.";
            Logger.LogError(ex, "Error submitting form for workflow {WorkflowId}", WorkflowId);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private bool ValidateForm()
    {
        bool isValid = true;
        foreach (var field in formModel.Fields)
        {
            if (!field.Validate())
            {
                isValid = false;
            }
        }
        return isValid;
    }

    public class DynamicFormModel
    {
        public List<FormField> Fields { get; set; } = new();
    }

    public class FormField
    {
        public string Name { get; set; } = "";
        public string Type { get; set; } = "string";
        public string? Description { get; set; }
        public bool IsRequired { get; set; }
        public string? ValidationMessage { get; set; }

        public string StringValue { get; set; } = "";
        public decimal NumberValue { get; set; }
        public bool BoolValue { get; set; }
        public DateTime DateValue { get; set; } = DateTime.Today;

        public bool Validate()
        {
            ValidationMessage = null;

            if (IsRequired)
            {
                switch (Type.ToLower())
                {
                    case "string":
                    case "email":
                        if (string.IsNullOrWhiteSpace(StringValue))
                        {
                            ValidationMessage = $"{Name} is required.";
                            return false;
                        }
                        if (Type.ToLower() == "email" && !IsValidEmail(StringValue))
                        {
                            ValidationMessage = $"{Name} must be a valid email address.";
                            return false;
                        }
                        break;
                }
            }

            return true;
        }

        private bool IsValidEmail(string email)
        {
            try
            {
                var addr = new System.Net.Mail.MailAddress(email);
                return addr.Address == email;
            }
            catch
            {
                return false;
            }
        }

        public object GetValue()
        {
            return Type.ToLower() switch
            {
                "string" => StringValue,
                "email" => StringValue,
                "number" => NumberValue,
                "boolean" => BoolValue,
                "date" => DateValue,
                _ => StringValue
            };
        }
    }
}