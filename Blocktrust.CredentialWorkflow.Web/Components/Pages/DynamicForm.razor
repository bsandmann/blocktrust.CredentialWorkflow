@page "/form/{WorkflowId:guid}"
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.GetWorkflowById
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using MediatR
@using Microsoft.AspNetCore.Authorization
@using Blocktrust.CredentialWorkflow.Core.Services

@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject ILogger<DynamicForm> Logger
@inject IFormService FormService

@attribute [AllowAnonymous]

<div class="min-h-screen bg-gray-50">
    <div class="max-w-2xl mx-auto py-8 px-4 sm:px-6">
        @if (isLoading)
        {
            <div class="flex justify-center py-12">
                <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-slate-900"></div>
            </div>
        }
        else
        {
            <div class="bg-white shadow rounded-lg">
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="p-6">
                        <div class="bg-red-50 border-l-4 border-red-400 p-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <span class="material-symbols-outlined text-red-400">error</span>
                                </div>
                                <div class="ml-3">
                                    <h3 class="text-sm font-medium text-red-800">Error</h3>
                                    <div class="mt-2 text-sm text-red-700">@error</div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="p-6">
                        <div class="text-center">
                            <div class="inline-flex items-center justify-center w-12 h-12 rounded-full bg-green-100 mb-4">
                                <span class="material-symbols-outlined text-green-600">check_circle</span>
                            </div>
                            <h3 class="text-lg font-medium text-gray-900 mb-2">@successMessage</h3>
                            <div class="mt-6">
                                <button @onclick="ResetForm" 
                                        class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-slate-600 hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500">
                                    Submit Another Response
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="p-6">
                        <div class="pb-5 mb-5 border-b border-gray-200">
                            <h3 class="text-lg font-medium leading-6 text-gray-900">@(formTitle ?? "New Form")</h3>
                        </div>

                        <EditForm Model="@formModel" OnValidSubmit="@HandleSubmit" FormName="workflow-form">
                            <div class="space-y-6">
                                @foreach (var field in formModel.Fields)
                                {
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">
                                            @(field.Description ?? field.Name)
                                            @if (field.IsRequired)
                                            {
                                                <span class="text-red-500 ml-0.5">*</span>
                                            }
                                        </label>

                                        @switch (field.Type.ToLower())
                                        {
                                            case "string":
                                                @if (field.AllowedValues?.Any() == true)
                                                {
                                                    <InputSelect @bind-Value="field.StringValue" 
                                                          class="block w-full rounded-md border-0 py-2.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-slate-600 sm:text-sm sm:leading-6">
                                                        @if (!field.IsRequired)
                                                        {
                                                            <option value="">Select...</option>
                                                        }
                                                        @foreach (var value in field.AllowedValues)
                                                        {
                                                            <option value="@value">@value</option>
                                                        }
                                                    </InputSelect>
                                                }
                                                else
                                                {
                                                    <div class="relative rounded-md shadow-sm">
                                                    <InputText @bind-Value="field.StringValue"
                                                             class="block w-full rounded-md border-0 py-2.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-slate-600 sm:text-sm sm:leading-6"
                                                             placeholder="@(field.DefaultValue ?? $"Enter {field.Description ?? field.Name}...")" />
                                                    @if (!string.IsNullOrEmpty(field.ValidationMessage))
                                                    {
                                                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
                                                            <span class="material-symbols-outlined text-red-500">error</span>
                                                        </div>
                                                    }
                                                </div>
                                                }
                                                break;

                                            case "number":
                                                <div class="relative rounded-md shadow-sm">
                                                    <InputNumber @bind-Value="field.NumberValue"
                                                               class="block w-full rounded-md border-0 py-2.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-slate-600 sm:text-sm sm:leading-6"
                                                               placeholder="@(field.DefaultValue ?? $"Enter {field.Description ?? field.Name}...")" />
                                                    @if (!string.IsNullOrEmpty(field.ValidationMessage))
                                                    {
                                                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
                                                            <span class="material-symbols-outlined text-red-500">error</span>
                                                        </div>
                                                    }
                                                </div>
                                                break;

                                            case "boolean":
                                                <div class="mt-1">
                                                    <InputCheckbox @bind-Value="field.BoolValue"
                                                                 class="h-4 w-4 text-slate-600 focus:ring-slate-500 border-gray-300 rounded" />
                                                    @if (!string.IsNullOrEmpty(field.DefaultValue))
                                                    {
                                                        <span class="ml-2 text-sm text-gray-500">@field.DefaultValue</span>
                                                    }
                                                </div>
                                                break;

                                            case "date":
                                                <div class="relative rounded-md shadow-sm">
                                                    <InputDate @bind-Value="field.DateValue"
                                                             class="block w-full rounded-md border-0 py-2.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-slate-600 sm:text-sm sm:leading-6" />
                                                    @if (!string.IsNullOrEmpty(field.ValidationMessage))
                                                    {
                                                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
                                                            <span class="material-symbols-outlined text-red-500">error</span>
                                                        </div>
                                                    }
                                                </div>
                                                break;

                                            case "email":
                                                <div class="relative rounded-md shadow-sm">
                                                    <InputText @bind-Value="field.StringValue"
                                                             type="email"
                                                             class="block w-full rounded-md border-0 py-2.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-slate-600 sm:text-sm sm:leading-6"
                                                             placeholder="@(field.DefaultValue ?? $"Enter {field.Description ?? field.Name}...")" />
                                                    @if (!string.IsNullOrEmpty(field.ValidationMessage))
                                                    {
                                                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
                                                            <span class="material-symbols-outlined text-red-500">error</span>
                                                        </div>
                                                    }
                                                </div>
                                                break;
                                        }

                                        @if (!string.IsNullOrEmpty(field.ValidationMessage))
                                        {
                                            <p class="mt-1 text-sm text-red-600 flex items-center gap-1">
                                                <span class="material-symbols-outlined text-sm">error</span>
                                                @field.ValidationMessage
                                            </p>
                                        }
                                    </div>
                                }

                                <div class="pt-5">
                                    <button type="submit"
                                            disabled="@isSubmitting"
                                            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-slate-600 hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500 disabled:opacity-50 disabled:cursor-not-allowed">
                                        @if (isSubmitting)
                                        {
                                            <span class="inline-flex items-center">
                                                <div class="mr-2 h-4 w-4 rounded-full border-2 border-b-transparent border-white animate-spin"></div>
                                                Submitting...
                                            </span>
                                        }
                                        else
                                        {
                                            <span>Submit</span>
                                        }
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public Guid WorkflowId { get; set; }

    private bool isLoading = true;
    private bool isSubmitting = false;
    private string? error;
    private string? successMessage;
    private string? formTitle;
    private DynamicFormModel formModel = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await Mediator.Send(new GetWorkflowByIdRequest(WorkflowId));
            if (result.IsFailed)
            {
                error = "Unable to load the form. Please try again later.";
                return;
            }

            var workflow = result.Value;
            if (workflow.ProcessFlow?.Triggers == null || !workflow.ProcessFlow.Triggers.Any())
            {
                error = "This form is not properly configured.";
                return;
            }

            var trigger = workflow.ProcessFlow.Triggers.First().Value;
            if (trigger.Type != ETriggerType.Form)
            {
                error = "Invalid form configuration.";
                return;
            }

            if (trigger.Input is TriggerInputForm formTrigger)
            {
                formTitle = workflow.Name;
                foreach (var param in formTrigger.Parameters)
                {
                    formModel.Fields.Add(new FormField
                    {
                        Name = param.Key,
                        Type = param.Value.Type.ToString().ToLower(),
                        Description = param.Value.Description,
                        IsRequired = param.Value.Required,
                        DefaultValue = param.Value.DefaultValue,
                        AllowedValues = param.Value.AllowedValues
                    });
                }
            }
        }
        catch (Exception ex)
        {
            error = "An error occurred while loading the form.";
            Logger.LogError(ex, "Error loading form for workflow {WorkflowId}", WorkflowId);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        try
        {
            // Clear any existing validation messages
            foreach (var field in formModel.Fields)
            {
                field.ValidationMessage = null;
            }

            // Validate the form data
            bool isValid = true;
            foreach (var field in formModel.Fields.Where(f => f.IsRequired))
            {
                switch (field.Type.ToLower())
                {
                    case "string":
                    case "email":
                        if (string.IsNullOrWhiteSpace(field.StringValue))
                        {
                            field.ValidationMessage = "This field is required";
                            isValid = false;
                        }
                        else if (field.Type.ToLower() == "email" && !IsValidEmail(field.StringValue))
                        {
                            field.ValidationMessage = "Please enter a valid email address";
                            isValid = false;
                        }
                        break;

                    case "number":
                        if (!field.IsNumberSet)
                        {
                            field.ValidationMessage = "This field is required";
                            isValid = false;
                        }
                        break;

                    case "date":
                        if (field.DateValue == default)
                        {
                            field.ValidationMessage = "This field is required";
                            isValid = false;
                        }
                        break;
                }
            }

            if (!isValid)
            {
                return;
            }

            isSubmitting = true;
            StateHasChanged();

            // Prepare form data
            var formData = formModel.Fields.ToDictionary(
                field => field.Name,
                field => field.GetValue()
            );

            // Submit the form data
            var result = await FormService.ProcessFormSubmission(WorkflowId, formData);
            
            if (result.IsSuccess)
            {
                successMessage = "Form submitted successfully!";
                StateHasChanged();
            }
            else
            {
                error = result.Errors.First().Message;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            error = "An error occurred while submitting the form.";
            Logger.LogError(ex, "Error submitting form for workflow {WorkflowId}", WorkflowId);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private bool ValidateForm()
    {
        bool isValid = true;
        foreach (var field in formModel.Fields)
        {
            if (field.IsRequired)
            {
                switch (field.Type.ToLower())
                {
                    case "string":
                    case "email":
                        if (string.IsNullOrWhiteSpace(field.StringValue))
                        {
                            field.ValidationMessage = "This field is required";
                            isValid = false;
                        }
                        else if (field.Type.ToLower() == "email" && !IsValidEmail(field.StringValue))
                        {
                            field.ValidationMessage = "Please enter a valid email address";
                            isValid = false;
                        }
                        break;

                    case "number":
                        if (!field.IsNumberSet)
                        {
                            field.ValidationMessage = "This field is required";
                            isValid = false;
                        }
                        break;

                    case "date":
                        if (field.DateValue == default)
                        {
                            field.ValidationMessage = "This field is required";
                            isValid = false;
                        }
                        break;
                }
            }
        }
        return isValid;
    }

    private void ResetForm()
    {
        successMessage = null;
        error = null;
        formModel = new DynamicFormModel();
        OnInitializedAsync();
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    public class DynamicFormModel
    {
        public List<FormField> Fields { get; set; } = new();
    }

    public class FormField
    {
        public string Name { get; set; } = "";
        public string Type { get; set; } = "string";
        public string Description { get; set; } = "";
        public bool IsRequired { get; set; }
        public string? DefaultValue { get; set; }
        public string[]? AllowedValues { get; set; }
        public string? ValidationMessage { get; set; }

        private string _stringValue = "";
        public string StringValue
        {
            get => _stringValue;
            set
            {
                _stringValue = value ?? "";
                ValidationMessage = null;
            }
        }

        private decimal _numberValue;
        private bool _isNumberSet;
        public decimal NumberValue
        {
            get => _numberValue;
            set
            {
                _numberValue = value;
                _isNumberSet = true;
                ValidationMessage = null;
            }
        }
        public bool IsNumberSet => _isNumberSet;

        private bool _boolValue;
        public bool BoolValue
        {
            get => _boolValue;
            set
            {
                _boolValue = value;
                ValidationMessage = null;
            }
        }

        private DateTime _dateValue = DateTime.Today;
        public DateTime DateValue
        {
            get => _dateValue;
            set
            {
                _dateValue = value;
                ValidationMessage = null;
            }
        }

        public object GetValue()
        {
            return Type.ToLower() switch
            {
                "string" => StringValue,
                "email" => StringValue,
                "number" => NumberValue,
                "boolean" => BoolValue,
                "date" => DateValue.ToString("yyyy-MM-dd"),
                _ => StringValue
            };
        }

        public void SetDefaultValue()
        {
            if (string.IsNullOrEmpty(DefaultValue)) return;

            switch (Type.ToLower())
            {
                case "string":
                case "email":
                    StringValue = DefaultValue;
                    break;
                case "number":
                    if (decimal.TryParse(DefaultValue, out decimal numValue))
                    {
                        NumberValue = numValue;
                    }
                    break;
                case "boolean":
                    if (bool.TryParse(DefaultValue, out bool boolValue))
                    {
                        BoolValue = boolValue;
                    }
                    break;
                case "date":
                    if (DateTime.TryParse(DefaultValue, out DateTime dateValue))
                    {
                        DateValue = dateValue;
                    }
                    break;
            }
        }
    }
}