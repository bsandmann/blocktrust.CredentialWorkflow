@page "/form/{WorkflowId:guid}"
@using Blocktrust.CredentialWorkflow.Core.Commands.Workflow.GetWorkflowById
@using Blocktrust.CredentialWorkflow.Core.Domain.Enums
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using MediatR
@using Microsoft.AspNetCore.Authorization
@using Blocktrust.CredentialWorkflow.Core.Services

@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject ILogger<DynamicForm> Logger
@inject IFormService FormService
@rendermode @(new InteractiveServerRenderMode(prerender: false))


@attribute [AllowAnonymous]

<PageTitle>@(formTitle ?? "Dynamic Form")</PageTitle>

<div class="min-h-screen bg-gray-50">
    <div class="max-w-2xl mx-auto py-8 px-4 sm:px-6">
        <div class="bg-white shadow rounded-lg">
            @if (isLoading)
            {
                <div class="flex justify-center py-12">
                    <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-slate-900"></div>
                </div>
            }
            else if (!string.IsNullOrEmpty(error))
            {
                <div class="p-6">
                    <div class="bg-red-50 border-l-4 border-red-400 p-4">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                <span class="material-symbols-outlined text-red-400">error</span>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm font-medium text-red-800">Error</h3>
                                <div class="mt-2 text-sm text-red-700">@error</div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else if (isSuccess)
            {
                <div class="p-6">
                    <div class="text-center">
                        <div class="inline-flex items-center justify-center w-12 h-12 rounded-full bg-green-100 mb-4">
                            <span class="material-symbols-outlined text-green-600">check_circle</span>
                        </div>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">Form submitted successfully!</h3>
                        <div class="mt-6">
                            <button @onclick="ResetForm" 
                                    class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-slate-600 hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500">
                                Submit Another Response
                            </button>
                        </div>
                    </div>
                </div>
            }
            else if (isWorkflowInactive)
            {
                <div class="p-6">
                    <div class="pb-5 mb-5 border-b border-gray-200">
                        <h3 class="text-lg font-medium leading-6 text-gray-900">@formTitle</h3>
                    </div>
                    
                    <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                <span class="material-symbols-outlined text-yellow-400">warning</span>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm font-medium text-yellow-800">Form Not Available</h3>
                                <div class="mt-2 text-sm text-yellow-700">
                                    This form is currently deactivated. Please contact the administrator to activate it.
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="pt-5">
                        <button disabled="true"
                                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gray-400 cursor-not-allowed opacity-50">
                            <span>Submit</span>
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="p-6">
                    <div class="pb-5 mb-5 border-b border-gray-200">
                        <h3 class="text-lg font-medium leading-6 text-gray-900">@formTitle</h3>
                    </div>

                    <div class="space-y-6">
                        @foreach (var field in formFields)
                        {
                            <div class="mb-6">
                                <label class="block text-sm font-medium text-gray-700 mb-1">
                                    @(field.Description ?? field.Name)
                                    @if (field.IsRequired)
                                    {
                                        <span class="text-red-500 ml-0.5">*</span>
                                    }
                                </label>

                                @if (field.AllowedValues?.Any() == true)
                                {
                                    <select value="@field.Value" 
                                            @onchange="@(e => UpdateFieldValue(field, e.Value?.ToString()))"
                                            class="block w-full rounded-md border-0 py-2.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-slate-600 sm:text-sm sm:leading-6">
                                        @if (!field.IsRequired)
                                        {
                                            <option value="">Select...</option>
                                        }
                                        @foreach (var value in field.AllowedValues)
                                        {
                                            <option value="@value">@value</option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    <input type="text" 
                                           value="@field.Value"
                                           @onchange="@(e => UpdateFieldValue(field, e.Value?.ToString()))"
                                           class="block w-full rounded-md border-0 py-2.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-slate-600 sm:text-sm sm:leading-6"
                                           placeholder="@(field.DefaultValue ?? $"Enter {field.Description ?? field.Name}...")" />
                                }

                                @if (!string.IsNullOrEmpty(field.ValidationMessage))
                                {
                                    <p class="mt-1 text-sm text-red-600 flex items-center gap-1">
                                        <span class="material-symbols-outlined text-sm">error</span>
                                        @field.ValidationMessage
                                    </p>
                                }
                            </div>
                        }

                        <div class="pt-5">
                            <button @onclick="HandleSubmit"
                                    disabled="@isSubmitting"
                                    class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-slate-600 hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500 disabled:opacity-50 disabled:cursor-not-allowed">
                                @if (isSubmitting)
                                {
                                    <span class="inline-flex items-center">
                                        <div class="mr-2 h-4 w-4 rounded-full border-2 border-b-transparent border-white animate-spin"></div>
                                        Submitting...
                                    </span>
                                }
                                else
                                {
                                    <span>Submit</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid WorkflowId { get; set; }

    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool isSuccess = false;
    private string? error;
    private string? formTitle;
    private List<FormField> formFields = new();
    private bool isWorkflowInactive = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await LoadWorkflowAndInitializeForm();
            if (!result.success)
            {
                error = result.error;
            }
        }
        catch (Exception ex)
        {
            error = "An unexpected error occurred while loading the form.";
            Logger.LogError(ex, "Error loading form for workflow {WorkflowId}", WorkflowId);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<(bool success, string? error)> LoadWorkflowAndInitializeForm()
    {
        var workflowResult = await Mediator.Send(new GetWorkflowByIdRequest(WorkflowId));
        if (workflowResult.IsFailed)
        {
            return (false, "Unable to load the form. Please try again later.");
        }

        var workflow = workflowResult.Value;
        
        // Check if workflow is inactive
        if (workflow.WorkflowState == EWorkflowState.Inactive)
        {
            isWorkflowInactive = true;
            formTitle = workflow.Name;
            return (true, null);
        }
        
        if (workflow.ProcessFlow?.Triggers == null || !workflow.ProcessFlow.Triggers.Any())
        {
            return (false, "This form is not properly configured.");
        }

        var trigger = workflow.ProcessFlow.Triggers.First().Value;
        if (trigger.Type != ETriggerType.Form)
        {
            return (false, "Invalid form configuration.");
        }

        if (trigger.Input is not TriggerInputForm formTrigger)
        {
            return (false, "Invalid form trigger configuration.");
        }

        formTitle = workflow.Name;
        formFields.Clear();

        foreach (var param in formTrigger.Parameters)
        {
            var field = new FormField
            {
                Name = param.Key,
                Type = param.Value.Type.ToString().ToLower(),
                Description = param.Value.Description,
                IsRequired = param.Value.Required,
                DefaultValue = param.Value.DefaultValue,
                AllowedValues = param.Value.AllowedValues,
                Value = param.Value.DefaultValue ?? ""
            };
            formFields.Add(field);
        }

        return (true, null);
    }

    private void UpdateFieldValue(FormField field, string? value)
    {
        field.Value = value ?? "";
        field.ValidationMessage = null;
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        try
        {
            ClearValidationMessages();
            
            if (!ValidateForm())
            {
                return;
            }

            isSubmitting = true;
            StateHasChanged();

            var formData = formFields.ToDictionary(
                field => field.Name,
                field => field.Value
            );

            var result = await FormService.ProcessFormSubmission(WorkflowId, formData);
            
            if (result.IsSuccess)
            {
                isSuccess = true;
            }
            else
            {
                error = result.Errors.First().Message;
            }
        }
        catch (Exception ex)
        {
            error = "An error occurred while submitting the form.";
            Logger.LogError(ex, "Error submitting form for workflow {WorkflowId}", WorkflowId);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private bool ValidateForm()
    {
        bool isValid = true;
        foreach (var field in formFields.Where(f => f.IsRequired))
        {
            if (string.IsNullOrWhiteSpace(field.Value))
            {
                field.ValidationMessage = "This field is required";
                isValid = false;
            }
        }
        return isValid;
    }

    private void ClearValidationMessages()
    {
        foreach (var field in formFields)
        {
            field.ValidationMessage = null;
        }
    }

    private async Task ResetForm()
    {
        isSuccess = false;
        error = null;
        isLoading = true;
        StateHasChanged();

        await LoadWorkflowAndInitializeForm();

        isLoading = false;
        StateHasChanged();
    }

    private class FormField
    {
        public string Name { get; set; } = "";
        public string Type { get; set; } = "string";
        public string Description { get; set; } = "";
        public bool IsRequired { get; set; }
        public string? DefaultValue { get; set; }
        public string[]? AllowedValues { get; set; }
        public string? ValidationMessage { get; set; }
        public string Value { get; set; } = "";
    }
}