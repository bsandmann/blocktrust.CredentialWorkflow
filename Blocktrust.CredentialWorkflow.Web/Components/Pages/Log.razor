@page "/logs"
@page "/logs/{WorkflowId}"

@using System.Text.Json
@using Blocktrust.CredentialWorkflow.Core.Commands.WorkflowOutcome.GetWorkflowOutcomes
@using Blocktrust.CredentialWorkflow.Web.Components.Layout
@using Blocktrust.CredentialWorkflow.Web.Services
@using MediatR
@using Microsoft.AspNetCore.Components.Authorization
@using Blocktrust.CredentialWorkflow.Core.Domain.Enums
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions
@using Blocktrust.CredentialWorkflow.Core.Domain.Workflow
@using Microsoft.AspNetCore.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMediator Mediator
@inject AppStateService AppStateService
@inject ILogger<ActionOutcome> Logger
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize()]
@layout AppLayout

<PageTitle>Blocktrust Credential Workflow Platform - Logs</PageTitle>

@if (AppStateService.IsInitialized)
{
    <div class="flex flex-col min-h-screen">
        <!-- Top bar -->
        <div class="bg-gray-100 p-4 flex items-center border-b-2 border-slate-200">
            <select value="@selectedWorkflowId" @onchange="OnWorkflowSelectionChanged"
                    class="max-w-full px-3 py-2 bg-white border border-slate-300 rounded-lg focus:ring-2 focus:ring-slate-400 focus:border-slate-400 transition-colors">
                @foreach (var workflow in AppStateService.WorkflowSummaries.OrderByDescending(w => w.UpdatedUtc))
                {
                    <option value="@workflow.WorkflowId">@workflow.Name</option>
                }
            </select>
        </div>

        <!-- Main content area -->
        <div class="flex-1 p-4 overflow-x-auto">
            @if (workflowOutcomes.Any())
            {
                <div class="min-w-fit bg-white rounded-lg shadow-sm border border-slate-200">
                    <div class="overflow-x-auto">
                        <table class="w-full">
                            <thead>
                                <tr class="bg-slate-50 border-b border-slate-200">
                                    <th class="px-4 py-3 text-left text-sm font-medium text-slate-700 whitespace-nowrap">State</th>
                                    <th class="px-4 py-3 text-left text-sm font-medium text-slate-700 whitespace-nowrap">
                                        <div class="flex items-center cursor-pointer" @onclick="() => SortByStarted()">
                                            Started
                                            @if (sortField == "Started")
                                            {
                                                <span class="material-symbols-outlined text-sm ml-1">
                                                    @(sortAscending ? "arrow_upward" : "arrow_downward")
                                                </span>
                                            }
                                        </div>
                                    </th>
                                    <th class="px-4 py-3 text-left text-sm font-medium text-slate-700 whitespace-nowrap">
                                        <div class="flex items-center cursor-pointer" @onclick="() => SortByEnded()">
                                            Ended
                                            @if (sortField == "Ended")
                                            {
                                                <span class="material-symbols-outlined text-sm ml-1">
                                                    @(sortAscending ? "arrow_upward" : "arrow_downward")
                                                </span>
                                            }
                                        </div>
                                    </th>
                                </tr>
                            </thead>
                            <tbody class="divide-y divide-slate-200">
                                @foreach (var workflowOutcome in GetSortedWorkflowOutcomes())
                                {
                                    <tr @onclick="() => ToggleOutcomeDetails(workflowOutcome.WorkflowOutcomeId)"
                                        class="cursor-pointer hover:bg-slate-50 transition-colors duration-150">
                                        <td class="px-4 py-3 whitespace-nowrap">
                                            <span class="@GetOutcomeStateColor(workflowOutcome.WorkflowOutcomeState) inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium">
                                                @workflowOutcome.WorkflowOutcomeState
                                            </span>
                                        </td>
                                        <td class="px-4 py-3 text-sm text-slate-600 whitespace-nowrap">@workflowOutcome.StartedUtc?.ToString("g")</td>
                                        <td class="px-4 py-3 text-sm text-slate-600 whitespace-nowrap">@workflowOutcome.EndedUtc?.ToString("g")</td>
                                    </tr>
                                    @if (expandedWorkflowOutcomeId == workflowOutcome.WorkflowOutcomeId)
                                    {
                                        <tr>
                                            <td colspan="3" class="px-4 py-4 bg-slate-50">
                                                <div class="space-y-6 max-w-full">
                                                    @if (!string.IsNullOrEmpty(workflowOutcome.ActionOutcomesJson))
                                                    {
                                                        <div class="bg-white rounded-lg shadow-sm p-4">
                                                            <div class="flex flex-wrap justify-between items-center gap-2 mb-4">
                                                                <h3 class="text-lg font-semibold text-slate-800">Action Outcomes</h3>
                                                                <button @onclick="@(() => CopyToClipboard(workflowOutcome.ActionOutcomesJson))"
                                                                        class="text-slate-500 hover:text-slate-700 p-1 rounded-lg hover:bg-slate-100 shrink-0">
                                                                    <span class="material-symbols-outlined text-lg">content_copy</span>
                                                                </button>
                                                            </div>
                                                            <div class="space-y-4">
                                                                @foreach (var outcome in ParseAndFormatJson(workflowOutcome.ActionOutcomesJson))
                                                                {
                                                                    <div class="bg-slate-50 rounded-lg p-4">
                                                                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                                                                            <div class="min-w-0">
                                                                                <div class="text-sm font-medium text-slate-700 mb-1">Outcome ID</div>
                                                                                <div class="text-sm font-mono truncate">@outcome.OutcomeId</div>
                                                                            </div>
                                                                            <div class="min-w-0">
                                                                                <div class="text-sm font-medium text-slate-700 mb-1">Action ID</div>
                                                                                <div class="text-sm font-mono truncate">@outcome.ActionId</div>
                                                                            </div>
                                                                        </div>

                                                                        @if (!string.IsNullOrEmpty(outcome.OutcomeJson))
                                                                        {
                                                                            <div>
                                                                                <div class="flex justify-between items-center mb-1">
                                                                                    <div class="text-sm font-medium text-slate-700">Outcome JSON</div>
                                                                                    <button @onclick="@(() => CopyToClipboard(outcome.OutcomeJson))"
                                                                                            class="text-slate-500 hover:text-slate-700 p-1 rounded-lg hover:bg-slate-100 shrink-0">
                                                                                        <span class="material-symbols-outlined text-sm">content_copy</span>
                                                                                    </button>
                                                                                </div>
                                                                                <div class="bg-white p-3 rounded-lg overflow-x-auto">
                                                                                    <pre class="text-sm font-mono whitespace-pre-wrap break-all">@FormatJson(outcome.OutcomeJson)</pre>
                                                                                </div>
                                                                            </div>
                                                                        }
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    }

                                                    @if (!string.IsNullOrEmpty(workflowOutcome.ExecutionContext))
                                                    {
                                                        <div class="bg-white rounded-lg shadow-sm p-4">
                                                            <div class="flex flex-wrap justify-between items-center gap-2 mb-4">
                                                                <h3 class="text-lg font-semibold text-slate-800">Execution Context</h3>
                                                                <button @onclick="@(() => CopyToClipboard(workflowOutcome.ExecutionContext))"
                                                                        class="text-slate-500 hover:text-slate-700 p-1 rounded-lg hover:bg-slate-100 shrink-0">
                                                                    <span class="material-symbols-outlined text-lg">content_copy</span>
                                                                </button>
                                                            </div>
                                                            @{
                                                                var context = ParseExecutionContext(workflowOutcome.ExecutionContext);
                                                            }
                                                            <div class="space-y-4">
                                                                <div>
                                                                    <div class="text-sm font-medium text-slate-700 mb-1">Method</div>
                                                                    <div class="text-sm font-mono">@context.Method</div>
                                                                </div>

                                                                @if (context.QueryParameters.Any())
                                                                {
                                                                    <div>
                                                                        <div class="text-sm font-medium text-slate-700 mb-2">Query Parameters</div>
                                                                        <div class="overflow-x-auto">
                                                                            <table class="min-w-full divide-y divide-slate-200">
                                                                                <thead class="bg-slate-50">
                                                                                    <tr>
                                                                                        <th class="px-3 py-2 text-left text-xs font-medium text-slate-500 whitespace-nowrap">Key</th>
                                                                                        <th class="px-3 py-2 text-left text-xs font-medium text-slate-500">Value</th>
                                                                                        <th class="px-3 py-2 w-8"></th>
                                                                                    </tr>
                                                                                </thead>
                                                                                <tbody class="divide-y divide-slate-200 bg-white">
                                                                                    @foreach (var param in context.QueryParameters)
                                                                                    {
                                                                                        <tr>
                                                                                            <td class="px-3 py-2 text-sm text-slate-600 whitespace-nowrap">@param.Key</td>
                                                                                            <td class="px-3 py-2 font-mono text-sm break-all">
                                                                                                <div class="max-w-md overflow-x-auto">@param.Value</div>
                                                                                            </td>
                                                                                            <td class="px-3 py-2">
                                                                                                <button @onclick="@(() => CopyToClipboard(param.Value))"
                                                                                                        class="text-slate-500 hover:text-slate-700 p-1 rounded-lg hover:bg-slate-100">
                                                                                                    <span class="material-symbols-outlined text-sm">content_copy</span>
                                                                                                </button>
                                                                                            </td>
                                                                                        </tr>
                                                                                    }
                                                                                </tbody>
                                                                            </table>
                                                                        </div>
                                                                    </div>
                                                                }

                                                                @if (!string.IsNullOrEmpty(context.Body))
                                                                {
                                                                    <div>
                                                                        <div class="flex justify-between items-center mb-1">
                                                                            <div class="text-sm font-medium text-slate-700">Body</div>
                                                                            <button @onclick="@(() => CopyToClipboard(context.Body))"
                                                                                    class="text-slate-500 hover:text-slate-700 p-1 rounded-lg hover:bg-slate-100 shrink-0">
                                                                                <span class="material-symbols-outlined text-sm">content_copy</span>
                                                                            </button>
                                                                        </div>
                                                                        <div class="bg-slate-50 p-3 rounded-lg overflow-x-auto">
                                                                            <pre class="text-sm font-mono whitespace-pre-wrap break-all">@FormatJson(context.Body)</pre>
                                                                        </div>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    }

                                                    @if (!string.IsNullOrEmpty(workflowOutcome.ErrorJson))
                                                    {
                                                        <div class="bg-white rounded-lg shadow-sm p-4">
                                                            <div class="flex flex-wrap justify-between items-center gap-2 mb-4">
                                                                <h3 class="text-lg font-semibold text-red-800">Error</h3>
                                                                <button @onclick="@(() => CopyToClipboard(workflowOutcome.ErrorJson))"
                                                                        class="text-slate-500 hover:text-slate-700 p-1 rounded-lg hover:bg-slate-100 shrink-0">
                                                                    <span class="material-symbols-outlined text-lg">content_copy</span>
                                                                </button>
                                                            </div>
                                                            <div class="bg-red-50 p-3 rounded-lg overflow-x-auto">
                                                                <pre class="text-sm font-mono text-red-700 whitespace-pre-wrap break-all">@FormatJson(workflowOutcome.ErrorJson)</pre>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            else
            {
                <div class="text-center py-8">
                    <p class="text-slate-600">No outcomes found for the selected workflow.</p>
                </div>
            }
        </div>
    </div>
}
else
{
    <p class="text-center mt-8">Loading...</p>
}

@code {
    [Parameter]
    public string? WorkflowId { get; set; }

    private readonly CancellationTokenSource cts = new();
    private Guid? selectedWorkflowId;
    private List<WorkflowOutcome> workflowOutcomes = new();
    private Guid? expandedWorkflowOutcomeId;
    
    // Sorting properties
    private string sortField = "Started";  // Default sort field
    private bool sortAscending = false;    // Default sort order (descending)

    protected override async Task OnInitializedAsync()
    {
        if (!AppStateService.IsInitialized)
        {
            await AppStateService.Initialize(AuthenticationStateProvider, Logger, cts, Mediator);
        }

        if (AppStateService.WorkflowSummaries.Any())
        {
            if (!string.IsNullOrEmpty(WorkflowId) && Guid.TryParse(WorkflowId, out Guid workflowGuid))
            {
                // If we have a workflow ID in the URL, use that
                selectedWorkflowId = workflowGuid;
            }
            else
            {
                // Otherwise, use the first workflow in the list
                selectedWorkflowId = AppStateService.WorkflowSummaries.OrderByDescending(w => w.UpdatedUtc).First().WorkflowId;
            }
            await LoadWorkflowOutcomes();
        }
    }

    private async Task OnWorkflowSelectionChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out Guid selectedId))
        {
            selectedWorkflowId = selectedId;
            // Update the URL without reloading the page
            NavigationManager.NavigateTo($"logs/{selectedId}", false);
            await LoadWorkflowOutcomes();
        }
    }

    private async Task LoadWorkflowOutcomes()
    {
        if (selectedWorkflowId.HasValue)
        {
            var outcomesResult = await Mediator.Send(new GetWorkflowOutcomesRequest(selectedWorkflowId.Value));
            if (outcomesResult.IsFailed)
            {
                Logger.LogError("Failed to fetch outcomes");
                workflowOutcomes.Clear();
            }
            else
            {
                workflowOutcomes = outcomesResult.Value;
            }

            expandedWorkflowOutcomeId = null;
            StateHasChanged();
        }
    }

    private string GetOutcomeStateColor(EWorkflowOutcomeState state) => state switch
    {
        EWorkflowOutcomeState.Success => "bg-green-100 text-green-800",
        EWorkflowOutcomeState.FailedWithErrors => "bg-red-100 text-red-800",
        EWorkflowOutcomeState.NotStarted => "bg-slate-100 text-slate-800",
        EWorkflowOutcomeState.Running => "bg-blue-100 text-blue-800",
        _ => "bg-slate-100 text-slate-800"
    };

    private void ToggleOutcomeDetails(Guid workflowOutcomeId)
    {
        if (expandedWorkflowOutcomeId == workflowOutcomeId)
        {
            expandedWorkflowOutcomeId = null;
        }
        else
        {
            expandedWorkflowOutcomeId = workflowOutcomeId;
        }
    }

    private class ActionOutcomeDto
    {
        public string OutcomeId { get; set; } = "";
        public string ActionId { get; set; } = "";
        public string? OutcomeJson { get; set; }
    }

    private class ExecutionContext
    {
        public string Method { get; set; } = "";
        public Dictionary<string, string> QueryParameters { get; set; } = new();
        public string Body { get; set; } = "";
    }

    private List<ActionOutcomeDto> ParseAndFormatJson(string json)
    {
        try
        {
            return JsonSerializer.Deserialize<List<ActionOutcomeDto>>(json) ?? new List<ActionOutcomeDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to parse JSON");
            return new List<ActionOutcomeDto>();
        }
    }

    private ExecutionContext ParseExecutionContext(string json)
    {
        try
        {
            return JsonSerializer.Deserialize<ExecutionContext>(json) ?? new ExecutionContext();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to parse execution context");
            return new ExecutionContext();
        }
    }

    private string FormatJson(string json)
    {
        try
        {
            using var document = JsonDocument.Parse(json);
            var options = new JsonSerializerOptions { WriteIndented = true };
            return JsonSerializer.Serialize(document, options);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to format JSON");
            return json;
        }
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text;

        return $"{text[..maxLength]}...";
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to copy text to clipboard");
        }
    }
    
    private void SortByStarted()
    {
        if (sortField == "Started")
        {
            // If already sorting by Started, toggle the direction
            sortAscending = !sortAscending;
        }
        else
        {
            // Switch to sorting by Started
            sortField = "Started";
            sortAscending = false; // Default to descending for dates (newest first)
        }
    }
    
    private void SortByEnded()
    {
        if (sortField == "Ended")
        {
            // If already sorting by Ended, toggle the direction
            sortAscending = !sortAscending;
        }
        else
        {
            // Switch to sorting by Ended
            sortField = "Ended";
            sortAscending = false; // Default to descending for dates (newest first)
        }
    }
    
    private List<WorkflowOutcome> GetSortedWorkflowOutcomes()
    {
        if (workflowOutcomes == null || !workflowOutcomes.Any())
            return new List<WorkflowOutcome>();
            
        return sortField switch
        {
            "Started" => sortAscending 
                ? workflowOutcomes.OrderBy(o => o.StartedUtc).ToList() 
                : workflowOutcomes.OrderByDescending(o => o.StartedUtc).ToList(),
                
            "Ended" => sortAscending 
                ? workflowOutcomes.OrderBy(o => o.EndedUtc).ToList() 
                : workflowOutcomes.OrderByDescending(o => o.EndedUtc).ToList(),
                
            // Default case, should never be reached but added for safety
            _ => workflowOutcomes.OrderByDescending(o => o.StartedUtc).ToList()
        };
    }
}