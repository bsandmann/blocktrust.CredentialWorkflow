@page "/logs"
@using Blocktrust.CredentialWorkflow.Core.Commands.WorkflowOutcome.GetWorkflowOutcomes
@using Blocktrust.CredentialWorkflow.Web.Components.Layout
@using Blocktrust.CredentialWorkflow.Web.Services
@using MediatR
@using Microsoft.AspNetCore.Components.Authorization
@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@using Blocktrust.CredentialWorkflow.Core.Domain.Enums
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions
@using Blocktrust.CredentialWorkflow.Core.Domain.Workflow
@using Microsoft.AspNetCore.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMediator Mediator
@inject AppStateService AppStateService
@inject ILogger<ActionOutcome> Logger

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize()]
@layout AppLayout



<PageTitle>Blocktrust Credential Workflow Platform - Logs</PageTitle>

@if (AppStateService.IsInitialized)
{
    <div class="flex flex-col h-screen">
        <!-- Top bar -->
        <div class="bg-gray-100 p-4 flex items-center flex-row border-b-2 border-slate-200">
            <select @bind="selectedWorkflowId" @bind:after="LoadWorkflowOutcomes" class="mr-2 px-2 py-1 border rounded">
                @foreach (var workflow in AppStateService.WorkflowSummaries.OrderByDescending(w => w.UpdatedUtc))
                {
                    <option value="@workflow.WorkflowId">@workflow.Name</option>
                }
            </select>
        </div>

        <!-- Main content area -->
        <div class="flex-grow p-4 overflow-auto">
            @if (workflowOutcomes.Any())
            {
                <table class="min-w-full bg-white">
                    <thead class="bg-gray-100">
                    <tr>
                        <th class="px-4 py-2 text-left">State</th>
                        <th class="px-4 py-2 text-left">Started</th>
                        <th class="px-4 py-2 text-left">Ended</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var workflowOutcome in workflowOutcomes)
                    {
                        <tr @onclick="() => ToggleOutcomeDetails(workflowOutcome.WorkflowOutcomeId)"
                            class="cursor-pointer hover:bg-gray-50 transition-colors duration-150">
                            <td class="border-t px-4 py-2">
                                <span class="@GetOutcomeStateColor(workflowOutcome.WorkflowOutcomeState)">
                                    @workflowOutcome.WorkflowOutcomeState
                                </span>
                            </td>
                            <td class="border-t px-4 py-2">@workflowOutcome.StartedUtc?.ToString("g")</td>
                            <td class="border-t px-4 py-2">@workflowOutcome.EndedUtc?.ToString("g")</td>
                        </tr>
                        @if (expandedWorkflowOutcomeId == workflowOutcome.WorkflowOutcomeId)
                        {
                            <tr>
                                <td colspan="3" class="border-t px-4 py-2 bg-gray-50">
                                    <div class="text-sm">
                                        @if (workflowOutcome.WorkflowOutcomeState == EWorkflowOutcomeState.Success)
                                        {
                                            <p>
                                                <strong>ActionWorkflowOutcome
                                                    JSON:</strong> @(string.IsNullOrEmpty(workflowOutcome.ActionOutcomesJson) ? "N/A" : workflowOutcome.ActionOutcomesJson)
                                            </p>
                                            <p>
                                                <strong>Execution Context
                                                </strong> @(string.IsNullOrEmpty(workflowOutcome.ExecutionContext) ? "N/A" : workflowOutcome.ExecutionContext)
                                            </p>
                                        }
                                        else if (workflowOutcome.WorkflowOutcomeState == EWorkflowOutcomeState.NotStarted)
                                        {
                                            <p>This operation did not start yet.</p>
                                        }
                                        else
                                        {
                                            <p>
                                                <strong>ActionWorkflowOutcome
                                                    JSON:</strong> @(string.IsNullOrEmpty(workflowOutcome.ActionOutcomesJson) ? "N/A" : workflowOutcome.ActionOutcomesJson)
                                            </p>
                                            <p>
                                                <strong>Error
                                                    JSON:</strong> @(string.IsNullOrEmpty(workflowOutcome.ErrorJson) ? "N/A" : workflowOutcome.ErrorJson)
                                            </p>
                                            <p>
                                                <strong>Execution Context
                                                </strong> @(string.IsNullOrEmpty(workflowOutcome.ExecutionContext) ? "N/A" : workflowOutcome.ExecutionContext)
                                            </p>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-gray-600">No outcomes found for the selected workflow.</p>
            }
        </div>
    </div>
}
else
{
    <p class="text-center mt-8">Loading...</p>
}

@code {
    private readonly CancellationTokenSource cts = new CancellationTokenSource();
    private Guid? selectedWorkflowId;
    private List<WorkflowOutcome> workflowOutcomes = new List<WorkflowOutcome>();
    private Guid? expandedWorkflowOutcomeId;

    protected override async Task OnInitializedAsync()
    {
        if (!AppStateService.IsInitialized)
        {
            await AppStateService.Initialize(AuthenticationStateProvider, Logger, cts, Mediator);
        }

        if (AppStateService.WorkflowSummaries.Any())
        {
            selectedWorkflowId = AppStateService.WorkflowSummaries.OrderByDescending(w => w.UpdatedUtc).First().WorkflowId;
            await LoadWorkflowOutcomes();
        }
    }

    private async Task LoadWorkflowOutcomes()
    {
        if (selectedWorkflowId.HasValue)
        {
            var outcomesResult = await Mediator.Send(new GetWorkflowOutcomesRequest(selectedWorkflowId.Value));
            if (outcomesResult.IsFailed)
            {
                Logger.LogError("Failed to fetch outcomes");
                workflowOutcomes.Clear();
            }
            else
            {
                workflowOutcomes = outcomesResult.Value;
            }

            expandedWorkflowOutcomeId = null;
            StateHasChanged();
        }
    }

    private string GetOutcomeStateColor(EWorkflowOutcomeState state) => state switch
    {
        EWorkflowOutcomeState.Success => "text-green-600",
        EWorkflowOutcomeState.FailedWithErrors => "text-red-600",
        EWorkflowOutcomeState.NotStarted => "text-gray-600",
        EWorkflowOutcomeState.Running => "text-blue-600",
        _ => "text-gray-600"
    };

    private void ToggleOutcomeDetails(Guid workflowOutcomeId)
    {
        if (expandedWorkflowOutcomeId == workflowOutcomeId)
        {
            expandedWorkflowOutcomeId = null;
        }
        else
        {
            expandedWorkflowOutcomeId = workflowOutcomeId;
        }
    }

}