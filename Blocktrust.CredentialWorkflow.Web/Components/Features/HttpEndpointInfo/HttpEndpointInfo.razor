@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using Blocktrust.CredentialWorkflow.Web.Services
@using System.Web
@inject NavigationManager NavigationManager
@inject ClipboardService ClipboardService

<div class="w-full bg-white rounded-lg shadow-sm border border-slate-200">
    <div class="flex items-center justify-between p-3 border-b border-slate-200 bg-gray-50">
        <h3 class="text-sm font-medium text-gray-900">HTTP Endpoint Reference</h3>
        <button @onclick="() => isExpanded = !isExpanded" 
                class="text-gray-500 hover:text-gray-700 p-1 hover:bg-gray-100 rounded">
            <span class="material-symbols-outlined text-sm">@(isExpanded ? "expand_less" : "expand_more")</span>
        </button>
    </div>

    @if (isExpanded)
    {
        <div class="p-3 space-y-3">
            @if (showCopiedMessage)
            {
                <div class="bg-green-50 text-green-800 p-2 rounded text-sm">
                    Copied to clipboard!
                </div>
            }

            <!-- Endpoint URL -->
            <div>
                <div class="flex items-center justify-between mb-1">
                    <span class="text-xs font-medium text-gray-700">Endpoint URL</span>
                    <button @onclick="() => CopyToClipboard(FullUrl)"
                            class="p-1 hover:bg-gray-100 rounded"
                            title="Copy URL">
                        <span class="material-symbols-outlined text-gray-500 text-sm">content_copy</span>
                    </button>
                </div>
                <div class="bg-gray-50 p-2 rounded font-mono text-sm text-gray-600 break-all">
                    @DisplayUrl
                </div>
            </div>

            <!-- cURL Command -->
            <div>
                <div class="flex items-center justify-between mb-1">
                    <span class="text-xs font-medium text-gray-700">cURL Command</span>
                    <button @onclick="() => CopyToClipboard(CurlCommand)"
                            class="p-1 hover:bg-gray-100 rounded"
                            title="Copy cURL command">
                        <span class="material-symbols-outlined text-gray-500 text-sm">content_copy</span>
                    </button>
                </div>
                <div class="bg-gray-50 p-2 rounded">
                    <pre class="font-mono text-sm text-gray-600 whitespace-pre-wrap break-all">@CurlCommand</pre>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Guid WorkflowId { get; set; }
    [Parameter] public TriggerInputHttpRequest TriggerInput { get; set; } = null!;

    private bool showCopiedMessage;
    private bool isExpanded = true;
    
    private string FullUrl => $"{NavigationManager.BaseUri.TrimEnd('/')}/api/workflow/{WorkflowId}";
    private string DisplayUrl => FullUrl.Length > 60 ? $"{FullUrl[..57]}..." : FullUrl;

    private string CurlCommand
    {
        get
        {
            var command = $"curl -X {TriggerInput.Method} \"{FullUrl}\"";

            // Add query parameters if GET request
            if (TriggerInput.Method == "GET")
            {
                var queryParams = TriggerInput.Parameters
                    .Where(p => p.Value.Required)
                    .Select(p => $"{p.Key}={HttpUtility.UrlEncode($"example {p.Key}")}");

                if (queryParams.Any())
                {
                    command += $"?{string.Join("&", queryParams)}";
                }
            }

            // Add headers and body for POST/PUT
            if (TriggerInput.Method is "POST" or "PUT")
            {
                command += " \\\n    -H \"Content-Type: application/json\"";

                // Add example body with required parameters
                var exampleBody = TriggerInput.Parameters
                    .Where(p => p.Value.Required)
                    .ToDictionary(
                        p => p.Key,
                        p => $"example {p.Key}"
                    );

                if (exampleBody.Any())
                {
                    var jsonBody = System.Text.Json.JsonSerializer.Serialize(exampleBody, 
                        new System.Text.Json.JsonSerializerOptions { 
                            WriteIndented = true,
                            PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
                        });
                    command += $" \\\n    -d '{jsonBody}'";
                }
            }

            return command;
        }
    }

    private async Task CopyToClipboard(string text)
    {
        await ClipboardService.CopyTextToClipboard(text);
        showCopiedMessage = true;
        await InvokeAsync(async () =>
        {
            await Task.Delay(2000);
            showCopiedMessage = false;
            StateHasChanged();
        });
    }
}