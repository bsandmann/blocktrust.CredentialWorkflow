@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Verification
@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Actions.Verification

<div class="p-4 text-sm">
    <div class="space-y-3">
        <h3 class="font-medium text-gray-700 mb-4">VerifyCredentials Options</h3>

        <div class="flex flex-col space-y-2">
            <div class="flex items-center">
                <input type="checkbox"
                       id="anon-checkSignature"
                       class="rounded border-gray-300 text-slate-600 focus:ring-slate-500"
                       checked="@ActionInput.CheckSignature"
                       @onchange="@(e => UpdateCheckbox(e, "signature"))"/>
                <label for="anon-checkSignature" class="ml-2 text-sm text-gray-700">
                    Verify Signature
                </label>
            </div>

            <div class="flex items-center">
                <input type="checkbox"
                       id="anon-checkStatus"
                       class="rounded border-gray-300 text-slate-600 focus:ring-slate-500"
                       checked="@ActionInput.CheckStatus"
                       @onchange="@(e => UpdateCheckbox(e, "status"))"/>
                <label for="anon-checkStatus" class="ml-2 text-sm text-gray-700">
                    Verify Status (Revocation)
                </label>
            </div>

            <div class="flex items-center">
                <input type="checkbox"
                       id="anon-checkSchema"
                       class="rounded border-gray-300 text-slate-600 focus:ring-slate-500"
                       checked="@ActionInput.CheckSchema"
                       @onchange="@(e => UpdateCheckbox(e, "schema"))"/>
                <label for="anon-checkSchema" class="ml-2 text-sm text-gray-700">
                    Verify Schema
                </label>
            </div>

            <div class="flex items-center">
                <input type="checkbox"
                       id="anon-checkTrustRegistry"
                       class="rounded border-gray-300 text-slate-600 focus:ring-slate-500"
                       checked="@ActionInput.CheckTrustRegistry"
                       @onchange="@(e => UpdateCheckbox(e, "trustRegistry"))"/>
                <label for="anon-checkTrustRegistry" class="ml-2 text-sm text-gray-700">
                    Verify Trust Registry
                </label>
            </div>

            <div class="flex items-center">
                <input type="checkbox"
                       id="anon-checkExpiry"
                       class="rounded border-gray-300 text-slate-600 focus:ring-slate-500"
                       checked="@ActionInput.CheckExpiry"
                       @onchange="@(e => UpdateCheckbox(e, "expiry"))"/>
                <label for="anon-checkExpiry" class="ml-2 text-sm text-gray-700">
                    Verify Expiry
                </label>
            </div>
        </div>

        <div class="mt-4 p-3 bg-blue-50 rounded-md">
            <p class="text-xs text-blue-700">
                For AnonCreds, credential definition and revocation status verification is mandatory when applicable.
            </p>
        </div>
    </div>
</div>

@code {
    [Parameter] public VerifyAnoncredCredential ActionInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }

    protected override void OnInitialized()
    {
        // Ensure defaults are set
        if (!ActionInput.CheckSignature && !ActionInput.CheckStatus &&
            !ActionInput.CheckSchema && !ActionInput.CheckTrustRegistry && !ActionInput.CheckExpiry)
        {
            ActionInput.CheckSignature = true;
            ActionInput.CheckExpiry = true;
            ActionInput.CheckStatus = false;
            ActionInput.CheckSchema = false;
            ActionInput.CheckTrustRegistry = false;
        }
    }

    private async Task UpdateCheckbox(ChangeEventArgs e, string type)
    {
        if (e.Value is bool value)
        {
            switch (type)
            {
                case "signature":
                    ActionInput.CheckSignature = value;
                    break;
                case "status":
                    ActionInput.CheckStatus = value;
                    break;
                case "schema":
                    ActionInput.CheckSchema = value;
                    break;
                case "trustRegistry":
                    ActionInput.CheckTrustRegistry = value;
                    break;
                case "expiry":
                    ActionInput.CheckExpiry = value;
                    break;
            }

            await OnChange.InvokeAsync();
        }
    }

}