@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Actions.Verification
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Verification
@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions
@using Blocktrust.CredentialWorkflow.Core.Domain.Enums
@using System.Text.RegularExpressions
@using Action = Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Action

<div class="p-4 text-sm space-y-4">
    <!-- Verification Checks Section -->
    <div class="bg-white p-4 rounded-lg border border-gray-200">
        <h3 class="font-medium mb-3 text-gray-700">Verify Credential Checks</h3>

        <div class="space-y-3">
            <!-- Check Signature -->
            <div class="flex items-center">
                <input type="checkbox"
                       id="checkSignature"
                       class="rounded border-gray-300 text-slate-600 focus:ring-slate-500"
                       @bind="ActionInput.CheckSignature"
                       @bind:after="OnValueChanged"
                       disabled="disabled"
                />
                <label for="checkSignature" class="ml-2 block text-sm text-gray-700">
                    Verify Signature
                </label>
            </div>

            <!-- Check Expiry -->
            <div class="flex items-center">
                <input type="checkbox"
                       id="checkExpiry"
                       class="rounded border-gray-300 text-slate-600 focus:ring-slate-500"
                       @bind="ActionInput.CheckExpiry"
                       disabled="disabled"
                       @bind:after="OnValueChanged"/>
                <label for="checkExpiry" class="ml-2 block text-sm text-gray-700">
                    Verify Expiry
                </label>
            </div>

            <!-- Check Status -->
            <div class="flex items-center">
                <input type="checkbox"
                       id="checkStatus"
                       class="rounded border-gray-300 text-slate-600 focus:ring-slate-500"
                       checked="checked"
                       disabled="disabled"
                       />
                <label for="checkStatus" class="ml-2 block text-sm text-gray-700">
                    Verify Revocation-Status
                </label>
            </div>

            <!-- Check Schema -->
            <div class="flex items-center">
                <input type="checkbox"
                       id="checkSchema"
                       class="rounded border-gray-300 text-slate-600 focus:ring-slate-500"
                       @bind="ActionInput.CheckSchema"
                       @bind:after="OnValueChanged"
                       disabled="disabled"
                       />
                <label for="checkSchema" class="ml-2 block text-sm text-gray-700">
                    Verify Schema
                </label>
            </div>

            <!-- Check Trust Registry -->
            <div class="flex items-center">
                <input type="checkbox"
                       id="checkTrustRegistry"
                       class="rounded border-gray-300 text-slate-600 focus:ring-slate-500"
                       @bind="ActionInput.CheckTrustRegistry"
                       @bind:after="OnValueChanged"
                       disabled="disabled"
                       />
                <label for="checkTrustRegistry" class="ml-2 block text-sm text-gray-700">
                    Verify Trust Registry
                </label>
            </div>

        </div>
    </div>

    <!-- Credential Source Section -->
    <div class="bg-white p-4 rounded-lg border border-gray-200">
        <h3 class="font-medium mb-3 text-gray-700">Credential Source</h3>
        <div class="flex space-x-2">
            <!-- Select the ParameterSource -->
            <select class="w-1/3 rounded border px-2 py-1 text-xs"
                    @bind="ActionInput.CredentialReference.Source"
                    @bind:after="OnCredentialSourceChanged">
                <option value="@ParameterSource.Static">Static Value</option>
                <option value="@ParameterSource.TriggerInput">From Trigger</option>
                <option value="@ParameterSource.ActionOutcome">From Previous Action</option>
            </select>

            <!-- If Static -->
            @if (ActionInput.CredentialReference.Source == ParameterSource.Static)
            {
                <input type="text"
                       class="w-2/3 rounded border px-2 py-1 text-xs"
                       placeholder="Enter raw JWT credential"
                       @bind="ActionInput.CredentialReference.DefaultValue"
                       @bind:after="OnValueChanged"/>
            }
            else if (ActionInput.CredentialReference.Source == ParameterSource.TriggerInput)
            {
                <div class="w-2/3 flex flex-col space-y-1">
                    @if (TriggerParameters?.Any() == true)
                    {
                        <select class="rounded border px-2 py-1 text-xs"
                                @bind="ActionInput.CredentialReference.Path"
                                @bind:after="OnValueChanged">
                            <option value="">Select trigger parameter</option>
                            @foreach (var param in TriggerParameters)
                            {
                                <option value="@param">@param</option>
                            }
                        </select>
                    }
                    else
                    {
                        <div class="text-xs text-gray-600">
                            No trigger parameters available
                        </div>
                    }
                </div>
            }
            else if (ActionInput.CredentialReference.Source == ParameterSource.ActionOutcome)
            {
                <div class="w-2/3 flex flex-col space-y-2">
                    <select class="rounded border px-2 py-1 text-xs" @onchange="OnActionIdChanged">
                        <option value="">Select an action</option>
                        @if (FlowItems is not null)
                        {
                            @foreach (var item in FlowItems.Where(p => p is Action && ((Action)p).Input.Id != ActionInput.Id))
                            {
                                if (item is Action && (item as Action) is not null)
                                {
                                    var actionItem = item as Action;

                                    <option value="@actionItem.Input.Id.ToString()">
                                        @actionItem.Type.ToString() (@actionItem.Input.Id)
                                    </option>
                                }
                            }
                        }
                    </select>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public VerifyW3cCredential ActionInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }

    // List of all trigger parameters (e.g., from the HTTP request)
    [Parameter] public IEnumerable<string>? TriggerParameters { get; set; }

    // The set of all flow items (so we can list actions for “ActionOutcome” references)
    [Parameter] public IEnumerable<object>? FlowItems { get; set; }

    // Called whenever user changes any bound property
    private async Task OnValueChanged()
    {
        await OnChange.InvokeAsync();
    }

    private async Task OnCredentialSourceChanged()
    {
        // Additional logic if needed. For now, just propagate the change event
        await OnValueChanged();
    }

    private async Task OnActionIdChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var guid))
        {
            ActionInput.CredentialReference.ActionId = guid;
            ActionInput.CredentialReference.Path = String.Empty;
        }
        else
        {
            ActionInput.CredentialReference.ActionId = null;
        }

        await OnValueChanged();
    }

}
