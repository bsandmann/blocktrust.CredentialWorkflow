@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Validation
@using WorkflowAction = Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Action

@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Actions.Validation

<div class="p-4 text-sm">
    <div class="space-y-4">
        <!-- Credential Source Section -->
        <div class="bg-white p-4 rounded-lg border border-gray-200">
            <h3 class="font-medium mb-3 text-gray-700">Credential Source</h3>
            <div class="flex space-x-2">
                <select class="w-1/3 rounded border px-2 py-1 text-xs"
                        @bind="ActionInput.CredentialReference.Source"
                        @bind:after="OnCredentialSourceChanged">
                    <option value="@ParameterSource.Static">Static Value</option>
                    <option value="@ParameterSource.TriggerInput">From Trigger</option>
                    <option value="@ParameterSource.ActionOutcome">From Previous Action</option>
                </select>
                
                @if (ActionInput.CredentialReference.Source == ParameterSource.Static)
                {
                    <input type="text"
                           class="w-2/3 rounded border px-2 py-1 text-xs"
                           placeholder="Enter raw credential"
                           @bind="ActionInput.CredentialReference.DefaultValue"
                           @bind:after="OnValueChanged"/>
                }
                else if (ActionInput.CredentialReference.Source == ParameterSource.TriggerInput)
                {
                    <select class="w-2/3 rounded border px-2 py-1 text-xs"
                            @bind="ActionInput.CredentialReference.Path"
                            @bind:after="OnValueChanged">
                        <option value="">Select trigger parameter</option>
                        @if (TriggerParameters?.Any() == true)
                        {
                            @foreach (var param in TriggerParameters)
                            {
                                <option value="@param">@param</option>
                            }
                        }
                    </select>
                }
                else if (ActionInput.CredentialReference.Source == ParameterSource.ActionOutcome)
                {
                    <select class="w-2/3 rounded border px-2 py-1 text-xs"
                            @bind="ActionInput.CredentialReference.ActionId"
                            @bind:after="OnValueChanged">
                        <option value="">Select previous action</option>
                        @if (FlowItems != null)
                        {
                            @foreach (var item in FlowItems.Where(i => i is WorkflowAction && ((WorkflowAction)i).Input.Id != ActionInput.Id))
                            {
                                if (item is WorkflowAction actionItem)
                                {
                                    <option value="@actionItem.Input.Id">
                                        @actionItem.Type.ToString() (@actionItem.Input.Id)
                                    </option>
                                }
                            }
                        }
                    </select>
                }
            </div>
        </div>

        <!-- Validation Rules Section -->
        <div class="bg-white p-4 rounded-lg border border-gray-200">
            <div class="flex justify-between items-center mb-3">
                <h3 class="font-medium text-gray-700">Validation Rules</h3>
                <button class="bg-slate-700 hover:bg-slate-600 text-white text-xs py-1 px-2 rounded transition-colors duration-200 flex items-center"
                        @onclick="AddValidationRule">
                    <span class="material-symbols-outlined text-sm mr-1">add</span>
                    Add Rule
                </button>
            </div>

            @foreach (var rule in ActionInput.ValidationRules)
            {
                <div class="p-2 border rounded-md mb-2 bg-gray-50">
                    <div class="flex justify-between items-center mb-2">
                        <select class="w-1/3 rounded border px-2 py-1 text-xs bg-white"
                                @bind="rule.Type"
                                @bind:after="OnValueChanged">
                            <option value="Required">Required Field</option>
                            <option value="Format">Format Check</option>
                            <option value="Range">Value Range</option>
                            <option value="Custom">Custom Rule</option>
                        </select>
                        <button class="text-red-500 hover:text-red-700"
                                @onclick="() => RemoveValidationRule(rule)">
                            <span class="material-symbols-outlined text-sm">delete</span>
                        </button>
                    </div>

                    <div class="mt-2">
                        <input type="text" 
                               class="w-full rounded border px-2 py-1 text-xs bg-white"
                               placeholder="Rule Configuration"
                               @bind="rule.Configuration"
                               @bind:after="OnValueChanged"/>
                        <p class="text-xs text-gray-500 mt-1">
                            @GetConfigurationHelp(rule.Type)
                        </p>
                    </div>
                </div>
            }
        </div>

        <!-- Error Handling Section -->
        <div class="bg-white p-4 rounded-lg border border-gray-200">
            <h3 class="font-medium mb-3 text-gray-700">Error Handling</h3>
            <div class="space-y-2">
                <div>
                    <label class="block text-xs font-medium text-gray-700 mb-1">Action on Failure</label>
                    <select class="w-full rounded border px-2 py-1 text-xs"
                            @bind="ActionInput.FailureAction"
                            @bind:after="OnValueChanged">
                        <option value="Stop">Stop Workflow</option>
                        <option value="Continue">Continue with Next Action</option>
                        <option value="Skip">Skip to Specific Action</option>
                    </select>
                </div>
                
                @if (ActionInput.FailureAction == "Skip")
                {
                    <div class="mt-2">
                        <label class="block text-xs font-medium text-gray-700 mb-1">Skip to Action</label>
                        <select class="w-full rounded border px-2 py-1 text-xs"
                                @bind="ActionInput.SkipToActionId"
                                @bind:after="OnValueChanged">
                            <option value="">Select action</option>
                            @if (FlowItems != null)
                            {
@foreach (var item in FlowItems.Where(i => i is WorkflowAction && ((WorkflowAction)i).Input.Id != ActionInput.Id))
                                {
                                    if (item is WorkflowAction actionItem)
                                    {
                                        <option value="@actionItem.Input.Id">
                                            @actionItem.Type.ToString() (@actionItem.Input.Id)
                                        </option>
                                    }
                                }
                            }
                        </select>
                    </div>
                }
                
                <div class="mt-2">
                    <label class="block text-xs font-medium text-gray-700 mb-1">Error Message Template</label>
                    <textarea class="w-full rounded border px-2 py-1 text-xs"
                              placeholder="Enter error message template. Use {{field}} for field name placeholder."
                              @bind="ActionInput.ErrorMessageTemplate"
                              @bind:after="OnValueChanged"
                              rows="3"></textarea>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public W3cValidationAction ActionInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public IEnumerable<string>? TriggerParameters { get; set; }
    [Parameter] public IEnumerable<object>? FlowItems { get; set; }

    private async Task OnValueChanged()
    {
        await OnChange.InvokeAsync();
    }

    private async Task OnCredentialSourceChanged()
    {
        ActionInput.CredentialReference.Path = string.Empty;
        ActionInput.CredentialReference.ActionId = null;
        await OnValueChanged();
    }

    private async Task AddValidationRule()
    {
        ActionInput.ValidationRules.Add(new ValidationRule
        {
            Type = "Required",
            Configuration = string.Empty
        });
        await OnValueChanged();
    }

    private async Task RemoveValidationRule(ValidationRule rule)
    {
        ActionInput.ValidationRules.Remove(rule);
        await OnValueChanged();
    }

    private string GetConfigurationHelp(string ruleType) => ruleType switch
    {
        "Required" => "Enter the field path that must be present (e.g., 'credentialSubject.id')",
        "Format" => "Enter field path and expected format (e.g., 'credentialSubject.dateOfBirth:ISO8601')",
        "Range" => "Enter field path and range (e.g., 'credentialSubject.age:18-65')",
        "Custom" => "Enter custom validation expression",
        _ => string.Empty
    };
}