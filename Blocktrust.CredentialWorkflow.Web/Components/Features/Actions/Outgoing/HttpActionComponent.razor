@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Outgoing
@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions
@using WorkflowAction = Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Action
@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Actions.Outgoing

<div class="p-4 text-sm">
    <div class="space-y-3">
        <!-- HTTP Method -->
        <div class="p-2 border rounded-md">
            <label class="block text-xs font-medium text-gray-700 mb-1">HTTP Method</label>
            <select class="w-full rounded border px-2 py-1 text-xs"
                    @bind="ActionInput.Method"
                    @bind:after="OnValueChanged">
                <option value="GET">GET</option>
                <option value="POST">POST</option>
                <option value="PUT">PUT</option>
                <option value="DELETE">DELETE</option>
                <option value="PATCH">PATCH</option>
            </select>
        </div>

        <!-- Endpoint -->
        <div class="p-2 border rounded-md">
            <label class="block text-xs font-medium text-gray-700 mb-1">Endpoint</label>
            <div class="flex space-x-2">
                <select class="w-1/3 rounded border px-2 py-1 text-xs"
                        @bind="ActionInput.Endpoint.Source"
                        @bind:after="OnValueChanged">
                    <option value="@ParameterSource.Static">Static Value</option>
                    <option value="@ParameterSource.TriggerInput">From Trigger</option>
                    <option value="@ParameterSource.ActionOutcome">From Previous Action</option>
                </select>

                @if (ActionInput.Endpoint.Source == ParameterSource.Static)
                {
                    <input type="text" class="w-2/3 rounded border px-2 py-1 text-xs"
                           @bind="ActionInput.Endpoint.Path"
                           @bind:after="OnValueChanged"
                           placeholder="Enter endpoint URL" />
                }
                else
                {
                    <select class="w-2/3 rounded border px-2 py-1 text-xs"
                            @bind="ActionInput.Endpoint.Path"
                            @bind:after="OnValueChanged">
                        @if (ActionInput.Endpoint.Source == ParameterSource.TriggerInput)
                        {
                            @foreach (var param in TriggerParameters ?? Array.Empty<string>())
                            {
                                <option value="@param">@param</option>
                            }
                        }
                        else if (ActionInput.Endpoint.Source == ParameterSource.ActionOutcome)
                        {
                            <option value="">Select previous action</option>
                            @if (FlowItems != null)
                            {
                                @foreach (var item in FlowItems.Where(i => i is WorkflowAction && ((WorkflowAction)i).Input.Id != ActionInput.Id))
                                {
                                    if (item is WorkflowAction actionItem)
                                    {
                                        <option value="@actionItem.Input.Id">
                                            @actionItem.Type.ToString() (@actionItem.Input.Id)
                                        </option>
                                    }
                                }
                            }
                        }
                        else
                        {
                            <option value="">Select output</option>
                        }
                    </select>
                }
            </div>
        </div>

        <!-- Headers -->
        <div class="p-2 border rounded-md">
            <div class="flex justify-between items-center mb-2">
                <label class="block text-xs font-medium text-gray-700">Headers</label>
                <button class="text-xs bg-slate-700 hover:bg-slate-600 text-white px-2 py-1 rounded transition-colors duration-200"
                        @onclick="AddHeader">
                    Add Header
                </button>
            </div>

            @foreach (var header in ActionInput.Headers)
            {
                <div class="flex items-center space-x-2 mt-2">
                    <input type="text" class="w-1/4 rounded border px-2 py-1 text-xs"
                           value="@header.Key"
                           @onchange="@(e => UpdateHeaderKey(header.Key, e.Value?.ToString() ?? string.Empty))"
                           placeholder="Header name" />

                    <select class="w-1/4 rounded border px-2 py-1 text-xs"
                            @bind="header.Value.Source"
                            @bind:after="OnValueChanged">
                        <option value="@ParameterSource.Static">Static</option>
                        <option value="@ParameterSource.TriggerInput">Trigger Input</option>
                        <option value="@ParameterSource.ActionOutcome">Action Outcome</option>
                    </select>

                    @if (header.Value.Source == ParameterSource.Static)
                    {
                        <input type="text" class="w-1/2 rounded border px-2 py-1 text-xs"
                               @bind="header.Value.Path"
                               @bind:after="OnValueChanged"
                               placeholder="Enter value" />
                    }
                    else
                    {
                        <select class="w-1/2 rounded border px-2 py-1 text-xs"
                                @bind="header.Value.Path"
                                @bind:after="OnValueChanged">
                            @if (header.Value.Source == ParameterSource.TriggerInput)
                            {
                                @foreach (var param in TriggerParameters ?? Array.Empty<string>())
                                {
                                    <option value="@param">@param</option>
                                }
                            }
                            else if (header.Value.Source == ParameterSource.ActionOutcome)
                            {
                                <option value="">Select previous action</option>
                                @if (FlowItems != null)
                                {
                                    @foreach (var item in FlowItems.Where(i => i is WorkflowAction && ((WorkflowAction)i).Input.Id != ActionInput.Id))
                                    {
                                        if (item is WorkflowAction actionItem)
                                        {
                                            <option value="@actionItem.Input.Id">
                                                @actionItem.Type.ToString() (@actionItem.Input.Id)
                                            </option>
                                        }
                                    }
                                }
                            }
                            else
                            {
                                <option value="">Select source</option>
                            }
                        </select>
                    }

                    <button class="text-red-500 hover:text-red-700"
                            @onclick="() => RemoveHeader(header.Key)">
                        <span class="material-symbols-outlined text-sm">delete</span>
                    </button>
                </div>
            }
        </div>

        <!-- Body -->
        @if (ActionInput.Method != "GET" && ActionInput.Method != "DELETE")
        {
            <div class="p-2 border rounded-md">
                <label class="block text-xs font-medium text-gray-700 mb-1">Request Body</label>
                <div class="text-xs text-gray-500 mb-2">
                    Enter request body as text. You can reference parameters using {{paramName}} syntax.
                </div>
                <textarea class="w-full rounded border px-2 py-1 text-xs min-h-[100px]"
                          @bind="RequestBodyText"
                          @bind:after="UpdateBodyFromText"
                          placeholder='{"example": "value", "dynamic": "{{paramName}}"}'></textarea>
            </div>
        }

        <!-- Parameters -->
        <div class="p-2 border rounded-md">
            <div class="flex justify-between items-center mb-2">
                <label class="block text-xs font-medium text-gray-700">Parameters</label>
                <button class="text-xs bg-slate-700 hover:bg-slate-600 text-white px-2 py-1 rounded transition-colors duration-200"
                        @onclick="AddParameter">
                    Add Parameter
                </button>
            </div>
            <div class="text-xs text-gray-500 mb-2">
                Use these parameters in the request body by typing {{paramName}}
            </div>
            @foreach (var param in ActionInput.Parameters)
            {
                <div class="flex items-center space-x-2 mt-2">
                    <input type="text" class="w-1/4 rounded border px-2 py-1 text-xs"
                           value="@param.Key"
                           @onchange="@(e => UpdateParameterKey(param.Key, e.Value?.ToString() ?? string.Empty))"
                           placeholder="Parameter name" />
                    <select class="w-1/4 rounded border px-2 py-1 text-xs"
                            @bind="param.Value.Source"
                            @bind:after="OnValueChanged">
                        <option value="@ParameterSource.Static">Static</option>
                        <option value="@ParameterSource.TriggerInput">Trigger Input</option>
                        <option value="@ParameterSource.ActionOutcome">Action Outcome</option>
                    </select>
                    @if (param.Value.Source == ParameterSource.Static)
                    {
                        <input type="text" class="w-1/2 rounded border px-2 py-1 text-xs"
                               @bind="param.Value.Path"
                               @bind:after="OnValueChanged"
                               placeholder="Enter value" />
                    }
                    else
                    {
                        <select class="w-1/2 rounded border px-2 py-1 text-xs"
                                @bind="param.Value.Path"
                                @bind:after="OnValueChanged">
                            @if (param.Value.Source == ParameterSource.TriggerInput)
                            {
                                @foreach (var triggerParam in TriggerParameters ?? Array.Empty<string>())
                                {
                                    <option value="@triggerParam">@triggerParam</option>
                                }
                            }
                            else if (param.Value.Source == ParameterSource.ActionOutcome)
                            {
                                <option value="">Select previous action</option>
                                @if (FlowItems != null)
                                {
                                    @foreach (var item in FlowItems.Where(i => i is WorkflowAction && ((WorkflowAction)i).Input.Id != ActionInput.Id))
                                    {
                                        if (item is WorkflowAction actionItem)
                                        {
                                            <option value="@actionItem.Input.Id">
                                                @actionItem.Type.ToString() (@actionItem.Input.Id)
                                            </option>
                                        }
                                    }
                                }
                            }
                            else
                            {
                                <option value="">Select source</option>
                            }
                        </select>
                    }
                    <button class="text-red-500 hover:text-red-700"
                            @onclick="() => RemoveParameter(param.Key)">
                        <span class="material-symbols-outlined text-sm">delete</span>
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public HttpAction ActionInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public IEnumerable<string>? TriggerParameters { get; set; }
    [Parameter] public IEnumerable<object>? FlowItems { get; set; }

    private string RequestBodyText { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        // Extract the body content, if an entry called "__body" exists in the Body dictionary
        if (ActionInput.Body.ContainsKey("__body"))
        {
            RequestBodyText = ActionInput.Body["__body"].Path;
        }
    }

    private async Task UpdateBodyFromText()
    {
        // Store the body text in a special key in the Body dictionary
        ActionInput.Body["__body"] = new ParameterReference
        {
            Source = ParameterSource.Static,
            Path = RequestBodyText
        };
        
        await OnChange.InvokeAsync();
    }

    private async Task OnValueChanged()
    {
        await OnChange.InvokeAsync();
    }

    private async Task AddHeader()
    {
        var headerName = $"header{ActionInput.Headers.Count + 1}";
        ActionInput.Headers[headerName] = new ParameterReference
        {
            Source = ParameterSource.Static
        };
        await OnChange.InvokeAsync();
    }

    private async Task UpdateHeaderKey(string oldKey, string newKey)
    {
        if (oldKey != newKey && !string.IsNullOrWhiteSpace(newKey) && !ActionInput.Headers.ContainsKey(newKey))
        {
            var value = ActionInput.Headers[oldKey];
            ActionInput.Headers.Remove(oldKey);
            ActionInput.Headers[newKey] = value;
            await OnChange.InvokeAsync();
        }
    }

    private async Task RemoveHeader(string key)
    {
        ActionInput.Headers.Remove(key);
        await OnChange.InvokeAsync();
    }

    private async Task AddParameter()
    {
        var paramName = $"param{ActionInput.Parameters.Count + 1}";
        ActionInput.Parameters[paramName] = new ParameterReference
        {
            Source = ParameterSource.Static
        };
        await OnChange.InvokeAsync();
    }

    private async Task UpdateParameterKey(string oldKey, string newKey)
    {
        if (oldKey != newKey && !string.IsNullOrWhiteSpace(newKey) && !ActionInput.Parameters.ContainsKey(newKey))
        {
            var value = ActionInput.Parameters[oldKey];
            ActionInput.Parameters.Remove(oldKey);
            ActionInput.Parameters[newKey] = value;
            await OnChange.InvokeAsync();
        }
    }

    private async Task RemoveParameter(string key)
    {
        ActionInput.Parameters.Remove(key);
        await OnChange.InvokeAsync();
    }
}