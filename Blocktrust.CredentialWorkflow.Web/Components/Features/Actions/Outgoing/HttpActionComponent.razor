@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Outgoing
@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Actions

<div class="p-4 text-sm">
    <div class="space-y-3">
        <!-- HTTP Method -->
        <div class="p-2 border rounded-md">
            <label class="block text-xs font-medium text-gray-700 mb-1">HTTP Method</label>
            <select class="w-full rounded border px-2 py-1 text-xs"
                    @bind="ActionInput.Method"
                    @bind:after="OnValueChanged">
                <option value="GET">GET</option>
                <option value="POST">POST</option>
                <option value="PUT">PUT</option>
                <option value="DELETE">DELETE</option>
                <option value="PATCH">PATCH</option>
            </select>
        </div>

        <!-- Endpoint -->
        <div class="p-2 border rounded-md">
            <label class="block text-xs font-medium text-gray-700 mb-1">Endpoint</label>
            <div class="flex space-x-2">
                <select class="w-1/3 rounded border px-2 py-1 text-xs"
                        @bind="ActionInput.Endpoint.Source"
                        @bind:after="OnValueChanged">
                    <option value="@ParameterSource.Static">Static Value</option>
                    <option value="@ParameterSource.TriggerInput">From Trigger</option>
                    <option value="@ParameterSource.ActionOutcome">From Previous Action</option>
                </select>

                @if (ActionInput.Endpoint.Source == ParameterSource.Static)
                {
                    <input type="text" class="w-2/3 rounded border px-2 py-1 text-xs"
                           @bind="ActionInput.Endpoint.Path"
                           @bind:after="OnValueChanged"
                           placeholder="Enter endpoint URL" />
                }
                else
                {
                    <ParameterSourceSelect Source="ActionInput.Endpoint.Source"
                                         Path="ActionInput.Endpoint.Path"
                                         TriggerParameters="TriggerParameters"
                                         OnChange="OnValueChanged"/>
                }
            </div>
        </div>

        <!-- Headers -->
        <div class="p-2 border rounded-md">
            <div class="flex justify-between items-center mb-2">
                <label class="block text-xs font-medium text-gray-700">Headers</label>
                <button class="text-xs bg-slate-700 hover:bg-slate-600 text-white px-2 py-1 rounded transition-colors duration-200"
                        @onclick="AddHeader">
                    Add Header
                </button>
            </div>

            @foreach (var header in ActionInput.Headers)
            {
                <div class="flex items-center space-x-2 mt-2">
                    <input type="text" class="w-1/4 rounded border px-2 py-1 text-xs"
                           value="@header.Key"
                           @onchange="@(e => UpdateHeaderKey(header.Key, e.Value?.ToString() ?? string.Empty))"
                           placeholder="Header name" />

                    <select class="w-1/4 rounded border px-2 py-1 text-xs"
                            @bind="header.Value.Source">
                        <option value="@ParameterSource.Static">Static</option>
                        <option value="@ParameterSource.TriggerInput">Trigger Input</option>
                        <option value="@ParameterSource.ActionOutcome">Action Outcome</option>
                    </select>

                    <ParameterSourceSelect Source="header.Value.Source"
                                         Path="header.Value.Path"
                                         TriggerParameters="TriggerParameters"
                                         OnChange="OnValueChanged"
                                         Class="w-1/2"/>

                    <button class="text-red-500 hover:text-red-700"
                            @onclick="() => RemoveHeader(header.Key)">
                        <span class="material-symbols-outlined text-sm">delete</span>
                    </button>
                </div>
            }
        </div>

        <!-- Body -->
        @if (ActionInput.Method != "GET" && ActionInput.Method != "DELETE")
        {
            <div class="p-2 border rounded-md">
                <div class="flex justify-between items-center mb-2">
                    <label class="block text-xs font-medium text-gray-700">Request Body</label>
                    <button class="text-xs bg-slate-700 hover:bg-slate-600 text-white px-2 py-1 rounded transition-colors duration-200"
                            @onclick="AddBodyField">
                        Add Field
                    </button>
                </div>

                @foreach (var field in ActionInput.Body)
                {
                    <div class="flex items-center space-x-2 mt-2">
                        <input type="text" class="w-1/4 rounded border px-2 py-1 text-xs"
                               value="@field.Key"
                               @onchange="@(e => UpdateBodyFieldKey(field.Key, e.Value?.ToString() ?? string.Empty))"
                               placeholder="Field name" />

                        <select class="w-1/4 rounded border px-2 py-1 text-xs"
                                @bind="field.Value.Source">
                            <option value="@ParameterSource.Static">Static</option>
                            <option value="@ParameterSource.TriggerInput">Trigger Input</option>
                            <option value="@ParameterSource.ActionOutcome">Action Outcome</option>
                        </select>

                        <ParameterSourceSelect Source="field.Value.Source"
                                             Path="field.Value.Path"
                                             TriggerParameters="TriggerParameters"
                                             OnChange="OnValueChanged"
                                             Class="w-1/2"/>

                        <button class="text-red-500 hover:text-red-700"
                                @onclick="() => RemoveBodyField(field.Key)">
                            <span class="material-symbols-outlined text-sm">delete</span>
                        </button>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public HttpAction ActionInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public IEnumerable<string>? TriggerParameters { get; set; }

    private async Task OnValueChanged()
    {
        await OnChange.InvokeAsync();
    }

    private async Task AddHeader()
    {
        var headerName = $"header{ActionInput.Headers.Count + 1}";
        ActionInput.Headers[headerName] = new ParameterReference
        {
            Source = ParameterSource.Static
        };
        await OnChange.InvokeAsync();
    }

    private async Task UpdateHeaderKey(string oldKey, string newKey)
    {
        if (oldKey != newKey && !string.IsNullOrWhiteSpace(newKey))
        {
            var value = ActionInput.Headers[oldKey];
            ActionInput.Headers.Remove(oldKey);
            ActionInput.Headers[newKey] = value;
            await OnChange.InvokeAsync();
        }
    }

    private async Task RemoveHeader(string key)
    {
        ActionInput.Headers.Remove(key);
        await OnChange.InvokeAsync();
    }

    private async Task AddBodyField()
    {
        var fieldName = $"field{ActionInput.Body.Count + 1}";
        ActionInput.Body[fieldName] = new ParameterReference
        {
            Source = ParameterSource.Static
        };
        await OnChange.InvokeAsync();
    }

    private async Task UpdateBodyFieldKey(string oldKey, string newKey)
    {
        if (oldKey != newKey && !string.IsNullOrWhiteSpace(newKey))
        {
            var value = ActionInput.Body[oldKey];
            ActionInput.Body.Remove(oldKey);
            ActionInput.Body[newKey] = value;
            await OnChange.InvokeAsync();
        }
    }

    private async Task RemoveBodyField(string key)
    {
        ActionInput.Body.Remove(key);
        await OnChange.InvokeAsync();
    }
}