@* @using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions *@
@* *@
@* <div> *@
@*     <div class="mb-4"> *@
@*         <label class="block text-sm font-medium text-gray-700">Method</label> *@
@*         <input type="text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" *@
@*                @bind-value="ActionInput.Method" *@
@*                @bind-value:event="oninput" *@
@*                @onchange="@(async () => await OnChange.InvokeAsync())"/> *@
@*     </div> *@
@*     <div class="mb-4"> *@
@*         <label class="block text-sm font-medium text-gray-700">URI</label> *@
@*         <input type="text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" *@
@*                @bind-value="ActionInput.Uri" *@
@*                @bind-value:event="oninput" *@
@*                @onchange="@(async () => await OnChange.InvokeAsync())"/> *@
@*     </div> *@
@*     <div class="mb-4"> *@
@*         <label class="block text-sm font-medium text-gray-700">Body</label> *@
@*         <textarea class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" *@
@*                   @bind-value="ActionInput.Body" *@
@*   @bind-value:event="oninput" *@
@*   @onchange="@(async () => await OnChange.InvokeAsync())" *@
@*         > *@
@* </textarea> *@
@*     </div> *@
@*     <div class="mb-4"> *@
@*         <label class="block text-sm font-medium text-gray-700">Headers</label> *@
@*         @foreach (var header in ActionInput.Headers) *@
@*         { *@
@*             <div class="flex mt-2"> *@
@*                 <input type="text" class="w-1/2 rounded-l-md border-gray-300 shadow-sm" *@
@*                        value="@header.Key" *@
@*                        @onchange="@(e => UpdateHeaderKey(header.Key, e.Value.ToString()))"/> *@
@*                 <input type="text" class="w-1/2 rounded-r-md border-gray-300 shadow-sm" *@
@*                        value="@header.Value" *@
@*                        @onchange="@(e => UpdateHeaderValue(header.Key, e.Value.ToString()))"/> *@
@*                 <button class="ml-2 px-2 py-1 bg-red-500 text-white rounded" *@
@*                         @onclick="() => RemoveHeader(header.Key)"> *@
@*                     <span class="material-symbols-outlined text-sm">delete</span> *@
@*                 </button> *@
@*             </div> *@
@*         } *@
@*         <div class="flex mt-2"> *@
@*             <input type="text" placeholder="New Header Key" class="w-1/2 rounded-l-md border-gray-300 shadow-sm" *@
@*                    @bind="newHeaderKey"/> *@
@*             <input type="text" placeholder="New Header Value" class="w-1/2 rounded-r-md border-gray-300 shadow-sm" *@
@*                    @bind="newHeaderValue"/> *@
@*             <button class="ml-2 px-2 py-1 bg-green-500 text-white rounded" *@
@*                     @onclick="AddHeader"> *@
@*                 <span class="material-symbols-outlined text-sm">add</span> *@
@*             </button> *@
@*         </div> *@
@*     </div> *@
@* </div> *@
@* *@
@* @code { *@
@*     [Parameter] public OutgoingDIDComm ActionInput { get; set; } = null!; *@
@*     [Parameter] public EventCallback OnChange { get; set; } *@
@* *@
@*     private string newHeaderKey = string.Empty; *@
@*     private string newHeaderValue = string.Empty; *@
@* *@
@*     private async Task UpdateHeaderKey(string oldKey, string newKey) *@
@*     { *@
@*         if (oldKey != newKey && !string.IsNullOrWhiteSpace(newKey) && !ActionInput.Headers.ContainsKey(newKey)) *@
@*         { *@
@*             var value = ActionInput.Headers[oldKey]; *@
@*             ActionInput.Headers.Remove(oldKey); *@
@*             ActionInput.Headers[newKey] = value; *@
@*             await OnChange.InvokeAsync(); *@
@*             StateHasChanged(); *@
@*         } *@
@*     } *@
@* *@
@*     private async Task UpdateHeaderValue(string key, string newValue) *@
@*     { *@
@*         ActionInput.Headers[key] = newValue; *@
@*         await OnChange.InvokeAsync(); *@
@*         StateHasChanged(); *@
@*     } *@
@* *@
@*     private async Task RemoveHeader(string key) *@
@*     { *@
@*         ActionInput.Headers.Remove(key); *@
@*         await OnChange.InvokeAsync(); *@
@*         StateHasChanged(); *@
@*     } *@
@* *@
@*     private async Task AddHeader() *@
@*     { *@
@*         if (!string.IsNullOrWhiteSpace(newHeaderKey) && !ActionInput.Headers.ContainsKey(newHeaderKey)) *@
@*         { *@
@*             ActionInput.Headers[newHeaderKey] = newHeaderValue; *@
@*             newHeaderKey = string.Empty; *@
@*             newHeaderValue = string.Empty; *@
@*             await OnChange.InvokeAsync(); *@
@*             StateHasChanged(); *@
@*         } *@
@*     } *@
@* *@
@* } *@