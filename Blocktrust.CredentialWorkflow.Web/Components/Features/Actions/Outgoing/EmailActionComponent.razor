@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Outgoing
@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Actions.Outgoing

<div class="p-4 text-sm">
    <div class="space-y-3">
        <!-- Email To -->
        <div class="p-2 border rounded-md">
            <label class="block text-xs font-medium text-gray-700 mb-1">To Email</label>
            <div class="flex space-x-2">
                <select class="w-1/3 rounded border px-2 py-1 text-xs"
                        @bind="ActionInput.To.Source"
                        @bind:after="OnValueChanged">
                    <option value="@ParameterSource.Static">Static Value</option>
                    <option value="@ParameterSource.TriggerInput">From Trigger</option>
                    <option value="@ParameterSource.ActionOutcome">From Previous Action</option>
                </select>
                @if (ActionInput.To.Source == ParameterSource.Static)
                {
                    <input type="email" class="w-2/3 rounded border px-2 py-1 text-xs"
                           @bind="ActionInput.To.Path"
                           @bind:after="OnValueChanged"
                           placeholder="Enter email address" />
                }
                else
                {
                    <select class="w-2/3 rounded border px-2 py-1 text-xs"
                            @bind="ActionInput.To.Path"
                            @bind:after="OnValueChanged">
                        @if (ActionInput.To.Source == ParameterSource.TriggerInput)
                        {
                            @foreach (var param in TriggerParameters ?? Array.Empty<string>())
                            {
                                <option value="@param">@param</option>
                            }
                        }
                        else
                        {
                            <option value="">Select output</option>
                        }
                    </select>
                }
            </div>
        </div>

        <!-- Subject -->
        <div class="p-2 border rounded-md">
            <label class="block text-xs font-medium text-gray-700 mb-1">Subject</label>
            <input type="text" class="w-full rounded border px-2 py-1 text-xs"
                   @bind="ActionInput.Subject"
                   @bind:after="OnValueChanged"
                   placeholder="Enter email subject (use {{paramName}} for parameters)" />
        </div>

        <!-- Body -->
        <div class="p-2 border rounded-md">
            <label class="block text-xs font-medium text-gray-700 mb-1">Email Body</label>
            <textarea class="w-full rounded border px-2 py-1 text-xs min-h-[100px]"
                      @bind="ActionInput.Body"
                      @bind:after="OnValueChanged"
                      placeholder="Enter email body (use {{paramName}} for parameters)"></textarea>
        </div>

        <!-- Parameters -->
        <div class="p-2 border rounded-md">
            <div class="flex justify-between items-center mb-2">
                <label class="block text-xs font-medium text-gray-700">Parameters</label>
                <button class="text-xs bg-slate-700 hover:bg-slate-600 text-white px-2 py-1 rounded transition-colors duration-200"
                        @onclick="AddParameter">
                    Add Parameter
                </button>
            </div>
            <div class="text-xs text-gray-500 mb-2">
                Use these parameters in subject and body by typing [parameterName]
            </div>
            @foreach (var param in ActionInput.Parameters)
            {
                <div class="flex items-center space-x-2 mt-2">
                    <input type="text" class="w-1/4 rounded border px-2 py-1 text-xs"
                           value="@param.Key"
                           @onchange="@(e => UpdateParameterKey(param.Key, e.Value?.ToString() ?? string.Empty))"
                           placeholder="Parameter name" />
                    <select class="w-1/4 rounded border px-2 py-1 text-xs"
                            @bind="param.Value.Source">
                        <option value="@ParameterSource.Static">Static</option>
                        <option value="@ParameterSource.TriggerInput">Trigger Input</option>
                        <option value="@ParameterSource.ActionOutcome">Action Outcome</option>
                    </select>
                    @if (param.Value.Source == ParameterSource.Static)
                    {
                        <input type="text" class="w-1/2 rounded border px-2 py-1 text-xs"
                               @bind="param.Value.Path"
                               @bind:after="OnValueChanged"
                               placeholder="Enter value" />
                    }
                    else
                    {
                        <select class="w-1/2 rounded border px-2 py-1 text-xs"
                                @bind="param.Value.Path"
                                @bind:after="OnValueChanged">
                            @if (param.Value.Source == ParameterSource.TriggerInput)
                            {
                                @foreach (var triggerParam in TriggerParameters ?? Array.Empty<string>())
                                {
                                    <option value="@triggerParam">@triggerParam</option>
                                }
                            }
                            else
                            {
                                <option value="">Select source</option>
                            }
                        </select>
                    }
                    <button class="text-red-500 hover:text-red-700"
                            @onclick="() => RemoveParameter(param.Key)">
                        <span class="material-symbols-outlined text-sm">delete</span>
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public EmailAction ActionInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public IEnumerable<string>? TriggerParameters { get; set; }

    private async Task OnValueChanged()
    {
        await OnChange.InvokeAsync();
    }

    private async Task AddParameter()
    {
        var paramName = $"param{ActionInput.Parameters.Count + 1}";
        ActionInput.Parameters[paramName] = new ParameterReference
        {
            Source = ParameterSource.Static
        };
        await OnChange.InvokeAsync();
    }

    private async Task UpdateParameterKey(string oldKey, string newKey)
    {
        if (oldKey != newKey && !string.IsNullOrWhiteSpace(newKey) && !ActionInput.Parameters.ContainsKey(newKey))
        {
            var value = ActionInput.Parameters[oldKey];
            ActionInput.Parameters.Remove(oldKey);
            ActionInput.Parameters[newKey] = value;
            await OnChange.InvokeAsync();
        }
    }

    private async Task RemoveParameter(string key)
    {
        ActionInput.Parameters.Remove(key);
        await OnChange.InvokeAsync();
    }
}