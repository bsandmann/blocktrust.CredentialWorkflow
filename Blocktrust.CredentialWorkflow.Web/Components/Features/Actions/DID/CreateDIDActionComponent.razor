@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.DID
@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Actions.DID

<div class="p-4 text-sm">
    <!-- DID Registrar Section -->
    <div class="bg-white rounded-lg border border-gray-200 p-3 mb-3">
        <h3 class="font-medium text-gray-700 mb-2">DID Registrar</h3>
        
        <div class="mb-3">
            <div class="flex items-center">
                <input type="radio" id="useTenantRegistrar" 
                       name="registrarSource" 
                       checked="@ActionInput.UseTenantRegistrar"
                       @onchange="() => SetRegistrarSource(true)"
                       class="mr-2"/>
                <label for="useTenantRegistrar" class="text-xs">Use from tenant settings</label>
            </div>
            <div class="flex items-center mt-1">
                <input type="radio" id="useCustomRegistrar" 
                       name="registrarSource" 
                       checked="@(!ActionInput.UseTenantRegistrar)"
                       @onchange="() => SetRegistrarSource(false)"
                       class="mr-2"/>
                <label for="useCustomRegistrar" class="text-xs">Configure custom registrar</label>
            </div>
        </div>
        
        @if (!ActionInput.UseTenantRegistrar)
        {
            <div class="space-y-3">
                <!-- Registrar URL -->
                <div class="space-y-3">
                    <!-- Registrar URL -->
                    <div class="p-2 border rounded-md">
                        <ParameterSelector 
                            Label="OPN Registrar URL"
                            Parameter="ActionInput.RegistrarUrl"
                            OnChange="() => OnValueChanged()"
                            Placeholder="Enter registrar URL"
                            TriggerParameters="TriggerParameters" />
                    </div>
                    
                    <!-- Wallet ID -->
                    <div class="p-2 border rounded-md">
                        <ParameterSelector 
                            Label="Wallet ID"
                            Parameter="ActionInput.WalletId"
                            OnChange="() => OnValueChanged()"
                            Placeholder="Enter wallet ID"
                            TriggerParameters="TriggerParameters" />
                    </div>
                </div>
            </div>
        }
    </div>
    
    <!-- Verification Methods Section -->
    <div class="bg-white rounded-lg border border-gray-200 p-3 mb-3">
        <div class="flex justify-between items-center mb-2">
            <h3 class="font-medium text-gray-700">Verification Methods</h3>
            <button 
                @onclick="AddVerificationMethod" 
                class="bg-slate-700 hover:bg-slate-600 text-white px-2 py-1 rounded text-xs flex items-center">
                <span class="material-symbols-outlined text-sm mr-1">add</span>
                Add Method
            </button>
        </div>

        @if (ActionInput.VerificationMethods.Count == 0)
        {
            <div class="text-red-500 text-xs mb-2">At least one verification method is required</div>
        }

        <div class="space-y-2">
            @for (int i = 0; i < ActionInput.VerificationMethods.Count; i++)
            {
                var index = i;
                var method = ActionInput.VerificationMethods[i];
                
                <div class="border border-gray-200 rounded p-2 bg-gray-50">
                    <div class="flex justify-between items-center mb-2">
                        <span class="text-xs font-medium text-gray-700">Method @(i + 1)</span>
                        
                        @if (ActionInput.VerificationMethods.Count > 1)
                        {
                            <button 
                                @onclick="() => RemoveVerificationMethod(index)"
                                class="text-red-500 hover:text-red-700">
                                <span class="material-symbols-outlined text-xs">delete</span>
                            </button>
                        }
                    </div>
                    
                    <div class="space-y-3">
                        <!-- Key ID -->
                        <ParameterSelector 
                            Label="Key ID"
                            Parameter="method.KeyId"
                            OnChange="() => OnValueChanged()"
                            OnInputValidation="(value) => ValidateKeyId(index, value)"
                            ValidationError="@_keyIdErrors[index]"
                            Placeholder="key-1"
                            TriggerParameters="TriggerParameters" />
                        
                        <!-- Purpose -->
                        <ParameterSelector 
                            Label="Purpose"
                            Parameter="method.Purpose"
                            OnChange="(p) => UpdatePurpose(index, p)"
                            TriggerParameters="TriggerParameters"
                            IsDropdown="true"
                            Options="@_purposeOptions" />
                        
                        <!-- Curve -->
                        <ParameterSelector 
                            Label="Curve"
                            Parameter="method.Curve"
                            OnChange="() => OnValueChanged()"
                            TriggerParameters="TriggerParameters"
                            IsDropdown="true"
                            Options="@_curveOptions"
                            DisabledValue="@(GetDisabledCurveValue(method))" />
                    </div>
                </div>
            }
        </div>
    </div>
    
    <!-- Services Section -->
    <div class="bg-white rounded-lg border border-gray-200 p-3 mb-3">
        <div class="flex justify-between items-center mb-2">
            <h3 class="font-medium text-gray-700">Services</h3>
            <button 
                @onclick="AddService" 
                class="bg-slate-700 hover:bg-slate-600 text-white px-2 py-1 rounded text-xs flex items-center">
                <span class="material-symbols-outlined text-sm mr-1">add</span>
                Add Service
            </button>
        </div>

        @if (ActionInput.Services.Count == 0)
        {
            <div class="text-xs text-gray-500 mb-2">No services added. Services are optional.</div>
        }

        <div class="space-y-2">
            @for (int i = 0; i < ActionInput.Services.Count; i++)
            {
                var index = i;
                var service = ActionInput.Services[i];
                
                <div class="border border-gray-200 rounded p-2 bg-gray-50">
                    <div class="flex justify-between items-center mb-2">
                        <span class="text-xs font-medium text-gray-700">Service @(i + 1)</span>
                        
                        <button 
                            @onclick="() => RemoveService(index)"
                            class="text-red-500 hover:text-red-700">
                            <span class="material-symbols-outlined text-xs">delete</span>
                        </button>
                    </div>
                    
                    <div class="space-y-3">
                        <!-- Service ID -->
                        <ParameterSelector 
                            Label="Service ID"
                            Parameter="service.ServiceId"
                            OnChange="() => OnValueChanged()"
                            OnInputValidation="(value) => ValidateServiceId(index, value)"
                            ValidationError="@_serviceIdErrors[index]"
                            Placeholder="service-1"
                            TriggerParameters="TriggerParameters" />
                        
                        <!-- Type -->
                        <ParameterSelector 
                            Label="Type"
                            Parameter="service.Type"
                            OnChange="() => OnValueChanged()"
                            OnInputValidation="(value) => ValidateServiceType(index, value)"
                            ValidationError="@_serviceTypeErrors[index]"
                            Placeholder="Custom service type"
                            TriggerParameters="TriggerParameters"
                            CanSwitchToCustomValue="true"
                            IsCustomValue="@_isCustomServiceType[index]"
                            OnCustomValueToggle="(isCustom) => ToggleCustomServiceType(index, isCustom)"
                            IsDropdown="!_isCustomServiceType[index]"
                            Options="@_serviceTypeOptions" />
                        
                        <!-- Endpoint -->
                        <ParameterSelector 
                            Label="Endpoint"
                            Parameter="service.Endpoint"
                            OnChange="() => OnValueChanged()"
                            Placeholder="https://example.com"
                            TriggerParameters="TriggerParameters" />
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public CreateDIDAction ActionInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public IEnumerable<string>? TriggerParameters { get; set; }
    
    private List<string> _keyIdErrors = new List<string>();
    
    private List<string> _purposeOptions = new List<string>
    {
        "Authentication",
        "KeyAgreement",
        "AssertionMethod",
        "CapabilityInvocation",
        "CapabilityDelegation"
    };
    
    private List<string> _curveOptions = new List<string>
    {
        "Secp256k1",
        "Ed25519",
        "X25519"
    };
    
    private List<string> _serviceTypeOptions = new List<string>
    {
        "LinkedDomain",
        "DIDCommMessaging",
        "CredentialRegistry",
        "OID4VCI",
        "OID4VP"
    };
    
    private List<bool> _isCustomServiceType = new List<bool>();
    private List<string> _serviceIdErrors = new List<string>();
    private List<string> _serviceTypeErrors = new List<string>();
    
    protected override void OnInitialized()
    {
        // Ensure we have at least one verification method
        if (ActionInput.VerificationMethods.Count == 0)
        {
            AddDefaultVerificationMethod();
        }
        
        // Initialize error tracking array for verification methods
        _keyIdErrors = new List<string>(new string[ActionInput.VerificationMethods.Count]);
        
        // Initialize error tracking arrays for services
        _serviceIdErrors = new List<string>(new string[ActionInput.Services.Count]);
        _serviceTypeErrors = new List<string>(new string[ActionInput.Services.Count]);
        
        // Initialize custom service type flags
        _isCustomServiceType = new List<bool>(new bool[ActionInput.Services.Count]);
        
        // Check if any service has a custom type
        for (int i = 0; i < ActionInput.Services.Count; i++)
        {
            bool isCustom = ActionInput.Services[i].Type.Source == ParameterSource.Static && 
                           !_serviceTypeOptions.Contains(ActionInput.Services[i].Type.DefaultValue);
            _isCustomServiceType.Add(isCustom);
        }
    }
    
    private void AddDefaultVerificationMethod()
    {
        ActionInput.VerificationMethods.Add(new VerificationMethod
        {
            KeyId = new ParameterReference 
            { 
                Source = ParameterSource.Static, 
                DefaultValue = $"key-{ActionInput.VerificationMethods.Count + 1}" 
            },
            Purpose = new ParameterReference 
            { 
                Source = ParameterSource.Static, 
                DefaultValue = "Authentication" 
            },
            Curve = new ParameterReference 
            { 
                Source = ParameterSource.Static, 
                DefaultValue = "Secp256k1" 
            }
        });
        
        _keyIdErrors.Add(string.Empty);
        StateHasChanged();
    }
    
    private void AddVerificationMethod()
    {
        ActionInput.VerificationMethods.Add(new VerificationMethod
        {
            KeyId = new ParameterReference 
            { 
                Source = ParameterSource.Static, 
                DefaultValue = $"key-{ActionInput.VerificationMethods.Count + 1}" 
            },
            Purpose = new ParameterReference 
            { 
                Source = ParameterSource.Static, 
                DefaultValue = "Authentication" 
            },
            Curve = new ParameterReference 
            { 
                Source = ParameterSource.Static, 
                DefaultValue = "Secp256k1" 
            }
        });
        
        _keyIdErrors.Add(string.Empty);
        StateHasChanged();
        OnChange.InvokeAsync();
    }
    
    private void RemoveVerificationMethod(int index)
    {
        if (ActionInput.VerificationMethods.Count > 1)
        {
            ActionInput.VerificationMethods.RemoveAt(index);
            _keyIdErrors.RemoveAt(index);
            StateHasChanged();
            OnChange.InvokeAsync();
        }
    }
    
    private async Task UpdatePurpose(int index, ParameterReference parameter)
    {
        var method = ActionInput.VerificationMethods[index];
        
        // If it's a static value and it's KeyAgreement, set curve to X25519
        if (parameter.Source == ParameterSource.Static && 
            parameter.DefaultValue == "KeyAgreement" && 
            method.Curve.Source == ParameterSource.Static)
        {
            method.Curve.DefaultValue = "X25519";
        }
        // If we're changing from KeyAgreement and the curve is X25519, change it to Secp256k1
        else if (parameter.Source == ParameterSource.Static && 
                 parameter.DefaultValue != "KeyAgreement" && 
                 method.Curve.Source == ParameterSource.Static && 
                 method.Curve.DefaultValue == "X25519")
        {
            method.Curve.DefaultValue = "Secp256k1";
        }
        
        StateHasChanged();
        await OnChange.InvokeAsync();
    }
    
    private string? GetDisabledCurveValue(VerificationMethod method)
    {
        // Only enforce X25519 for KeyAgreement when both are static values
        if (method.Purpose.Source == ParameterSource.Static && 
            method.Purpose.DefaultValue == "KeyAgreement")
        {
            return method.Curve.DefaultValue == "X25519" ? null : "X25519";
        }
        
        return method.Purpose.Source == ParameterSource.Static && 
               method.Purpose.DefaultValue != "KeyAgreement" ? "X25519" : null;
    }
    
    private void ValidateKeyId(int index, string? value)
    {
        if (string.IsNullOrEmpty(value))
        {
            _keyIdErrors[index] = "Key ID is required";
        }
        else if (!IsValidKeyId(value))
        {
            _keyIdErrors[index] = "Key ID can only contain ASCII letters, numbers, and dashes";
        }
        else
        {
            _keyIdErrors[index] = string.Empty;
        }
        
        StateHasChanged();
    }
    
    private bool IsValidKeyId(string value)
    {
        // ASCII letters, numbers, and dashes only
        return System.Text.RegularExpressions.Regex.IsMatch(value, "^[a-zA-Z0-9-]+$");
    }
    
    // Service methods
    private async Task AddService()
    {
        var newService = new ServiceEndpoint
        {
            ServiceId = new ParameterReference 
            { 
                Source = ParameterSource.Static, 
                DefaultValue = $"service-{ActionInput.Services.Count + 1}" 
            },
            Type = new ParameterReference 
            { 
                Source = ParameterSource.Static, 
                DefaultValue = "LinkedDomain" 
            },
            Endpoint = new ParameterReference 
            { 
                Source = ParameterSource.Static, 
                DefaultValue = "" 
            }
        };
        
        ActionInput.Services.Add(newService);
        _serviceIdErrors.Add(string.Empty);
        _serviceTypeErrors.Add(string.Empty);
        _isCustomServiceType.Add(false);
        
        StateHasChanged();
        await OnChange.InvokeAsync();
    }
    
    private async Task RemoveService(int index)
    {
        ActionInput.Services.RemoveAt(index);
        _serviceIdErrors.RemoveAt(index);
        _serviceTypeErrors.RemoveAt(index);
        _isCustomServiceType.RemoveAt(index);
        
        // Update remaining service IDs to be sequential if they're static values
        for (int i = 0; i < ActionInput.Services.Count; i++)
        {
            var service = ActionInput.Services[i];
            if (service.ServiceId.Source == ParameterSource.Static && 
                service.ServiceId.DefaultValue != null &&
                service.ServiceId.DefaultValue.StartsWith("service-") && 
                int.TryParse(service.ServiceId.DefaultValue.Substring(8), out _))
            {
                service.ServiceId.DefaultValue = $"service-{i + 1}";
            }
        }
        
        StateHasChanged();
        await OnChange.InvokeAsync();
    }
    
    private async Task ToggleCustomServiceType(int index, bool isCustom)
    {
        _isCustomServiceType[index] = isCustom;
        
        // If switching from custom to predefined and it's a static value, set to the first predefined type
        if (!isCustom && 
            ActionInput.Services[index].Type.Source == ParameterSource.Static &&
            !_serviceTypeOptions.Contains(ActionInput.Services[index].Type.DefaultValue))
        {
            ActionInput.Services[index].Type.DefaultValue = _serviceTypeOptions[0];
            await OnChange.InvokeAsync();
        }
        
        StateHasChanged();
    }
    
    private void ValidateServiceId(int index, string? value)
    {
        if (string.IsNullOrEmpty(value))
        {
            _serviceIdErrors[index] = "Service ID is required";
        }
        else if (!IsValidKeyId(value))
        {
            _serviceIdErrors[index] = "Service ID can only contain ASCII letters, numbers, and dashes";
        }
        else
        {
            _serviceIdErrors[index] = string.Empty;
        }
        
        StateHasChanged();
    }
    
    private void ValidateServiceType(int index, string? value)
    {
        if (string.IsNullOrEmpty(value))
        {
            _serviceTypeErrors[index] = "Service Type is required";
        }
        else
        {
            _serviceTypeErrors[index] = string.Empty;
        }
        
        StateHasChanged();
    }
    
    // DID Registrar methods
    private async Task OnValueChanged()
    {
        await OnChange.InvokeAsync();
    }
    
    private async Task SetRegistrarSource(bool useTenant)
    {
        ActionInput.UseTenantRegistrar = useTenant;
        await OnChange.InvokeAsync();
    }
    
    private async Task UpdateRegistrarUrlSource(ChangeEventArgs e)
    {
        if (e.Value != null && Enum.TryParse<ParameterSource>(e.Value.ToString(), out var source))
        {
            ActionInput.RegistrarUrl.Source = source;
            await OnChange.InvokeAsync();
        }
    }
    
    private async Task UpdateRegistrarUrlValue(ChangeEventArgs e)
    {
        ActionInput.RegistrarUrl.DefaultValue = e.Value?.ToString();
        await OnChange.InvokeAsync();
    }
    
    private async Task UpdateRegistrarUrlPath(ChangeEventArgs e)
    {
        ActionInput.RegistrarUrl.Path = e.Value?.ToString() ?? string.Empty;
        await OnChange.InvokeAsync();
    }
    
    private async Task UpdateWalletIdSource(ChangeEventArgs e)
    {
        if (e.Value != null && Enum.TryParse<ParameterSource>(e.Value.ToString(), out var source))
        {
            ActionInput.WalletId.Source = source;
            await OnChange.InvokeAsync();
        }
    }
    
    private async Task UpdateWalletIdValue(ChangeEventArgs e)
    {
        ActionInput.WalletId.DefaultValue = e.Value?.ToString();
        await OnChange.InvokeAsync();
    }
    
    private async Task UpdateWalletIdPath(ChangeEventArgs e)
    {
        ActionInput.WalletId.Path = e.Value?.ToString() ?? string.Empty;
        await OnChange.InvokeAsync();
    }
}