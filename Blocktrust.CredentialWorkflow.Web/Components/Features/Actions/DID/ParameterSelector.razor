@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Actions.DID

<div class="w-full">
    <div class="flex items-center mb-0.5">
        <label class="block text-xs font-medium text-gray-700 mr-2">@Label</label>
        <div class="flex-grow"></div>
        <select class="text-xs border-none bg-transparent focus:ring-0 px-1 py-0 cursor-pointer"
                @onchange="ChangeSourceType">
            <option value="@ParameterSource.Static">Static</option>
            <option value="@ParameterSource.TriggerInput">From Trigger</option>
        </select>
    </div>
    
    @if (Parameter.Source == ParameterSource.Static)
    {
        @if (IsDropdown)
        {
            <select class="w-full px-2 py-0.5 border border-gray-300 rounded text-xs"
                    value="@Parameter.DefaultValue"
                    @onchange="OnDropdownChange"
                    disabled="@(DisabledValue != null && Parameter.DefaultValue == DisabledValue)">
                @foreach (var option in Options)
                {
                    if (Parameter.DefaultValue == DisabledValue && option == DisabledValue)
                    {
                        <option value="@option">@option</option>
                    }
                    else if (DisabledValue != null && option == DisabledValue)
                    {
                        <option value="@option" disabled>@option</option>
                    }
                    else
                    {
                        <option value="@option">@option</option>
                    }
                }
            </select>
        }
        else if (CanSwitchToCustomValue && !IsCustomValue)
        {
            <div class="flex">
                <select class="w-full px-2 py-0.5 border border-gray-300 rounded-l text-xs"
                        value="@Parameter.DefaultValue"
                        @onchange="OnDropdownChange">
                    @foreach (var option in Options)
                    {
                        <option value="@option">@option</option>
                    }
                </select>
                <button 
                    @onclick="() => SwitchToCustomValue(true)"
                    class="bg-gray-200 hover:bg-gray-300 px-2 rounded-r border-t border-r border-b border-gray-300">
                    <span class="material-symbols-outlined text-xs">edit</span>
                </button>
            </div>
        }
        else if (CanSwitchToCustomValue && IsCustomValue)
        {
            <div class="flex">
                <input 
                    type="text"
                    value="@Parameter.DefaultValue"
                    @onchange="OnTextInputChange"
                    @oninput="OnTextInput"
                    class="w-full px-2 py-0.5 border border-gray-300 rounded-l text-xs"
                    placeholder="@Placeholder" />
                <button 
                    @onclick="() => SwitchToCustomValue(false)"
                    class="bg-gray-200 hover:bg-gray-300 px-2 rounded-r border-t border-r border-b border-gray-300">
                    <span class="material-symbols-outlined text-xs">list</span>
                </button>
            </div>
        }
        else
        {
            <input 
                type="text"
                value="@Parameter.DefaultValue"
                @onchange="OnTextInputChange"
                @oninput="OnTextInput"
                class="w-full px-2 py-0.5 border border-gray-300 rounded text-xs"
                placeholder="@Placeholder" />
        }
    }
    else if (Parameter.Source == ParameterSource.TriggerInput)
    {
        <select class="w-full px-2 py-0.5 border border-gray-300 rounded text-xs"
                value="@Parameter.Path"
                @onchange="OnPathChange">
            <option value="">Select parameter</option>
            @if (TriggerParameters != null)
            {
                @foreach (var param in TriggerParameters)
                {
                    <option value="@param">@param</option>
                }
            }
        </select>
    }
    
    @if (!string.IsNullOrEmpty(ValidationError))
    {
        <div class="text-red-500 text-xs mt-0.5">@ValidationError</div>
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public ParameterReference Parameter { get; set; } = null!;
    [Parameter] public IEnumerable<string>? TriggerParameters { get; set; }
    [Parameter] public EventCallback<ParameterReference> OnChange { get; set; }
    [Parameter] public EventCallback<string> OnInputValidation { get; set; }
    [Parameter] public string ValidationError { get; set; } = "";
    [Parameter] public string Placeholder { get; set; } = "";
    [Parameter] public bool IsDropdown { get; set; } = false;
    [Parameter] public List<string> Options { get; set; } = new List<string>();
    [Parameter] public string? DisabledValue { get; set; }
    [Parameter] public bool CanSwitchToCustomValue { get; set; } = false;
    [Parameter] public bool IsCustomValue { get; set; } = false;
    [Parameter] public EventCallback<bool> OnCustomValueToggle { get; set; }
    
    private async Task ChangeSourceType(ChangeEventArgs e)
    {
        if (e.Value != null && Enum.TryParse<ParameterSource>(e.Value.ToString(), out var source))
        {
            Parameter.Source = source;
            await OnChange.InvokeAsync(Parameter);
        }
    }
    
    private async Task OnTextInputChange(ChangeEventArgs e)
    {
        string? value = e.Value?.ToString();
        Parameter.DefaultValue = value;
        await OnChange.InvokeAsync(Parameter);
    }
    
    private async Task OnTextInput(ChangeEventArgs e)
    {
        string? value = e.Value?.ToString();
        
        if (OnInputValidation.HasDelegate)
        {
            await OnInputValidation.InvokeAsync(value);
        }
    }
    
    private async Task OnDropdownChange(ChangeEventArgs e)
    {
        string? value = e.Value?.ToString();
        Parameter.DefaultValue = value;
        await OnChange.InvokeAsync(Parameter);
    }
    
    private async Task OnPathChange(ChangeEventArgs e)
    {
        string? value = e.Value?.ToString();
        Parameter.Path = value ?? "";
        await OnChange.InvokeAsync(Parameter);
    }
    
    private async Task SwitchToCustomValue(bool isCustom)
    {
        if (OnCustomValueToggle.HasDelegate)
        {
            await OnCustomValueToggle.InvokeAsync(isCustom);
        }
    }
}