@using Blocktrust.CredentialWorkflow.Core.Domain.Workflow
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Issuance
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using Blocktrust.CredentialWorkflow.Web.Components.Features.Actions
@using Action = Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Action

<div class="h-full w-full p-4">
    <div class="flex flex-col items-center">
        @if (showToast)
        {
            <div class="fixed top-4 right-4 bg-slate-800 text-white px-4 py-2 rounded-lg shadow-lg transition-opacity duration-500 @(showToast ? "opacity-100" : "opacity-0")">
                @toastMessage
            </div>
        }

        @foreach (var item in flowItems)
        {
            <div class="w-80 h-32 bg-gray-200 hover:bg-gray-100 shadow-md rounded-lg p-3 flex flex-col cursor-pointer text-sm relative transition-all duration-200 @(item == SelectedItem ? "border-2 border-blue-500" : "")"
                 @onclick="() => SelectItem(item)">
                <div class="overflow-hidden hover:overflow-visible hover:absolute hover:z-50 hover:bg-gray-100 hover:h-auto hover:w-80 hover:shadow-xl hover:rounded-lg hover:p-3">
                    @if (item is Trigger trigger)
                    {
                        <h3 class="text-base font-bold mb-1">Triggers: @trigger.Type</h3>
                        @if (trigger.Input is TriggerInputIncomingRequest incomingRequest)
                        {
                            <p class="text-xs">
                                <strong>Method:</strong> @incomingRequest.Method
                            </p>
                            <p class="text-xs truncate hover:whitespace-normal">
                                <strong>Endpoint:</strong> @incomingRequest.Endpoint
                            </p>
                            @if (incomingRequest.Parameters.Any())
                            {
                                <div class="mt-1">
                                    <p class="text-xs">
                                        <strong>Parameters:</strong>
                                    </p>
                                    <ul class="text-xs space-y-1">
                                        @foreach (var param in incomingRequest.Parameters)
                                        {
                                            <li class="flex items-center">
                                                <span class="font-medium">@param.Key:</span>
                                                <span class="ml-1 text-gray-600">@param.Value.Type</span>
                                                @if (param.Value.Required)
                                                {
                                                    <span class="ml-1 text-red-500 text-xs">*</span>
                                                }
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                        }
                    }
                    else if (item is Action action)
                    {
                        <h3 class="text-base font-bold mb-1">Actions: @action.Type</h3>
                        @* @if (action.Input is IssueW3CCredential issueW3CCredential ) *@
                        @* { *@
                        @*     <p class="text-xs truncate hover:whitespace-normal"> *@
                        @*         <strong>Subject DID:</strong> @(issueW3CCredential.SubjectDid.Path) *@
                        @*         <span class="text-xs text-gray-500"> *@
                        @*             (@issueW3CCredential.SubjectDid.Source) *@
                        @*         </span> *@
                        @*     </p> *@
                        @*     <p class="text-xs truncate hover:whitespace-normal"> *@
                        @*         <strong>Issuer DID:</strong> @(issueW3CCredential.IssuerDid.Path) *@
                        @*         <span class="text-xs text-gray-500"> *@
                        @*             (@issueW3CCredential.IssuerDid.Source) *@
                        @*         </span> *@
                        @*     </p> *@
                        @*     @if (issueW3CCredential.Claims.Any()) *@
                        @*     { *@
                        @*         <div class="mt-1 space-y-1"> *@
                        @*             <p class="text-xs"> *@
                        @*                 <strong>Claims (@issueW3CCredential.Claims.Count):</strong> *@
                        @*             </p> *@
                        @*             <div class="text-xs space-y-1"> *@
                        @*                 @foreach (var claim in issueW3CCredential.Claims) *@
                        @*                 { *@
                        @*                     <p class="truncate hover:whitespace-normal"> *@
                        @*                         <span class="font-medium">@claim.Key:</span> @GetClaimPreview(claim.Value) *@
                        @*                     </p> *@
                        @*                 } *@
                        @*             </div> *@
                        @*         </div> *@
                        @*     } *@
                        @* } *@
                        // else 
                        @* if (action.Input is ActionInputOutgoingRequest outgoingRequest) *@
                        @* { *@
                        @*     <p class="text-xs"> *@
                        @*         <strong>Method:</strong> @outgoingRequest.Method *@
                        @*     </p> *@
                        @*     <p class="text-xs truncate hover:whitespace-normal"> *@
                        @*         <strong>URI:</strong> @outgoingRequest.Uri *@
                        @*     </p> *@
                        @* } *@
                    }
                </div>

                <button class="bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded mt-auto self-end transition-colors duration-200" 
                        @onclick:stopPropagation="true" 
                        @onclick="async () => await RemoveItem(item)">
                    <span class="material-symbols-outlined text-xs">delete</span> 
                </button>
            </div>
            <div class="h-8 border-r-2 border-gray-300"></div>
        }

        <div class="w-80 h-32 bg-gray-50 shadow-md rounded-lg mb-4 p-3 flex flex-col justify-center items-center cursor-pointer hover:bg-gray-100 transition-colors duration-200"
             @onclick="() => SelectItem(null)">
            <div>
                <span class="material-symbols-outlined text-2xl">add_circle_outline</span>
            </div>
            <p class="text-base font-bold text-center">Create new Actions/Triggers</p>
        </div>
    </div>

    @if (showError)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div class="bg-white rounded-lg p-6 max-w-md">
                <h3 class="text-xl font-bold mb-4">Error</h3>
                <p class="text-gray-700 mb-6">@errorMessage</p>
                <button class="bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded transition-colors duration-200"
                        @onclick="CloseError">
                    OK
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Workflow? Workflow { get; set; }
    [Parameter] public EventCallback<object?> OnItemSelected { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }

    private List<object> flowItems = new();
    private object? SelectedItem { get; set; }
    private string? errorMessage;
    private bool showError;
    private string? toastMessage;
    private bool showToast;

    protected override void OnParametersSet()
    {
        UpdateFlowItems();
    }

    private void UpdateFlowItems()
    {
        if (Workflow?.ProcessFlow != null)
        {
            var newItems = new List<object>();
            newItems.AddRange(Workflow.ProcessFlow.Triggers.Values);
            newItems.AddRange(Workflow.ProcessFlow.Actions.Values);
            flowItems = newItems.OrderBy(item => item is Trigger ? 0 : 1).ToList();
            StateHasChanged();
        }
    }

    private async Task ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        showToast = false;
        StateHasChanged();
    }

    private void ShowError(string message)
    {
        errorMessage = message;
        showError = true;
        StateHasChanged();
    }

    private void CloseError()
    {
        showError = false;
        errorMessage = null;
        StateHasChanged();
    }

    private string GetClaimPreview(ClaimValue claim)
    {
        if (claim.Type == ClaimValueType.Static)
            return claim.Value;
        return $"{claim.ParameterReference?.Source} ({claim.ParameterReference?.Path})";
    }

    private async Task RemoveItem(object item)
    {
        if (Workflow?.ProcessFlow == null)
        {
            return;
        }

        bool removed = false;
        if (item is Trigger)
        {
            if (Workflow.ProcessFlow.Actions.Any())
            {
                ShowError("Cannot remove trigger while actions exist. Please remove all actions first.");
                return;
            }
            Workflow.ProcessFlow.Triggers.Clear();
            removed = true;
        }
        else if (item is Action)
        {
            if (item != flowItems.LastOrDefault(i => i is Action))
            {
                ShowError("Only the last action can be removed. Please remove actions in reverse order.");
                return;
            }
            Workflow.ProcessFlow.RemoveLastAction();
            removed = true;
        }

        if (removed)
        {
            if (item == SelectedItem)
            {
                await SelectItem(null);
            }
            await OnChange.InvokeAsync();
            UpdateFlowItems();
            await ShowToast(item is Trigger ? "Triggers removed successfully" : "Actions removed successfully");
        }
    }

    private async Task SelectItem(object? item)
    {
        SelectedItem = item;
        await OnItemSelected.InvokeAsync(item);
    }

    public async Task AddItem(object item)
    {
        if (Workflow?.ProcessFlow == null)
        {
            return;
        }

        bool added = false;
        if (item is Trigger trigger)
        {
            if (Workflow.ProcessFlow.Triggers.Any())
            {
                ShowError("Only one trigger is allowed per workflow. Please remove the existing trigger first.");
                return;
            }
            Workflow.ProcessFlow.AddTrigger(trigger);
            added = true;
        }
        else if (item is Action action)
        {
            if (!Workflow.ProcessFlow.Triggers.Any())
            {
                ShowError("A trigger must be added before adding actions. Please add a trigger first.");
                return;
            }
            Workflow.ProcessFlow.AddAction(action);
            added = true;
        }

        if (added)
        {
            await OnChange.InvokeAsync();
            UpdateFlowItems();
            await ShowToast(item is Trigger ? "Triggers added successfully" : "Actions added successfully");
        }
    }
}