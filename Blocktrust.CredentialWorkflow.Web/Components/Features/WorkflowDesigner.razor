@using Blocktrust.CredentialWorkflow.Core.Domain.Workflow
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Trigger
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action
@using Action = Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action.Action

<div class="h-full w-full p-4">
    <div class="flex flex-col items-center">
        @foreach (var item in flowItems)
        {
            <div class="w-80 h-52 bg-white shadow-md rounded-lg mb-4 p-4 flex flex-col cursor-pointer @(item == SelectedItem ? "border-2 border-blue-500" : "")"
                 @onclick="() => SelectItem(item)">
                @if (item is Trigger trigger)
                {
                    <h3 class="text-lg font-bold mb-2">Trigger: @trigger.Type</h3>
                    @if (trigger.Input is TriggerInputIncomingRequest incomingRequest)
                    {
                        <p>
                            <strong>Method:</strong> @incomingRequest.Method
                        </p>
                        <p>
                            <strong>URI:</strong> @incomingRequest.Uri
                        </p>
                    }
                }
                else if (item is Action action)
                {
                    <h3 class="text-lg font-bold mb-2">Action: @action.Type</h3>
                    @if (action.Input is ActionInputCredentialIssuance credentialIssuance)
                    {
                        <p>
                            <strong>Subject:</strong> @credentialIssuance.Subject
                        </p>
                        <p>
                            <strong>Issuer:</strong> @credentialIssuance.Issuer
                        </p>
                    }
                    else if (action.Input is ActionInputOutgoingRequest outgoingRequest)
                    {
                        <p>
                            <strong>Method:</strong> @outgoingRequest.Method
                        </p>
                        <p>
                            <strong>URI:</strong> @outgoingRequest.Uri
                        </p>
                    }
                }
                <button class="bg-red-500 text-white px-2 py-1 rounded mt-auto self-end" @onclick:stopPropagation="true" @onclick="() => RemoveItem(item)">Remove</button>
            </div>
        }

        <div class="w-80 h-52 bg-white shadow-md rounded-lg mb-4 p-4 flex flex-col justify-center items-center cursor-pointer hover:bg-gray-100"
             @onclick="() => SelectItem(null)">
            <p class="text-lg font-bold text-center">Create new Action/Trigger</p>
        </div>
    </div>
</div>

@code {
    [Parameter] public Workflow? Workflow { get; set; }
    [Parameter] public EventCallback<object?> OnItemSelected { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }

    private List<object> flowItems = new List<object>();
    private object? SelectedItem { get; set; }

    protected override void OnParametersSet()
    {
        UpdateFlowItems();
    }

    private void UpdateFlowItems()
    {
        if (Workflow?.ProcessFlow != null)
        {
            flowItems.Clear();
            flowItems.AddRange(Workflow.ProcessFlow.Triggers.Values);
            flowItems.AddRange(Workflow.ProcessFlow.Actions.Values);
            flowItems = flowItems.OrderBy(item => item is Trigger ? 0 : 1).ToList();
        }
    }

    private async Task RemoveItem(object item)
    {
        if (Workflow?.ProcessFlow == null)
        {
            return;
        }

        if (item is Trigger)
        {
            if (Workflow.ProcessFlow.Actions.Any())
            {
                // TODO: Show error message - cannot remove trigger if actions exist
                return;
            }
            Workflow.ProcessFlow.Triggers.Clear();
        }
        else if (item is Action)
        {
            if (item != flowItems.LastOrDefault(i => i is Action))
            {
                // TODO: Show error message - can only remove the last action
                return;
            }
            Workflow.ProcessFlow.RemoveLastAction();
        }

        UpdateFlowItems();
        if (item == SelectedItem)
        {
            await SelectItem(null);
        }
        await OnChange.InvokeAsync();
    }

    private async Task SelectItem(object? item)
    {
        SelectedItem = item;
        await OnItemSelected.InvokeAsync(item);
    }

    public async Task AddItem(object item)
    {
        if (Workflow?.ProcessFlow == null)
        {
            return;
        }

        if (item is Trigger trigger)
        {
            if (Workflow.ProcessFlow.Triggers.Any())
            {
                // TODO: Show error message - only one trigger allowed
                return;
            }
            Workflow.ProcessFlow.AddTrigger(trigger);
        }
        else if (item is Action action)
        {
            if (!Workflow.ProcessFlow.Triggers.Any())
            {
                // TODO: Show error message - trigger must be added before actions
                return;
            }
            Workflow.ProcessFlow.AddAction(action);
        }

        UpdateFlowItems();
        await OnChange.InvokeAsync();
    }
}