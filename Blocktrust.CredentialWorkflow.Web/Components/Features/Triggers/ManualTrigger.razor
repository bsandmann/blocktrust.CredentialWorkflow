@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Triggers
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using System.Text.RegularExpressions

<div class="p-4 text-sm max-w-2xl">
    <div class="space-y-4">
        <!-- Simple explanation text instead of input fields -->
        <div class="text-xs font-medium text-gray-700">
            The manual trigger does not contain settings and can be executed manually from the Workflow overview page.
        </div>
    </div>
</div>

@code {
    [Parameter] public TriggerInputManual TriggerInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public Guid WorkflowId { get; set; }

    private List<Parameter> parameters = new();
    private bool isInitialized = false;

    protected override void OnInitialized()
    {
        if (!isInitialized)
        {
            LoadParameters();
            isInitialized = true;
        }
    }

    protected override void OnParametersSet()
    {
        if (!isInitialized)
        {
            LoadParameters();
            isInitialized = true;
        }
    }

    private void LoadParameters()
    {
        if (TriggerInput?.RequiredParameters == null) return;

        parameters = TriggerInput.RequiredParameters.Select(p => new Parameter
        {
            Name = p.Key,
            Type = p.Value.Type.ToString().ToLower(),
            Description = p.Value.Description ?? "",
            IsEditing = false,
            OriginalName = p.Key
        }).ToList();
    }

    private async Task OnValueChanged()
    {
        await OnChange.InvokeAsync();
    }

    private async Task AddParameter()
    {
        var newParam = new Parameter
        {
            IsEditing = true,
            Type = "string",
            Name = ""
        };
        parameters.Add(newParam);
        await UpdateTriggerParameters();
    }

    private void StartEdit(Parameter param)
    {
        param.IsEditing = true;
        param.OriginalName = param.Name;
        StateHasChanged();
    }

    private async Task HandleParameterChange(Parameter param)
    {
        if (ValidateParameter(param))
        {
            param.IsEditing = false;
            param.ValidationMessage = null;
            await UpdateTriggerParameters();
        }
    }

    private void CancelEdit(Parameter param)
    {
        if (string.IsNullOrEmpty(param.OriginalName))
        {
            parameters.Remove(param);
        }
        else
        {
            param.Name = param.OriginalName;
            param.IsEditing = false;
        }
        UpdateTriggerParameters();
    }

    private bool ValidateParameter(Parameter param)
    {
        var nameValidationRegex = new Regex("^[a-zA-Z][a-zA-Z0-9]*$");

        if (string.IsNullOrWhiteSpace(param.Name))
        {
            param.ValidationMessage = "Parameter name cannot be empty";
            return false;
        }

        if (!nameValidationRegex.IsMatch(param.Name))
        {
            param.ValidationMessage = "Parameter name must start with a letter and contain only letters and numbers";
            return false;
        }

        if (parameters.Any(p => p != param && p.Name == param.Name))
        {
            param.ValidationMessage = "Parameter name must be unique";
            return false;
        }

        return true;
    }

    private async Task RemoveParameter(Parameter param)
    {
        parameters.Remove(param);
        await UpdateTriggerParameters();
    }

    private async Task UpdateTriggerParameters()
    {
        TriggerInput.RequiredParameters.Clear();
        foreach (var param in parameters.Where(p => !string.IsNullOrEmpty(p.Name)))
        {
            TriggerInput.RequiredParameters[param.Name] = new ParameterDefinition
            {
                Type = Enum.Parse<ParameterType>(param.Type, true),
                Description = param.Description,
                Required = true
            };
        }
        await OnChange.InvokeAsync();
    }

    private class Parameter
    {
        public string Name { get; set; } = "";
        public string Type { get; set; } = "string";
        public string Description { get; set; } = "";
        public bool IsEditing { get; set; }
        public string? ValidationMessage { get; set; }
        public string? OriginalName { get; set; }
    }
}