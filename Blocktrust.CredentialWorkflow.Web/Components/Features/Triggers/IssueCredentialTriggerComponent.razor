@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Triggers
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers.IncomingRequests
@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@using Blocktrust.CredentialWorkflow.Core.Domain.Enums

<div class="p-4 text-sm">
    @if (showToast)
    {
        <div class="fixed top-4 right-4 bg-slate-800 text-white px-4 py-2 rounded-lg shadow-lg transition-opacity duration-500 @(showToast ? "opacity-100" : "opacity-0")">
            @toastMessage
        </div>
    }

    <div class="space-y-3">
        <div>
            <label class="block text-xs font-medium text-gray-700">Trigger Configuration</label>
        </div>

        <!-- Credential Type Selection -->
        <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Credential Type</label>
            <select class="w-full rounded-md border border-gray-300 px-2 py-1 text-sm"
                    @bind="selectedCredentialType"
                    @bind:after="OnCredentialTypeChanged">
                <option value="@ECredentialType.W3cCredential">W3C Credential</option>
                <option value="@ECredentialType.W3cSdCredential">W3C SD Credential</option>
                <option value="@ECredentialType.AnoncredCredential">Anoncred</option>
            </select>
        </div>

        <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Endpoint</label>
            <select class="w-full rounded-md border border-gray-300 px-2 py-1 text-sm"
                    @bind="TriggerInput.Endpoint"
                    @bind:after="OnInputChanged">
                <option value="@GetEndpointForCredentialType(selectedCredentialType)">@GetEndpointForCredentialType(selectedCredentialType)</option>
            </select>
        </div>

        <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Method</label>
            <select class="w-full rounded-md border border-gray-300 px-2 py-1 text-sm"
                    @bind="TriggerInput.Method"
                    @bind:after="OnInputChanged">
                <option value="GET">GET</option>
                <option value="POST">POST</option>
            </select>
        </div>

        <!-- Parameter Section -->
        <div class="border-t pt-3">
            <div class="flex justify-between items-center mb-2">
                <h4 class="text-sm font-medium">Parameters</h4>
            </div>

            <div class="space-y-2 mb-3">
                <!-- Common Parameters -->
                <div class="p-2 border rounded-md bg-gray-50">
                    <div class="flex justify-between items-center">
                        <span class="text-xs font-medium">Subject DID</span>
                        <span class="text-xs text-gray-500">From Trigger Input</span>
                    </div>
                    <p class="text-xs text-gray-600 mt-1">DID of the credential subject</p>
                </div>

                <div class="p-2 border rounded-md bg-gray-50">
                    <div class="flex justify-between items-center">
                        <span class="text-xs font-medium">Issuer DID</span>
                        <span class="text-xs text-gray-500">From App Settings</span>
                    </div>
                    <p class="text-xs text-gray-600 mt-1">DID of the credential issuer</p>
                </div>

                @if (selectedCredentialType == ECredentialType.AnoncredCredential)
                {
                    <!-- Anoncred-specific parameters -->
                    <div class="p-2 border rounded-md bg-gray-50">
                        <div class="flex justify-between items-center">
                            <span class="text-xs font-medium">Credential Definition ID</span>
                            <span class="text-xs text-gray-500">Required</span>
                        </div>
                        <input type="text" 
                               class="w-full rounded border px-2 py-1 text-xs mt-1"
                               placeholder="Enter Credential Definition ID"
                               @bind="credentialDefinitionId"
                               @bind:after="OnCredentialDefinitionChanged" />
                    </div>

                    <div class="p-2 border rounded-md bg-gray-50">
                        <div class="flex justify-between items-center">
                            <span class="text-xs font-medium">Schema ID</span>
                            <span class="text-xs text-gray-500">Required</span>
                        </div>
                        <input type="text" 
                               class="w-full rounded border px-2 py-1 text-xs mt-1"
                               placeholder="Enter Schema ID"
                               @bind="schemaId"
                               @bind:after="OnSchemaIdChanged" />
                    </div>
                }

                @if (selectedCredentialType == ECredentialType.W3cSdCredential)
                {
                    <!-- W3C SD-specific parameters -->
                    <div class="p-2 border rounded-md">
                        <div class="flex items-center justify-between">
                            <span class="text-xs font-medium">Enable Selective Disclosure</span>
                            <input type="checkbox" 
                                   class="rounded border-gray-300"
                                   @bind="enableSelectiveDisclosure"
                                   @bind:after="OnSelectiveDisclosureChanged" />
                        </div>
                    </div>
                }

                <!-- Delivery Method -->
                <div class="p-2 border rounded-md">
                    <div class="flex justify-between items-center mb-1">
                        <span class="text-xs font-medium">Delivery Method</span>
                    </div>
                    <select class="w-full rounded border px-2 py-1 text-xs mt-1"
                            @bind="selectedDeliveryMethod"
                            @bind:after="OnDeliveryMethodChanged">
                        <option value="">Select Delivery Method</option>
                        <option value="didcomm">DIDComm</option>
                        <option value="smtp">Email</option>
                    </select>
                </div>

                @if (!string.IsNullOrEmpty(selectedDeliveryMethod))
                {
                    <div class="p-2 border rounded-md">
                        <div class="flex justify-between items-center mb-1">
                            <span class="text-xs font-medium">
                                @(selectedDeliveryMethod == "didcomm" ? "Peer DID [peerDid]" : "Email [email]")
                            </span>
                        </div>
                        <input type="text" 
                               class="w-full rounded border px-2 py-1 text-xs mt-1"
                               placeholder="@(selectedDeliveryMethod == "didcomm" ? "Enter Peer DID for static value" : "Enter Email")"
                               @bind="deliveryDestination"
                               @bind:after="OnDeliveryDestinationChanged" />
                    </div>
                }
            </div>

            <!-- Custom Parameters -->
            @foreach (var param in customParameters)
            {
                <div class="p-2 border rounded-md mb-2">
                    <div class="flex items-center justify-between mb-1">
                        <input type="text" 
                               class="rounded border px-2 py-1 text-xs w-1/2"
                               placeholder="Parameter name"
                               @bind="param.Name"
                               @bind:event="oninput"
                               @bind:after="UpdateCustomParameters" />
                        <select class="rounded border px-2 py-1 text-xs w-1/3"
                                @bind="param.Type"
                                @bind:after="UpdateCustomParameters">
                            <option value="string">string</option>
                            <option value="number">number</option>
                            <option value="boolean">boolean</option>
                        </select>
                        <button class="text-red-500 hover:text-red-700 px-2"
                                @onclick="() => RemoveParameter(param)">
                            <span class="material-symbols-outlined text-sm">delete</span>
                        </button>
                    </div>
                </div>
            }

            <!-- Add Parameter Button -->
            <button class="w-full mt-2 bg-slate-700 hover:bg-slate-600 text-white text-xs py-1 px-2 rounded transition-colors duration-200 flex items-center justify-center"
                    @onclick="AddParameter">
                <span class="material-symbols-outlined text-sm mr-1">add</span>
                Add Parameter
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public TriggerInputIncomingRequest TriggerInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    
    private ECredentialType selectedCredentialType = ECredentialType.W3cCredential;
    private string selectedDeliveryMethod = "";
    private string deliveryDestination = "";
    private string credentialDefinitionId = "";
    private string schemaId = "";
    private bool enableSelectiveDisclosure;
    private string? toastMessage;
    private bool showToast;
    private List<CustomParameter> customParameters = new();

    private class CustomParameter
    {
        public string Name { get; set; } = "";
        public string Type { get; set; } = "string";
    }

    protected override void OnInitialized()
    {
        InitializeDefaultParameters();
        InitializeCustomParameters();

        if (TriggerInput.Parameters.ContainsKey("peerDid"))
        {
            selectedDeliveryMethod = "didcomm";
            deliveryDestination = TriggerInput.Parameters["peerDid"].DefaultValue ?? "";
        }
        else if (TriggerInput.Parameters.ContainsKey("email"))
        {
            selectedDeliveryMethod = "smtp";
            deliveryDestination = TriggerInput.Parameters["email"].DefaultValue ?? "";
        }

        // Initialize credential type specific parameters
        if (TriggerInput.Parameters.ContainsKey("credentialDefinitionId"))
        {
            selectedCredentialType = ECredentialType.AnoncredCredential;
            credentialDefinitionId = TriggerInput.Parameters["credentialDefinitionId"].DefaultValue ?? "";
            schemaId = TriggerInput.Parameters["schemaId"]?.DefaultValue ?? "";
        }
        else if (TriggerInput.Parameters.ContainsKey("selectiveDisclosure"))
        {
            selectedCredentialType = ECredentialType.W3cSdCredential;
            enableSelectiveDisclosure = bool.TryParse(TriggerInput.Parameters["selectiveDisclosure"].DefaultValue, out bool sd) && sd;
        }
    }

    private string GetEndpointForCredentialType(ECredentialType type) => type switch
    {
        ECredentialType.W3cCredential => "/credentials/issue/w3c",
        ECredentialType.W3cSdCredential => "/credentials/issue/w3c-sd",
        ECredentialType.AnoncredCredential => "/credentials/issue/anoncred",
        _ => "/credentials/issue"
    };

    private async Task OnCredentialTypeChanged()
    {
        TriggerInput.Endpoint = GetEndpointForCredentialType(selectedCredentialType);
        
        // Reset type-specific parameters
        TriggerInput.Parameters.Remove("credentialDefinitionId");
        TriggerInput.Parameters.Remove("schemaId");
        TriggerInput.Parameters.Remove("selectiveDisclosure");

        // Add parameters based on credential type
        if (selectedCredentialType == ECredentialType.AnoncredCredential)
        {
            TriggerInput.Parameters["credentialDefinitionId"] = new ParameterDefinition
            {
                Type = ParameterType.String,
                Required = true,
                Description = "Credential Definition ID"
            };
            TriggerInput.Parameters["schemaId"] = new ParameterDefinition
            {
                Type = ParameterType.String,
                Required = true,
                Description = "Schema ID"
            };
        }
        else if (selectedCredentialType == ECredentialType.W3cSdCredential)
        {
            TriggerInput.Parameters["selectiveDisclosure"] = new ParameterDefinition
            {
                Type = ParameterType.Boolean,
                Required = false,
                Description = "Enable selective disclosure"
            };
        }

        await OnChange.InvokeAsync();
    }

    private async Task OnCredentialDefinitionChanged()
    {
        if (selectedCredentialType == ECredentialType.AnoncredCredential)
        {
            TriggerInput.Parameters["credentialDefinitionId"].DefaultValue = credentialDefinitionId;
            await OnChange.InvokeAsync();
        }
    }

    private async Task OnSchemaIdChanged()
    {
        if (selectedCredentialType == ECredentialType.AnoncredCredential)
        {
            TriggerInput.Parameters["schemaId"].DefaultValue = schemaId;
            await OnChange.InvokeAsync();
        }
    }

    private async Task OnSelectiveDisclosureChanged()
    {
        if (selectedCredentialType == ECredentialType.W3cSdCredential)
        {
            TriggerInput.Parameters["selectiveDisclosure"].DefaultValue = enableSelectiveDisclosure.ToString();
            await OnChange.InvokeAsync();
        }
    }

    private void InitializeDefaultParameters()
    {
        var parameters = TriggerInput.Parameters;
        if (!parameters.ContainsKey("subjectDid"))
        {
            parameters["subjectDid"] = new ParameterDefinition
            {
                Type = ParameterType.String,
                Required = true,
                Description = "DID of the credential subject"
            };
        }

        if (!parameters.ContainsKey("issuerDid"))
        {
            parameters["issuerDid"] = new ParameterDefinition
            {
                Type = ParameterType.String,
                Required = true,
                Description = "DID of the credential issuer"
            };
        }
    }

    private void InitializeCustomParameters()
    {
        var defaultParams = new[] { "subjectDid", "issuerDid", "peerDid", "email", "credentialDefinitionId", "schemaId", "selectiveDisclosure" };
        foreach (var param in TriggerInput.Parameters)
        {
            if (!defaultParams.Contains(param.Key))
            {
                customParameters.Add(new CustomParameter
                {
                    Name = param.Key,
                    Type = param.Value.Type.ToString().ToLower()
                });
            }
        }
    }

    private async Task OnInputChanged()
    {
        await OnChange.InvokeAsync();
    }

    private async Task AddParameter()
    {
        var param = new CustomParameter();
        customParameters.Add(param);
        await UpdateCustomParameters();
        StateHasChanged();
    }

    private async Task RemoveParameter(CustomParameter param)
    {
        customParameters.Remove(param);
        await UpdateCustomParameters();
        StateHasChanged();
    }

private async Task UpdateCustomParameters()
    {
        var defaultParams = new[] { "subjectDid", "issuerDid", "peerDid", "email", "credentialDefinitionId", "schemaId", "selectiveDisclosure" };
        var customParamKeys = TriggerInput.Parameters.Keys
            .Where(k => !defaultParams.Contains(k))
            .ToList();
    
        foreach (var key in customParamKeys)
        {
            TriggerInput.Parameters.Remove(key);
        }

        foreach (var param in customParameters)
        {
            if (!string.IsNullOrEmpty(param.Name))
            {
                TriggerInput.Parameters[param.Name] = new ParameterDefinition
                {
                    Type = Enum.Parse<ParameterType>(param.Type, true),
                    Description = $"Custom parameter: {param.Name}"
                };
            }
        }

        await OnChange.InvokeAsync();
    }

    private async Task OnDeliveryMethodChanged()
    {
        TriggerInput.Parameters.Remove("deliveryMethod");
        TriggerInput.Parameters.Remove("peerDid");
        TriggerInput.Parameters.Remove("email");
        deliveryDestination = "";

        if (!string.IsNullOrEmpty(selectedDeliveryMethod))
        {
            var destinationParam = selectedDeliveryMethod == "didcomm" ? "peerDid" : "email";
            var description = selectedDeliveryMethod == "didcomm" ? 
                "Peer DID for delivery" : "Email address for delivery";

            TriggerInput.Parameters[destinationParam] = new ParameterDefinition
            {
                Type = ParameterType.String,
                Required = true,
                Description = description
            };
        }

        await OnChange.InvokeAsync();
    }

    private async Task OnDeliveryDestinationChanged()
    {
        if (!string.IsNullOrEmpty(selectedDeliveryMethod))
        {
            var destinationParam = selectedDeliveryMethod == "didcomm" ? "peerDid" : "email";
            if (TriggerInput.Parameters.ContainsKey(destinationParam))
            {
                TriggerInput.Parameters[destinationParam].DefaultValue = deliveryDestination;
                await OnChange.InvokeAsync();
            }
        }
    }

    private async Task ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        showToast = false;
        StateHasChanged();
    }
}