@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using System.Text.RegularExpressions
@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Triggers

<div class="p-4 text-sm">
    <div class="space-y-4">
        <!-- Parameters Section -->
        <div class="pt-3 border-t">
            <div class="flex justify-between items-center mb-2">
                <div class="flex items-center">
                    <h4 class="text-sm font-medium mr-2">Form Parameters</h4>
                </div>
            </div>

            <!-- Parameters List -->
            <div class="space-y-2">
                @foreach (var param in Parameters)
                {
                    <div class="p-2 border rounded-md">
                        <div class="flex items-center justify-between gap-2">
                            <input type="text"
                                   class="rounded border px-2 py-1 text-xs flex-1"
                                   placeholder="Parameter name"
                                   @bind="param.Name"
                                   @bind:event="oninput"
                                   @bind:after="() => ValidateAndUpdateParameters()" />
                            <select class="rounded border px-2 py-1 text-xs w-24"
                                    @bind="param.Type"
                                    @bind:after="() => ValidateAndUpdateParameters()">
                                <option value="string">string</option>
                                <option value="number">number</option>
                                <option value="boolean">boolean</option>
                                <option value="date">date</option>
                                <option value="email">email</option>
                            </select>
                            <button class="text-red-500 hover:text-red-700 shrink-0"
                                    @onclick="() => RemoveParameter(param)">
                                <span class="material-symbols-outlined text-sm">delete</span>
                            </button>
                        </div>
                        @if (!string.IsNullOrEmpty(param.ValidationError))
                        {
                            <div class="mt-1 text-xs text-red-500">@param.ValidationError</div>
                        }
                        <div class="mt-2">
                            <input type="text"
                                   class="rounded border px-2 py-1 text-xs w-full"
                                   placeholder="Parameter description (optional)"
                                   @bind="param.Description"
                                   @bind:event="oninput"
                                   @bind:after="() => ValidateAndUpdateParameters()" />
                        </div>
                    </div>
                }
            </div>

            <!-- Add Parameter Button -->
            <button class="w-full mt-2 bg-slate-700 hover:bg-slate-600 text-white text-xs py-1 px-2 rounded transition-colors duration-200 flex items-center justify-center"
                    @onclick="AddParameter">
                <span class="material-symbols-outlined text-sm mr-1">add</span>
                Add Parameter
            </button>
        </div>

        <!-- Form URL -->
        <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
            <div class="flex items-center justify-between mb-2">
                <div class="font-medium text-gray-900">Form URL</div>
                <button @onclick="() => CopyToClipboard(FormUrl)"
                        class="text-gray-500 hover:text-gray-700 flex items-center text-xs shrink-0 ml-2">
                    <span class="material-symbols-outlined text-sm mr-1">content_copy</span>
                    Copy URL
                </button>
            </div>
            <div class="font-mono text-sm text-gray-600 break-all">
                @FormUrl
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public TriggerInputForm TriggerInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public Guid WorkflowId { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    
    private List<ParameterData> Parameters { get; set; } = new();
    private string FormUrl => $"{NavigationManager.BaseUri.TrimEnd('/')}/form/{WorkflowId}";
    private int paramCounter = 0;

    protected override void OnInitialized()
    {
        InitializeParameters();
    }

    protected override void OnParametersSet()
    {
        InitializeParameters();
    }

    private void InitializeParameters()
    {
        Parameters.Clear();
        foreach (var param in TriggerInput.Parameters)
        {
            Parameters.Add(new ParameterData
            {
                Name = param.Key,
                Type = param.Value.Type.ToString().ToLower(),
                Description = param.Value.Description
            });
        }
        UpdateParamCounter();
    }

    private void UpdateParamCounter()
    {
        paramCounter = Parameters
            .Select(p => p.Name)
            .Where(name => name.StartsWith("param"))
            .Select(name => name.Replace("param", ""))
            .Where(num => int.TryParse(num, out _))
            .Select(num => int.Parse(num))
            .DefaultIfEmpty(0)
            .Max() + 1;
    }

    private void AddParameter()
    {
        Parameters.Add(new ParameterData 
        { 
            Name = $"param{paramCounter++}",
            Type = "string"
        });
        StateHasChanged();
    }

    private async Task RemoveParameter(ParameterData param)
    {
        Parameters.Remove(param);
        await ValidateAndUpdateParameters();
    }

    private async Task ValidateAndUpdateParameters()
    {
        // Clear existing parameters
        var existingKeys = TriggerInput.Parameters.Keys.ToList();
        foreach (var key in existingKeys)
        {
            TriggerInput.Parameters.Remove(key);
        }

        // Validate and update parameters
        var nameValidationRegex = new Regex("^[a-zA-Z][a-zA-Z0-9]*$");
        bool hasChanges = false;

        foreach (var param in Parameters)
        {
            param.ValidationError = null;

            if (string.IsNullOrWhiteSpace(param.Name))
            {
                param.ValidationError = "Parameter name cannot be empty";
                continue;
            }

            if (!nameValidationRegex.IsMatch(param.Name))
            {
                param.ValidationError = "Parameter name must start with a letter and contain only letters and numbers";
                continue;
            }

            if (Parameters.Count(p => p.Name == param.Name) > 1)
            {
                param.ValidationError = "Parameter name must be unique";
                continue;
            }

            TriggerInput.Parameters[param.Name] = new ParameterDefinition
            {
                Type = Enum.Parse<ParameterType>(param.Type, true),
                Description = param.Description ?? $"Enter {param.Name}",
                Required = true // All form parameters are required by default
            };
            hasChanges = true;
        }

        if (hasChanges)
        {
            await OnChange.InvokeAsync();
        }
    }

    private async Task CopyToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private class ParameterData
    {
        public string Name { get; set; } = "";
        public string Type { get; set; } = "string";
        public string? Description { get; set; }
        public string? ValidationError { get; set; }
    }
}