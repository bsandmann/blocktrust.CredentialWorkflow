@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using Blocktrust.CredentialWorkflow.Web.Services
@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Triggers

<div class="p-4 text-sm max-w-2xl">
    <div class="space-y-4">
        <!-- Form URL Section -->
        <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
            <div class="flex items-center justify-between mb-2">
                <div class="font-medium text-gray-900">Form URL</div>
                <button @onclick="() => CopyToClipboard(FormUrl)"
                        class="text-gray-500 hover:text-gray-700 flex items-center text-xs">
                    <span class="material-symbols-outlined text-sm mr-1">content_copy</span>
                    Copy URL
                </button>
            </div>
            <div class="font-mono text-sm text-gray-600 break-all">
                @FormUrl
            </div>
        </div>
        <!-- Fields Section -->
        <div class="pt-3 border-t">
            <div class="flex justify-between items-center mb-3">
                <h4 class="text-sm font-medium">Form Fields</h4>
                <div class="text-xs text-gray-500">Field name and description are required</div>
            </div>
            <!-- Fields List -->
            <div class="space-y-3">
                @foreach (var param in fields)
                {
                    <div class="bg-white border rounded-lg p-3">
                        <div class="flex items-center gap-2 mb-2">
                            @if (param.IsEditing)
                            {
                                <input type="text"
                                       class="flex-1 rounded border-gray-300 px-2 py-1 text-sm"
                                       placeholder="Field name *"
                                       @bind="param.Name"
                                       @bind:event="oninput"
                                       @onchange="async () => await HandleFieldChange(param)"/>
                                <select class="rounded border-gray-300 px-2 py-1 text-sm w-28"
                                        @bind="param.Type"
                                        @bind:event="oninput"
                                        @onchange="async () => await HandleFieldChange(param)">
                                    <option value="string">Text</option>
                                    <option value="number">Number</option>
                                    <option value="boolean">Yes/No</option>
                                    <option value="date">Date</option>
                                </select>
                                <button class="p-1 text-gray-500 hover:text-gray-700 rounded"
                                        @onclick="() => CancelEdit(param)">
                                    <span class="material-symbols-outlined text-sm">close</span>
                                </button>
                            }
                            else
                            {
                                <div class="flex-1 py-1 px-2 text-sm">@param.Name</div>
                                <div class="w-28 py-1 px-2 text-sm text-gray-600">
                                    @GetDisplayType(param.Type)
                                </div>
                                <div class="flex gap-1">
                                    <button class="p-1 text-gray-500 hover:text-gray-700 rounded"
                                            @onclick="() => StartEdit(param)">
                                        <span class="material-symbols-outlined text-sm">edit</span>
                                    </button>
                                    <button class="p-1 text-red-500 hover:text-red-700 rounded"
                                            @onclick="async () => await RemoveField(param)">
                                        <span class="material-symbols-outlined text-sm">delete</span>
                                    </button>
                                </div>
                            }
                        </div>
                        @if (param.IsEditing)
                        {
                            <div class="space-y-2">
                                <input type="text"
                                       class="w-full rounded border-gray-300 px-2 py-1 text-sm"
                                       placeholder="Description *"
                                       @bind="param.Description"
                                       @bind:event="oninput"
                                       @onchange="async () => await HandleFieldChange(param)"/>
                                <input type="text"
                                       class="w-full rounded border-gray-300 px-2 py-1 text-sm"
                                       placeholder="Default value (optional)"
                                       @bind="param.DefaultValue"
                                       @bind:event="oninput"
                                       @onchange="async () => await HandleFieldChange(param)"/>
                                
                                @if (!string.IsNullOrEmpty(param.ValidationMessage))
                                {
                                    <div class="text-red-500 text-xs mt-1">@param.ValidationMessage</div>
                                }
                            </div>
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(param.Description))
                            {
                                <div class="text-sm text-gray-700">@param.Description</div>
                            }
                            @if (!string.IsNullOrEmpty(param.DefaultValue))
                            {
                                <div class="text-xs text-gray-500">
                                    Default: @param.DefaultValue
                                </div>
                            }
                        }
                    </div>
                }
            </div>
            <!-- Add Field Button -->
            <button class="w-full mt-3 bg-slate-700 hover:bg-slate-600 text-white text-sm py-2 px-3 rounded-md transition-colors duration-200 flex items-center justify-center"
                    @onclick="AddField">
                <span class="material-symbols-outlined text-sm mr-1">add</span>
                Add Field
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public TriggerInputForm TriggerInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public Guid WorkflowId { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    [Inject] private ClipboardService ClipboardService { get; set; } = default!;
    private List<FormField> fields = new();
    private string FormUrl => $"{NavigationManager.BaseUri.TrimEnd('/')}/form/{WorkflowId}";
    private bool isInitialized = false;

    protected override void OnInitialized()
    {
        if (!isInitialized)
        {
            LoadFields();
            isInitialized = true;
        }
    }

    protected override void OnParametersSet()
    {
        if (!isInitialized)
        {
            LoadFields();
            isInitialized = true;
        }
    }

    private void LoadFields()
    {
        if (TriggerInput?.Parameters == null) return;
        
        fields = TriggerInput.Parameters.Select(p => new FormField
        {
            Name = p.Key,
            Type = p.Value.Type.ToString().ToLower(),
            Description = p.Value.Description ?? "",
            DefaultValue = p.Value.DefaultValue,
            IsEditing = false,
            OriginalName = p.Key // Store original name for tracking
        }).ToList();
    }

    private string GetDisplayType(string type) => type switch
    {
        "string" => "Text",
        "number" => "Number",
        "boolean" => "Yes/No",
        "date" => "Date",
        _ => type
    };

    private void AddField()
    {
        var newField = new FormField
        {
            IsEditing = true,
            Type = "string",
            Name = "",
            OriginalName = null
        };
        fields.Add(newField);
        UpdateTriggerInput();
    }

    private void StartEdit(FormField field)
    {
        field.IsEditing = true;
        field.OriginalName = field.Name;
        StateHasChanged();
    }

    private async Task HandleFieldChange(FormField field)
    {
        field.ValidationMessage = null;
        
        if (string.IsNullOrWhiteSpace(field.Name))
        {
            field.ValidationMessage = "Field name is required";
            StateHasChanged();
            return;
        }
        
        if (string.IsNullOrWhiteSpace(field.Description))
        {
            field.ValidationMessage = "Description is required";
            StateHasChanged();
            return;
        }
        
        // If we get here, validation passed
        UpdateTriggerInput();
        await OnChange.InvokeAsync();
    }

    private void CancelEdit(FormField field)
    {
        if (string.IsNullOrEmpty(field.OriginalName))
        {
            fields.Remove(field);
        }
        else
        {
            field.Name = field.OriginalName;
            field.IsEditing = false;
        }
        UpdateTriggerInput();
    }

    private async Task RemoveField(FormField field)
    {
        fields.Remove(field);
        UpdateTriggerInput();
        await OnChange.InvokeAsync();
    }

    private void UpdateTriggerInput()
    {
        TriggerInput.Parameters.Clear();
        foreach (var field in fields.Where(f => !string.IsNullOrEmpty(f.Name)))
        {
            TriggerInput.Parameters[field.Name] = new ParameterDefinition
            {
                Type = Enum.Parse<ParameterType>(field.Type, true),
                Description = field.Description,
                DefaultValue = field.DefaultValue,
                Required = true
            };
        }
    }

    private async Task CopyToClipboard(string text)
    {
        await ClipboardService.CopyTextToClipboard(text);
    }

    private class FormField
    {
        public string Name { get; set; } = "";
        public string Type { get; set; } = "string";
        public string Description { get; set; } = "";
        public string? DefaultValue { get; set; }
        public bool IsEditing { get; set; }
        public string? OriginalName { get; set; } // Track original name for edit operations
        public string? ValidationMessage { get; set; } // For validation messages
    }
}