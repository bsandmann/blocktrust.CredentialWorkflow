@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Triggers
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using Blocktrust.CredentialWorkflow.Core.Domain.Enums
@using Blocktrust.CredentialWorkflow.Web.Services
@using System.Text.RegularExpressions
@using System.Web
@inject NavigationManager NavigationManager
@inject ClipboardService ClipboardService

<div class="p-4 text-sm">
    @if (showToast)
    {
        <div class="fixed top-4 right-4 bg-slate-800 text-white px-4 py-2 rounded-lg shadow-lg transition-opacity duration-500 @(showToast ? "opacity-100" : "opacity-0")">
            @toastMessage
        </div>
    }

    <div class="space-y-4">
        <!-- Endpoint URL Section -->
        <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
            <div class="flex items-center justify-between mb-2">
                <div class="font-medium text-gray-900">Endpoint URL</div>
                <button @onclick="() => CopyToClipboard(FullUrl)"
                        class="text-gray-500 hover:text-gray-700 flex items-center text-xs">
                    <span class="material-symbols-outlined text-sm mr-1">content_copy</span>
                    Copy URL
                </button>
            </div>
            <div class="font-mono text-sm text-gray-600 break-all">@FullUrl</div>
        </div>

        <!-- Method Selection -->
        <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Method</label>
            <select class="w-full rounded-md border border-gray-300 px-2 py-1 text-sm"
                    @bind="TriggerInput.Method"
                    @bind:after="OnInputChanged">
                <option value="GET">GET</option>
                <option value="POST">POST</option>
            </select>
        </div>

        <!-- Parameter Section -->
        <div class="border-t pt-3">
            <div class="flex justify-between items-center mb-2">
                <div class="flex items-center">
                    <h4 class="text-sm font-medium mr-2">Parameters</h4>
                    <button @onclick="() => CopyToClipboard(JsonSchema)"
                            class="text-gray-500 hover:text-gray-700 flex items-center text-xs">
                        <span class="material-symbols-outlined text-sm mr-1">description</span>
                        Copy Schema
                    </button>
                </div>
            </div>

            <!-- Parameters List -->
            @foreach (var param in httpQueryParameters)
            {
                <div class="p-2 border rounded-md mb-2">
                    @if (!string.IsNullOrEmpty(param.ValidationError))
                    {
                        <p class="text-red-500 text-xs mb-1">@param.ValidationError</p>
                    }
                    <div class="flex items-center justify-between mb-1">
                        <input type="text"
                               class="rounded border px-2 py-1 text-xs w-1/2"
                               placeholder="Parameter name"
                               @bind="param.Name"
                               @bind:event="oninput"
                               @bind:after="UpdateParameters"
                               disabled="@param.Required" />

                        <select class="rounded border px-2 py-1 text-xs w-1/3"
                                @bind="param.Type"
                                @bind:after="UpdateParameters"
                                disabled="@param.Required">
                            <option value="string">string</option>
                            <option value="number">number</option>
                            <option value="boolean">boolean</option>
                        </select>
                        <button class="text-red-500 hover:text-red-700 px-2"
                                @onclick="() => RemoveParameter(param)">
                            <span class="material-symbols-outlined text-sm">delete</span>
                        </button>
                    </div>
                    @if (!string.IsNullOrEmpty(param.Description))
                    {
                        <p class="text-xs text-gray-500">@param.Description</p>
                    }
                </div>
            }

            <!-- Add Parameter Button -->
            <button
                class="w-full mt-2 bg-slate-700 hover:bg-slate-600 text-white text-xs py-1 px-2 rounded transition-colors duration-200 flex items-center justify-center"
                @onclick="AddParameter">
                <span class="material-symbols-outlined text-sm mr-1">add</span>
                Add Parameter
            </button>
        </div>

        <!-- cURL Example Section -->
        <div class="mt-6 bg-gray-50 p-3 rounded-lg border border-gray-200">
            <div class="flex items-center justify-between mb-2">
                <div class="font-medium text-gray-900">cURL Example</div>
                <button @onclick="() => CopyToClipboard(CurlCommand)"
                        class="text-gray-500 hover:text-gray-700 flex items-center text-xs">
                    <span class="material-symbols-outlined text-sm mr-1">content_copy</span>
                    Copy Command
                </button>
            </div>
            <pre class="font-mono text-sm text-gray-600 whitespace-pre-wrap break-all bg-white p-2 rounded">@CurlCommand</pre>
        </div>
    </div>
</div>

@code {
    [Parameter] public TriggerInputHttpRequest TriggerInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public Guid WorkflowId { get; set; }

    private string? toastMessage;
    private bool showToast;
    private List<HttpQueryParameters> httpQueryParameters = new();
    private bool areParametersValid = true;
    private string deliveryValidationError = "";

    private string FullUrl => $"{NavigationManager.BaseUri.TrimEnd('/')}/api/workflow/{WorkflowId}";

    private class HttpQueryParameters
    {
        public string Name { get; set; } = "";
        public string Type { get; set; } = "string";
        public string? Description { get; set; }
        public bool Required { get; set; }
        public string ValidationError { get; set; } = "";
    }

    protected override void OnInitialized()
    {
        InitializeParameters();
    }

    private string CurlCommand
    {
        get
        {
            var command = $"curl -X {TriggerInput.Method} \"{FullUrl}\"";

            var requiredParams = TriggerInput.Parameters.Where(p => p.Value.Required);

            if (TriggerInput.Method == "GET" && requiredParams.Any())
            {
                var queryParams = requiredParams
                    .Select(p => $"{p.Key}={HttpUtility.UrlEncode($"example {p.Key}")}");
                command += $"?{string.Join("&", queryParams)}";
            }

            if (TriggerInput.Method is "POST" or "PUT" && requiredParams.Any())
            {
                command += " \\\n    -H \"Content-Type: application/json\"";

                var exampleBody = requiredParams
                    .ToDictionary(
                        p => p.Key,
                        p => $"example {p.Key}"
                    );

                var jsonBody = System.Text.Json.JsonSerializer.Serialize(exampleBody, 
                    new System.Text.Json.JsonSerializerOptions { 
                        WriteIndented = true,
                        PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
                    });
                command += $" \\\n    -d '{jsonBody}'";
            }

            return command;
        }
    }

    private string JsonSchema
    {
        get
        {
            var schema = new
            {
                type = "object",
                required = TriggerInput.Parameters
                    .Where(p => p.Value.Required)
                    .Select(p => p.Key)
                    .ToList(),
                properties = TriggerInput.Parameters.ToDictionary(
                    p => p.Key,
                    p => new
                    {
                        type = p.Value.Type.ToString().ToLower(),
                        description = p.Value.Description ?? $"Parameter: {p.Key}",
                        required = p.Value.Required
                    }
                )
            };

            return System.Text.Json.JsonSerializer.Serialize(schema, 
                new System.Text.Json.JsonSerializerOptions { 
                    WriteIndented = true,
                    PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
                });
        }
    }

    private void InitializeParameters()
    {
        foreach (var param in TriggerInput.Parameters)
        {
            httpQueryParameters.Add(new HttpQueryParameters
            {
                Name = param.Key,
                Type = param.Value.Type.ToString().ToLower(),
                Description = param.Value.Description,
                Required = param.Value.Required
            });
        }
    }

    private async Task OnInputChanged()
    {
        await OnChange.InvokeAsync();
    }

    private async Task AddParameter()
    {
        var param = new HttpQueryParameters();
        httpQueryParameters.Add(param);
        await UpdateParameters();
        StateHasChanged();
    }

    private async Task RemoveParameter(HttpQueryParameters param)
    {
        httpQueryParameters.Remove(param);
        await UpdateParameters();
        StateHasChanged();
    }

    private async Task UpdateParameters()
    {
        areParametersValid = true;
        deliveryValidationError = "";

        var existingKeys = TriggerInput.Parameters.Keys.ToList();
        foreach (var key in existingKeys)
        {
            TriggerInput.Parameters.Remove(key);
        }

        var nameValidationRegex = new Regex("^[a-zA-Z]+$");

        foreach (var param in httpQueryParameters)
        {
            param.ValidationError = "";

            if (string.IsNullOrEmpty(param.Name))
            {
                param.ValidationError = "Parameter name cannot be empty.";
                areParametersValid = false;
            }
            else
            {
                if (!nameValidationRegex.IsMatch(param.Name))
                {
                    param.ValidationError = "Parameter name must contain only letters (a-z, A-Z).";
                    areParametersValid = false;
                }
                else
                {
                    TriggerInput.Parameters[param.Name] = new ParameterDefinition
                    {
                        Type = Enum.Parse<ParameterType>(param.Type, true),
                        Description = $"Custom parameter: {param.Name}",
                        Required = param.Required
                    };
                }
            }
        }

        await OnChange.InvokeAsync();
    }

    private async Task CopyToClipboard(string text)
    {
        await ClipboardService.CopyTextToClipboard(text);
        toastMessage = "Copied to clipboard!";
        showToast = true;
        StateHasChanged();
        await Task.Delay(2000);
        showToast = false;
        StateHasChanged();
    }
}