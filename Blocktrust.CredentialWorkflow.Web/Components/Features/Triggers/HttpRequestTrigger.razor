@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Triggers
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using Blocktrust.CredentialWorkflow.Core.Domain.Enums
@using System.Text.RegularExpressions

<div class="p-4 text-sm">
    @if (showToast)
    {
        <div
            class="fixed top-4 right-4 bg-slate-800 text-white px-4 py-2 rounded-lg shadow-lg transition-opacity duration-500 @(showToast ? "opacity-100" : "opacity-0")">
            @toastMessage
        </div>
    }

    <div class="space-y-3">
        <div>
            <label class="block text-xs font-medium text-gray-700">Trigger Configuration</label>
        </div>

        <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Method</label>
            <select class="w-full rounded-md border border-gray-300 px-2 py-1 text-sm"
                    @bind="TriggerInput.Method"
                    @bind:after="OnInputChanged">
                <option value="GET">GET</option>
                <option value="POST">POST</option>
            </select>
        </div>

        <!-- Parameter Section -->
        <div class="border-t pt-3">
            <div class="flex justify-between items-center mb-2">
                <h4 class="text-sm font-medium">Parameters</h4>
            </div>

            <!-- Custom Parameters -->
            @foreach (var param in httpQueryParameters)
            {
                <div class="p-2 border rounded-md mb-2">
                    @if (!string.IsNullOrEmpty(param.ValidationError))
                    {
                        <p class="text-red-500 text-xs mb-1">@param.ValidationError</p>
                    }
                    <div class="flex items-center justify-between mb-1">
                        <input type="text"
                               class="rounded border px-2 py-1 text-xs w-1/2"
                               placeholder="Parameter name"
                               @bind="param.Name"
                               @bind:event="oninput"
                               @bind:after="UpdateParameters"
                               disabled="@param.Required" />

                        <select class="rounded border px-2 py-1 text-xs w-1/3"
                                @bind="param.Type"
                                @bind:after="UpdateParameters"
                                disabled="@param.Required">
                            <option value="string">string</option>
                            <option value="number">number</option>
                            <option value="boolean">boolean</option>
                        </select>
                        <button class="text-red-500 hover:text-red-700 px-2"
                                @onclick="() => RemoveParameter(param)">
                            <span class="material-symbols-outlined text-sm">delete</span>
                        </button>
                    </div>
                    @if (!string.IsNullOrEmpty(param.Description))
                    {
                        <p class="text-xs text-gray-500">@param.Description</p>
                    }
                </div>
            }

            <!-- Add Parameter Button -->
            <button
                class="w-full mt-2 bg-slate-700 hover:bg-slate-600 text-white text-xs py-1 px-2 rounded transition-colors duration-200 flex items-center justify-center"
                @onclick="AddParameter">
                <span class="material-symbols-outlined text-sm mr-1">add</span>
                Add Parameter
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public TriggerInputHttpRequest TriggerInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }

    private ECredentialType selectedCredentialType = ECredentialType.W3cCredential;
    private string schemaId = "";
    private string? toastMessage;
    private bool showToast;
    private List<HttpQueryParameters> httpQueryParameters = new();
    private bool areParametersValid = true; // Track overall validity, including delivery destination
    private string deliveryValidationError = "";

    private class HttpQueryParameters
    {
        public string Name { get; set; } = "";
        public string Type { get; set; } = "string";
        public string? Description { get; set; }
        public bool Required { get; set; }
        public string ValidationError { get; set; } = "";
    }

    protected override void OnInitialized()
    {
        InitializeParameters();
    }

    private void InitializeParameters()
    {
        foreach (var param in TriggerInput.Parameters)
        {
            httpQueryParameters.Add(new HttpQueryParameters
            {
                Name = param.Key,
                Type = param.Value.Type.ToString().ToLower(),
                Description = param.Value.Description,
                Required = param.Value.Required
            });
        }
    }

    private async Task OnInputChanged()
    {
        await OnChange.InvokeAsync();
    }

    private async Task AddParameter()
    {
        var param = new HttpQueryParameters();
        httpQueryParameters.Add(param);
        await UpdateParameters();
        StateHasChanged();
    }

    private async Task RemoveParameter(HttpQueryParameters param)
    {
        httpQueryParameters.Remove(param);
        await UpdateParameters();
        StateHasChanged();
    }

    private async Task UpdateParameters()
    {
        areParametersValid = true;
        deliveryValidationError = "";

        var existingKeys = TriggerInput.Parameters.Keys.ToList();
        foreach (var key in existingKeys)
        {
            TriggerInput.Parameters.Remove(key);
        }

        var nameValidationRegex = new Regex("^[a-zA-Z]+$"); // Updated to allow uppercase

        foreach (var param in httpQueryParameters)
        {
            param.ValidationError = "";

            if (string.IsNullOrEmpty(param.Name))
            {
                param.ValidationError = "Parameter name cannot be empty.";
                areParametersValid = false;
            }
            else
            {
                if (!nameValidationRegex.IsMatch(param.Name))
                {
                    param.ValidationError = "Parameter name must contain only letters (a-z, A-Z).";
                    areParametersValid = false;
                }
                else
                {
                    TriggerInput.Parameters[param.Name] = new ParameterDefinition
                    {
                        Type = Enum.Parse<ParameterType>(param.Type, true),
                        Description = $"Custom parameter: {param.Name}",
                        Required = param.Required
                    };
                }
            }
        }

        await OnChange.InvokeAsync();
    }

    private async Task ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        showToast = false;
        StateHasChanged();
    }

}
