@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Triggers
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using Blocktrust.CredentialWorkflow.Core.Domain.Enums
@using Blocktrust.CredentialWorkflow.Web.Services
@using System.Text.RegularExpressions
@using System.Web
@inject NavigationManager NavigationManager
@inject ClipboardService ClipboardService

<div class="p-4 text-sm max-w-2xl">
    @if (showToast)
    {
        <div class="fixed top-4 right-4 bg-slate-800 text-white px-4 py-2 rounded-lg shadow-lg transition-opacity duration-500">
            @toastMessage
        </div>
    }

    <div class="space-y-4">
        <!-- Endpoint URL Section -->
        <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
            <div class="flex items-center justify-between mb-2">
                <div class="font-medium text-gray-900">Endpoint URL</div>
                <button @onclick="() => CopyToClipboard(FullUrl)"
                        class="text-gray-500 hover:text-gray-700 flex items-center text-xs shrink-0 ml-2">
                    <span class="material-symbols-outlined text-sm mr-1">content_copy</span>
                    Copy URL
                </button>
            </div>
            <div class="font-mono text-sm text-gray-600 overflow-hidden">
                <div class="break-all overflow-x-auto">
                    <span class="text-gray-500">@NavigationManager.BaseUri.TrimEnd('/')/api/workflow/</span>
                    <span class="font-semibold">@WorkflowId</span>
                </div>
            </div>
        </div>

        <!-- Method Selection -->
        <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Method</label>
            <select class="w-full rounded-md border border-gray-300 px-2 py-1 text-sm"
                    @bind="TriggerInput.Method"
                    @bind:after="OnInputChanged">
                <option value="GET">GET</option>
                <option value="POST">POST</option>
            </select>
        </div>

        <!-- Parameters Section -->
        <div class="pt-3 border-t">
            <div class="flex justify-between items-center mb-2">
                <div class="flex items-center">
                    <h4 class="text-sm font-medium mr-2">Parameters</h4>
                    <button @onclick="() => CopyToClipboard(JsonSchema)"
                            class="text-gray-500 hover:text-gray-700 flex items-center text-xs">
                        <span class="material-symbols-outlined text-sm mr-1">description</span>
                        Copy Schema
                    </button>
                </div>
            </div>

            <!-- Required Parameters (if any) -->
            @foreach (var param in Parameters.Where(p => p.IsRequired))
            {
                <div class="p-2 border rounded-md bg-gray-50 mb-2">
                    <div class="flex items-center justify-between gap-2">
                        <input type="text"
                               class="rounded border px-2 py-1 text-xs flex-1"
                               value="@param.Name"
                               disabled="true" />
                        <select class="rounded border px-2 py-1 text-xs w-24"
                                value="@param.Type"
                                disabled="true">
                            <option value="string">string</option>
                            <option value="number">number</option>
                            <option value="boolean">boolean</option>
                        </select>
                    </div>
                    <div class="mt-1 text-xs text-gray-500">@param.Description</div>
                </div>
            }

            <!-- Custom Parameters -->
            @foreach (var param in Parameters.Where(p => !p.IsRequired))
            {
                <div class="p-2 border rounded-md mb-2">
                    <div class="flex items-center justify-between gap-2">
                        <input type="text"
                               class="rounded border px-2 py-1 text-xs flex-1"
                               placeholder="Parameter name"
                               @bind="param.Name"
                               @bind:event="oninput"
                               @bind:after="() => ValidateAndUpdateParameters()" />
                        <select class="rounded border px-2 py-1 text-xs w-24"
                                @bind="param.Type"
                                @bind:after="() => ValidateAndUpdateParameters()">
                            <option value="string">string</option>
                            <option value="number">number</option>
                            <option value="boolean">boolean</option>
                        </select>
                        <button class="text-red-500 hover:text-red-700 shrink-0"
                                @onclick="() => RemoveParameter(param)">
                            <span class="material-symbols-outlined text-sm">delete</span>
                        </button>
                    </div>
                    @if (!string.IsNullOrEmpty(param.ValidationError))
                    {
                        <div class="mt-1 text-xs text-red-500">@param.ValidationError</div>
                    }
                </div>
            }

            <button class="w-full mt-2 bg-slate-700 hover:bg-slate-600 text-white text-xs py-1 px-2 rounded transition-colors duration-200 flex items-center justify-center"
                    @onclick="AddParameter">
                <span class="material-symbols-outlined text-sm mr-1">add</span>
                Add Parameter
            </button>
        </div>

        <!-- cURL Example -->
        <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
            <div class="flex items-center justify-between mb-2">
                <div class="font-medium text-gray-900">cURL Example</div>
                <button @onclick="() => CopyToClipboard(CurlCommand)"
                        class="text-gray-500 hover:text-gray-700 flex items-center text-xs shrink-0 ml-2">
                    <span class="material-symbols-outlined text-sm mr-1">content_copy</span>
                    Copy Command
                </button>
            </div>
            <pre class="font-mono text-sm text-gray-600 whitespace-pre-wrap break-all bg-white p-2 rounded">@CurlCommand</pre>
        </div>
    </div>
</div>

@code {
    [Parameter] public TriggerInputHttpRequest TriggerInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public Guid WorkflowId { get; set; }

    private string? toastMessage;
    private bool showToast;
    private List<ParameterData> Parameters { get; set; } = new();
    private int paramCounter = 0;

    private string FullUrl => $"{NavigationManager.BaseUri.TrimEnd('/')}/api/workflow/{WorkflowId}";

    protected override void OnInitialized()
    {
        InitializeParameters();
    }

    protected override void OnParametersSet()
    {
        InitializeParameters();
    }

    private void InitializeParameters()
    {
        Parameters.Clear();
        foreach (var param in TriggerInput.Parameters)
        {
            Parameters.Add(new ParameterData
            {
                Name = param.Key,
                Type = param.Value.Type.ToString().ToLower(),
                Description = param.Value.Description,
                IsRequired = param.Value.Required
            });
        }
        UpdateParamCounter();
    }

    private void UpdateParamCounter()
    {
        paramCounter = Parameters
            .Select(p => p.Name)
            .Where(name => name.StartsWith("param"))
            .Select(name => name.Replace("param", ""))
            .Where(num => int.TryParse(num, out _))
            .Select(num => int.Parse(num))
            .DefaultIfEmpty(0)
            .Max() + 1;
    }

    private async Task OnInputChanged()
    {
        await ValidateAndUpdateParameters();
    }

    private void AddParameter()
    {
        Parameters.Add(new ParameterData 
        { 
            Name = $"param{paramCounter++}",
            Type = "string",
            IsRequired = false
        });
        StateHasChanged();
    }

    private async Task RemoveParameter(ParameterData param)
    {
        if (!param.IsRequired)
        {
            Parameters.Remove(param);
            await ValidateAndUpdateParameters();
        }
    }

    private async Task ValidateAndUpdateParameters()
    {
        // Clear existing parameters
        var existingKeys = TriggerInput.Parameters.Keys.ToList();
        foreach (var key in existingKeys)
        {
            TriggerInput.Parameters.Remove(key);
        }

        // Validate and update parameters
        var nameValidationRegex = new Regex("^[a-zA-Z][a-zA-Z0-9]*$");
        bool hasChanges = false;

        foreach (var param in Parameters)
        {
            param.ValidationError = null;

            if (string.IsNullOrWhiteSpace(param.Name))
            {
                param.ValidationError = "Parameter name cannot be empty";
                continue;
            }

            if (!nameValidationRegex.IsMatch(param.Name))
            {
                param.ValidationError = "Parameter name must start with a letter and contain only letters and numbers";
                continue;
            }

            if (Parameters.Count(p => p.Name == param.Name) > 1)
            {
                param.ValidationError = "Parameter name must be unique";
                continue;
            }

            TriggerInput.Parameters[param.Name] = new ParameterDefinition
            {
                Type = Enum.Parse<ParameterType>(param.Type, true),
                Description = param.Description ?? $"Parameter: {param.Name}",
                Required = param.IsRequired
            };
            hasChanges = true;
        }

        if (hasChanges)
        {
            await OnChange.InvokeAsync();
        }
    }

    private string CurlCommand
    {
        get
        {
            var command = $"curl -X {TriggerInput.Method} \"{FullUrl}\"";

            var parameters = Parameters.Where(p => p.IsRequired);
            if (!parameters.Any()) return command;

            if (TriggerInput.Method == "GET")
            {
                var queryParams = parameters.Select(p => $"{p.Name}={HttpUtility.UrlEncode($"example_{p.Name}")}");
                command += $"?{string.Join("&", queryParams)}";
            }
            else if (TriggerInput.Method == "POST")
            {
                command += " \\\n    -H \"Content-Type: application/json\"";
                var body = parameters.ToDictionary(p => p.Name, p => $"example_{p.Name}");
                var jsonBody = System.Text.Json.JsonSerializer.Serialize(body, new System.Text.Json.JsonSerializerOptions
                {
                    WriteIndented = true
                });
                command += $" \\\n    -d '{jsonBody}'";
            }

            return command;
        }
    }

    private string JsonSchema
    {
        get
        {
            var schema = new
            {
                type = "object",
                required = Parameters.Where(p => p.IsRequired).Select(p => p.Name).ToList(),
                properties = Parameters.ToDictionary(
                    p => p.Name,
                    p => new
                    {
                        type = p.Type,
                        description = p.Description ?? $"Parameter: {p.Name}",
                        required = p.IsRequired
                    }
                )
            };

            return System.Text.Json.JsonSerializer.Serialize(schema, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });
        }
    }

    private async Task CopyToClipboard(string text)
    {
        await ClipboardService.CopyTextToClipboard(text);
        toastMessage = "Copied to clipboard!";
        showToast = true;
        StateHasChanged();
        await Task.Delay(2000);
        showToast = false;
        StateHasChanged();
    }

    private class ParameterData
    {
        public string Name { get; set; } = "";
        public string Type { get; set; } = "string";
        public string? Description { get; set; }
        public bool IsRequired { get; set; }
        public string? ValidationError { get; set; }
    }
}