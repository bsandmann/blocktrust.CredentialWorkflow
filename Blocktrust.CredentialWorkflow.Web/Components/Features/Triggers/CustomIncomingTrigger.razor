@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@namespace Blocktrust.CredentialWorkflow.Web.Components.Features.Triggers

<div class="p-4 text-sm">
    <div class="space-y-3">
        <div class="p-2 border rounded-md">
            <label class="block text-xs font-medium text-gray-700 mb-1">Endpoint</label>
            <input type="text" 
                   class="w-full rounded border px-2 py-1 text-xs"
                   @bind="TriggerInput.Endpoint"
                   @bind:after="OnValueChanged" />
        </div>

        <div class="p-2 border rounded-md">
            <label class="block text-xs font-medium text-gray-700 mb-1">Method</label>
            <select class="w-full rounded border px-2 py-1 text-xs"
                    @bind="TriggerInput.Method"
                    @bind:after="OnValueChanged">
                <option value="GET">GET</option>
                <option value="POST">POST</option>
                <option value="PUT">PUT</option>
                <option value="DELETE">DELETE</option>
            </select>
        </div>

        <div class="p-2 border rounded-md">
            <div class="flex items-center justify-between mb-2">
                <label class="block text-xs font-medium text-gray-700">Custom Validation</label>
                <div class="flex items-center">
                    <input type="checkbox" 
                           class="rounded border-gray-300"
                           @bind="TriggerInput.EnableCustomValidation"
                           @bind:after="OnValueChanged" />
                </div>
            </div>

            @if (TriggerInput.EnableCustomValidation)
            {
                <div class="mt-2 space-y-2">
                    @foreach (var rule in TriggerInput.ValidationRules)
                    {
                        <div class="flex items-center space-x-2">
                            <input type="text" 
                                   class="flex-1 rounded border px-2 py-1 text-xs"
                                   value="@rule.Key"
                                   @onchange="@(e => UpdateValidationKey(rule.Key, e.Value?.ToString() ?? string.Empty))" />
                            <input type="text" 
                                   class="flex-1 rounded border px-2 py-1 text-xs"
                                   @bind="TriggerInput.ValidationRules[rule.Key]"
                                   @bind:after="OnValueChanged" />
                            <button class="text-red-500 hover:text-red-700"
                                    @onclick="() => RemoveValidationRule(rule.Key)">
                                <span class="material-symbols-outlined text-sm">delete</span>
                            </button>
                        </div>
                    }
                    <button class="w-full text-xs bg-slate-700 hover:bg-slate-600 text-white px-2 py-1 rounded transition-colors duration-200"
                            @onclick="AddValidationRule">
                        Add Validation Rule
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public TriggerInputCustomIncoming TriggerInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }

    private async Task OnValueChanged()
    {
        await OnChange.InvokeAsync();
    }

    private async Task AddValidationRule()
    {
        var ruleName = $"rule{TriggerInput.ValidationRules.Count + 1}";
        TriggerInput.ValidationRules[ruleName] = "";
        await OnChange.InvokeAsync();
    }

    private async Task UpdateValidationKey(string oldKey, string newKey)
    {
        if (oldKey != newKey && !string.IsNullOrWhiteSpace(newKey))
        {
            var value = TriggerInput.ValidationRules[oldKey];
            TriggerInput.ValidationRules.Remove(oldKey);
            TriggerInput.ValidationRules[newKey] = value;
            await OnChange.InvokeAsync();
        }
    }

    private async Task RemoveValidationRule(string key)
    {
        TriggerInput.ValidationRules.Remove(key);
        await OnChange.InvokeAsync();
    }
}