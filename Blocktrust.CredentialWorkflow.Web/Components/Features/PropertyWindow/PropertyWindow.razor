@using WorkflowAction = Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Action
@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Issuance
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Outgoing
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Actions.Verification
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Triggers.HttpRequestsTemplates
@using Blocktrust.CredentialWorkflow.Core.Domain.Workflow

<div class="bg-white p-4 rounded-lg shadow-md">
    @if (SelectedItem == null)
    {
        <h3 class="text-lg font-medium text-gray-800 mb-6">Add Item</h3>

        <!-- Triggers Section -->
        <div class="mb-6">
            <div class="flex items-center mb-3">
                <span class="material-symbols-outlined text-gray-600 mr-2">touch_app</span>
                <h4 class="text-sm font-medium text-gray-700">Triggers</h4>
            </div>

            <div class="space-y-2 ml-8">
                <!-- Incoming Requests Group -->
                <MenuGroup Label="Incoming HTTP requests" Icon="http" IsExpanded="@_isIncomingRequestsExpanded"
                           OnToggle="@(() => ToggleGroup("incomingRequests"))">
                    <MenuButton Icon="description" Label="HTTP request for Credential Issuance"
                                OnClick="@(action => HandleItemClick(ETriggerType.HttpRequest, action, "credential-issuance"))"
                                ShowAddButton="true"/>
                    <MenuButton Icon="verified" Label="HTTP request for Credential VerifyCredentials"
                                OnClick="@(action => HandleItemClick(ETriggerType.HttpRequest, action, "credential-verification"))"
                                ShowAddButton="true"/>
                    <MenuButton Icon="api" Label="Custom HTTP request"
                                OnClick="@(action => HandleItemClick(ETriggerType.HttpRequest, action))"
                                ShowAddButton="true"/>
                </MenuGroup>

                <!-- Timer Triggers Group -->
                <MenuGroup Label="Timer triggers" Icon="schedule" IsExpanded="@_isTimerTriggersExpanded"
                           OnToggle="@(() => ToggleGroup("timerTriggers"))">
                    <MenuButton Icon="update" Label="Recurring timer"
                                OnClick="@(action => HandleItemClick(ETriggerType.RecurringTimer, action))"
                                ShowAddButton="true"/>
                </MenuGroup>

                <!-- Manual Triggers Group -->
                <MenuGroup Label="Manual triggers" Icon="touch_app" IsExpanded="@_isManualTriggersExpanded"
                           OnToggle="@(() => ToggleGroup("manualTriggers"))">
                    <MenuButton Icon="account_balance_wallet" Label="Wallet Interaction"
                                OnClick="@(action => HandleItemClick(ETriggerType.WalletInteraction, action))"
                                ShowAddButton="true"/>
                    <MenuButton Icon="play_circle" Label="Manual triggering"
                                OnClick="@(action => HandleItemClick(ETriggerType.ManualTrigger, action))"
                                ShowAddButton="true"/>
                </MenuGroup>
            </div>
        </div>

        <!-- Actions Section -->
        <div class="mb-6">
            <div class="flex items-center mb-3">
                <span class="material-symbols-outlined text-gray-600 mr-2">smart_button</span>
                <h4 class="text-sm font-medium text-gray-700">Actions</h4>
            </div>

            <div class="space-y-2 ml-8">
                <!-- Issue Credential Group -->
                <MenuGroup Label="Issue credentials" Icon="verified" IsExpanded="@_isIssueCredentialExpanded"
                           OnToggle="@(() => ToggleGroup("issueCredential"))">
                    <MenuButton Icon="badge" Label="W3C VC"
                                OnClick="@(action => HandleItemClick(EActionType.IssueW3CCredential, action))"
                                ShowAddButton="true"/>
                    <MenuButton Icon="verified_user" Label="W3C SD-VC"
                                OnClick="@(action => HandleItemClick(EActionType.IssueW3CSdCredential, action))"
                                ShowAddButton="true"/>
                    <MenuButton Icon="fingerprint" Label="Anoncred"
                                OnClick="@(action => HandleItemClick(EActionType.IssueAnoncredCredential, action))"
                                ShowAddButton="true"/>
                </MenuGroup>

                <!-- Verify Credential Group -->
                <MenuGroup Label="Verify credentials" Icon="fact_check" IsExpanded="@_isVerifyCredentialExpanded"
                           OnToggle="@(() => ToggleGroup("verifyCredential"))">
                    <MenuButton Icon="verified" Label="Verify W3C VC"
                                OnClick="@(action => HandleItemClick(EActionType.VerifyW3CCredential, action))"
                                ShowAddButton="true"/>
                    <MenuButton Icon="verified_user" Label="Verify W3C SD-VC"
                                OnClick="@(action => HandleItemClick(EActionType.VerifyW3CSdCredential, action))"
                                ShowAddButton="true"/>
                    <MenuButton Icon="fingerprint" Label="Verify Anoncred"
                                OnClick="@(action => HandleItemClick(EActionType.VerifyAnoncredCredential, action))"
                                ShowAddButton="true"/>
                </MenuGroup>

                <!-- Outgoing Request Group -->
                <MenuGroup Label="Communication" Icon="send" IsExpanded="@_isOutgoingRequestExpanded"
                           OnToggle="@(() => ToggleGroup("outgoingRequest"))">
                    <MenuButton Icon="message" Label="DIDComm"
                                OnClick="@(action => HandleItemClick(EActionType.DIDComm, action))"
                                ShowAddButton="true"/>
                    <MenuButton Icon="http" Label="HTTP Request"
                                OnClick="@(action => HandleItemClick(EActionType.Http, action))"
                                ShowAddButton="true"/>
                    <MenuButton Icon="mail" Label="Email"
                                OnClick="@(action => HandleItemClick(EActionType.Email, action))"
                                ShowAddButton="true"/>
                </MenuGroup>
            </div>
        </div>
    }
    else
    {
        <PropertyEditor
            Item="@SelectedItem"
            OnBack="@(() => SelectItem(null))"
            OnChange="@OnChange"
            TriggerParameters="@GetTriggerParameters()"/>
    }

    @if (_showError)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div class="bg-white rounded-lg p-6 max-w-md">
                <h3 class="text-xl font-bold mb-4">Warning</h3>
                <p class="text-gray-700 mb-6">@_errorMessage</p>
                <button
                    class="bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded transition-colors duration-200"
                    @onclick="CloseError">
                    OK
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public object? SelectedItem { get; set; }
    [Parameter] public EventCallback<object> OnItemCreated { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public List<object> FlowItems { get; set; } = new();

    private string? _errorMessage;
    private bool _showError;
    private bool _isIncomingRequestsExpanded = true;
    private bool _isTimerTriggersExpanded;
    private bool _isManualTriggersExpanded;
    private bool _isIssueCredentialExpanded;
    private bool _isVerifyCredentialExpanded;
    private bool _isOutgoingRequestExpanded;

    private bool HasActions => FlowItems.Any(x => x is WorkflowAction);
    private bool HasOutcome => FlowItems.Any(x => x is WorkflowOutcome);

    private void ToggleGroup(string group)
    {
        switch (group)
        {
            case "incomingRequests":
                _isIncomingRequestsExpanded = !_isIncomingRequestsExpanded;
                break;
            case "timerTriggers":
                _isTimerTriggersExpanded = !_isTimerTriggersExpanded;
                break;
            case "manualTriggers":
                _isManualTriggersExpanded = !_isManualTriggersExpanded;
                break;
            case "issueCredential":
                _isIssueCredentialExpanded = !_isIssueCredentialExpanded;
                break;
            case "verifyCredential":
                _isVerifyCredentialExpanded = !_isVerifyCredentialExpanded;
                break;
            case "outgoingRequest":
                _isOutgoingRequestExpanded = !_isOutgoingRequestExpanded;
                break;
        }
    }

    private object CreateNewItem(object itemType, string template)
    {
        try
        {
            return itemType switch
            {
                ETriggerType triggerType => CreateNewTrigger(triggerType, template),
                EActionType actionType => CreateNewAction(actionType),
                _ => throw new ArgumentException("Invalid item type")
            };
        }
        catch (Exception ex)
        {
            HandleError(ex.Message);
            throw;
        }
    }

    private WorkflowAction CreateNewAction(EActionType actionType)
    {
        return new WorkflowAction
        {
            Type = actionType,
            Input = actionType switch
            {
                EActionType.DIDComm => new DIDCommAction
                {
                    Id = Guid.NewGuid(),
                    Type = EDIDCommType.Message,
                    PeerDid = new ParameterReference { Source = ParameterSource.Static }
                },
                EActionType.Http => new HttpAction
                {
                    Id = Guid.NewGuid(),
                    Method = "POST",
                    Endpoint = new ParameterReference { Source = ParameterSource.Static }
                },
                EActionType.Email => new EmailAction
                {
                    Id = Guid.NewGuid(),
                    To = new ParameterReference { Source = ParameterSource.Static },
                    Subject = new ParameterReference { Source = ParameterSource.Static },
                    Body = new ParameterReference { Source = ParameterSource.Static }
                },
                EActionType.IssueW3CCredential => new IssueW3cCredential
                {
                    Id = Guid.NewGuid(),
                    SubjectDid = new ParameterReference
                    {
                        Source = ParameterSource.TriggerInput,
                        Path = "subjectDid"
                    },
                    IssuerDid = new ParameterReference
                    {
                        Source = ParameterSource.AppSettings,
                        Path = "DefaultIssuerDid"
                    },
                    Claims = new Dictionary<string, ClaimValue>()
                },
                EActionType.IssueW3CSdCredential => new IssueW3CSdCredential
                {
                    Id = Guid.NewGuid(),
                    SubjectDid = new ParameterReference
                    {
                        Source = ParameterSource.TriggerInput,
                        Path = "subjectDid"
                    },
                    IssuerDid = new ParameterReference
                    {
                        Source = ParameterSource.AppSettings,
                        Path = "DefaultIssuerDid"
                    },
                    Claims = new Dictionary<string, ClaimValue>()
                },
                EActionType.IssueAnoncredCredential => new IssueAnoncredCredential
                {
                    Id = Guid.NewGuid(),
                    SubjectDid = new ParameterReference
                    {
                        Source = ParameterSource.TriggerInput,
                        Path = "subjectDid"
                    },
                    IssuerDid = new ParameterReference
                    {
                        Source = ParameterSource.AppSettings,
                        Path = "DefaultIssuerDid"
                    },
                    CredentialDefinitionId = "",
                    Attributes = new Dictionary<string, ClaimValue>()
                },
                EActionType.VerifyW3CCredential => new VerifyW3cCredential
                {
                    Id = Guid.NewGuid(),
                    CheckSignature = true,
                    CheckStatus = true,
                    CheckSchema = true,
                    CheckExpiry = true,
                    CheckTrustRegistry = false
                },
                EActionType.VerifyW3CSdCredential => new VerifyW3cSdCredential
                {
                    Id = Guid.NewGuid(),
                    CheckSignature = true,
                    CheckStatus = true,
                    CheckSchema = true,
                    CheckExpiry = true,
                    CheckTrustRegistry = false
                },
                EActionType.VerifyAnoncredCredential => new VerifyAnoncredCredential
                {
                    Id = Guid.NewGuid(),
                    CheckSignature = true,
                    CheckStatus = true,
                    CheckSchema = true,
                    CheckExpiry = true,
                    CheckTrustRegistry = false
                },
                _ => throw new ArgumentException($"Action type {actionType} is not implemented.")
            },
            RunAfter = new Dictionary<Guid, List<EFlowStatus>>()
        };
    }

    private async Task HandleItemClick(object itemType, MenuButton.MenuButtonAction action, string? template = null)
    {
        var newItem = CreateNewItem(itemType, template);
        if (newItem != null)
        {
            await OnItemCreated.InvokeAsync(newItem);
            if (action == MenuButton.MenuButtonAction.Configure)
            {
                await SelectItem(newItem);
            }
        }
    }

    private async Task SelectItem(object? item)
    {
        SelectedItem = item;
        StateHasChanged();
    }

    private IEnumerable<string>? GetTriggerParameters()
    {
        var trigger = FlowItems.FirstOrDefault(x => x is Trigger) as Trigger;
        if (trigger?.Input is TriggerInputHttpRequest incomingRequest)
        {
            return incomingRequest.Parameters.Keys;
        }

        return null;
    }

    private async Task HandleError(string message)
    {
        _errorMessage = message;
        _showError = true;
        StateHasChanged();
    }

    private void CloseError()
    {
        _errorMessage = null;
        _showError = false;
        StateHasChanged();
    }

    private Trigger CreateNewTrigger(ETriggerType triggerType, string? template = null)
    {
        TriggerInput trigger;
        if (triggerType == ETriggerType.HttpRequest)
        {
            if (template == "credential-issuance")
            {
                trigger = new TriggerInputHttpRequest()
                {
                    Id = Guid.NewGuid(),
                    Method = "POST",
                    Parameters = HttpRequestTemplates.Templates["credential-issuance"].Parameters
                };
            }
            else if (template == "credential-verification")
            {
                trigger = new TriggerInputHttpRequest
                {
                    Id = Guid.NewGuid(),
                    Method = "POST",
                    Parameters = HttpRequestTemplates.Templates["credential-verification"].Parameters
                };
            }
            else
            {
                trigger = new TriggerInputHttpRequest
                {
                    Id = Guid.NewGuid(),
                    Method = "POST",
                    Parameters = new Dictionary<string, ParameterDefinition>()
                };
            }
        }
        else if (triggerType == ETriggerType.RecurringTimer)
        {
            trigger = new TriggerInputRecurringTimer
            {
                Id = Guid.NewGuid(),
                CronExpression = "*/15 * * * *"
            };
        }
        else if (triggerType == ETriggerType.WalletInteraction)
        {
            trigger = new TriggerInputWalletInteraction
            {
                Id = Guid.NewGuid(),
                WalletAction = "connect",
                RequiredParameters = new Dictionary<string, ParameterDefinition>()
            };
        }
        else if (triggerType == ETriggerType.ManualTrigger)
        {
            trigger = new TriggerInputManual
            {
                Id = Guid.NewGuid(),
                Description = "Manual trigger point",
                RequiredParameters = new Dictionary<string, ParameterDefinition>()
            };
        }
        else
        {
            throw new ArgumentException($"Trigger type {triggerType} is not implemented.");
        }


        return new Trigger
        {
            Type = triggerType,
            Input = trigger
        };
    }

}