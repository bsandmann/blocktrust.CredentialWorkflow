@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Trigger
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action
@using Blocktrust.CredentialWorkflow.Web.Components.Features.PropertyWindow.Trigger
@using Blocktrust.CredentialWorkflow.Web.Components.Features.PropertyWindow.Action
@using Blocktrust.CredentialWorkflow.Core.Domain.Common


<div class="bg-white p-4 rounded-lg shadow-md">
    @if (SelectedItem == null)
    {
        <h3 class="text-lg font-bold mb-2">Create new Action/Trigger</h3>
        <div class="mb-4">
            <h4 class="text-md font-semibold mb-2">Triggers:</h4>
            <ul class="list-disc list-inside">
                <li>
                    <button class="text-blue-500 hover:underline" @onclick="() => CreateNewItem(ETriggerType.IncomingRequest)">Incoming Request</button>
                </li>
                <li>
                    <button class="text-blue-500 hover:underline" @onclick="() => CreateNewItem(ETriggerType.RecurringTimer)">Recurring Timer</button>
                </li>
                <li>
                    <button class="text-blue-500 hover:underline" @onclick="() => CreateNewItem(ETriggerType.OnDemand)">On Demand</button>
                </li>
                <!-- TODO: Add other trigger types here -->
            </ul>
        </div>
        <div>
            <h4 class="text-md font-semibold mb-2">Actions:</h4>
            <ul class="list-disc list-inside">
                <li>
                    <button class="text-blue-500 hover:underline" @onclick="() => CreateNewItem(EActionType.CredentialIssuance)">Credential Issuance</button>
                </li>
                <li>
                    <button class="text-blue-500 hover:underline" @onclick="() => CreateNewItem(EActionType.OutgoingRequest)">Outgoing Request</button>
                </li>
                <li>
                    <button class="text-blue-500 hover:underline" @onclick="() => CreateNewItem(EActionType.CredentialVerification)">Credential Verification</button>
                </li>
                <!-- TODO: Add other action types here -->
            </ul>
        </div>
    }
    else if (SelectedItem is Core.Domain.ProcessFlow.Trigger.Trigger trigger)
    {
        <h3 class="text-lg font-bold mb-2">Trigger Properties</h3>
        <p>
            <strong>Type:</strong> @trigger.Type
        </p>
        @if (trigger.Input is TriggerInputIncomingRequest incomingRequest)
        {
            <IncomingRequestComponent TriggerInput="incomingRequest" OnChange="OnChange"/>
        }
        else if (trigger.Input is TriggerInputRecurringTimer recurringTimer)
        {
            <!-- TODO: Implement RecurringTimerComponent -->
            <p>Recurring Timer properties editing not yet implemented</p>
        }
        else if (trigger.Input is TriggerInputOnDemand onDemand)
        {
            <!-- TODO: Implement OnDemandComponent -->
            <p>On Demand properties editing not yet implemented</p>
        }
        <!-- TODO: Add other trigger types here -->
    }
    else if (SelectedItem is Core.Domain.ProcessFlow.Action.Action action)
    {
        <h3 class="text-lg font-bold mb-2">Action Properties</h3>
        <p>
            <strong>Type:</strong> @action.Type
        </p>
        @if (action.Input is ActionInputCredentialIssuance credentialIssuance)
        {
            <CredentialIssuanceComponent ActionInput="credentialIssuance" OnChange="OnChange"/>
        }
        else if (action.Input is ActionInputOutgoingRequest outgoingRequest)
        {
            <OutgoingRequestComponent ActionInput="outgoingRequest" OnChange="OnChange"/>
        }
        else if (action.Input is ActionInputCredentialVerification credentialVerification)
        {
            <!-- TODO: Implement CredentialVerificationComponent -->
            <p>Credential Verification properties editing not yet implemented</p>
        }
        <!-- TODO: Add other action types here -->
    }
</div>

@code {
    [Parameter] public object? SelectedItem { get; set; }
    [Parameter] public EventCallback<object> OnItemCreated { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }

    private async Task CreateNewItem(object itemType)
    {
        object newItem = itemType switch
        {
            ETriggerType triggerType => CreateNewTrigger(triggerType),
            EActionType actionType => CreateNewAction(actionType),
            _ => throw new ArgumentException("Invalid item type")
        };
        await OnItemCreated.InvokeAsync(newItem);
    }

    private Core.Domain.ProcessFlow.Trigger.Trigger CreateNewTrigger(ETriggerType triggerType)
    {
        return new Core.Domain.ProcessFlow.Trigger.Trigger
        {
            Type = triggerType,
            Input = triggerType switch
            {
                ETriggerType.IncomingRequest => new TriggerInputIncomingRequest
                {
                    Id = Guid.NewGuid(),
                    Method = "POST",
                    Endpoint = "/credentials/issue/{workflowId}",
                    Template = "credential-issuance",
                    Parameters = RequestTemplates.Templates["credential-issuance"].Parameters
                },
                ETriggerType.RecurringTimer => new TriggerInputRecurringTimer
                {
                    Id = Guid.NewGuid(),
                    TimeSpan = TimeSpan.FromHours(1)
                },
                ETriggerType.OnDemand => new TriggerInputOnDemand
                {
                    Id = Guid.NewGuid()
                },
                _ => throw new NotImplementedException($"Trigger type {triggerType} is not implemented.")
            }
        };
    }
    private Core.Domain.ProcessFlow.Action.Action CreateNewAction(EActionType actionType)
    {
        return new Core.Domain.ProcessFlow.Action.Action
        {
            Type = actionType,
            Input = actionType switch
            {
                EActionType.CredentialIssuance => new ActionInputCredentialIssuance
                {
                    Id = Guid.NewGuid(),
                    SubjectDid = new ParameterReference
                    {
                        Source = ParameterSource.TriggerInput,
                        Path = "subjectDid",
                        DefaultValue = ""
                    },
                    IssuerDid = new ParameterReference
                    {
                        Source = ParameterSource.AppSettings,
                        Path = "DefaultIssuerDid",
                        DefaultValue = ""
                    },
                    Claims = new Dictionary<string, ClaimValue>()
                },
                EActionType.OutgoingRequest => new ActionInputOutgoingRequest
                {
                    Id = Guid.NewGuid(),
                    Method = "GET",
                    Uri = "https://example.com/api",
                    Body = "",
                    Headers = new Dictionary<string, string>()
                },
                EActionType.CredentialVerification => new ActionInputCredentialVerification
                {
                    Id = Guid.NewGuid(),
                    CheckExpiration = true,
                    CheckSignature = true,
                    CheckIssuer = false,
                    RequiredIssuer = null,
                    CheckSchema = false,
                    RequiredSchema = null,
                    CheckClaims = false,
                    RequiredClaims = new Dictionary<string, string>()
                },
                _ => throw new NotImplementedException($"Action type {actionType} is not implemented.")
            },
            RunAfter = new Dictionary<Guid, List<EFlowStatus>>()
        };
    }    

}