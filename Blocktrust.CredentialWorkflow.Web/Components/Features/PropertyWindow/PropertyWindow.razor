@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Trigger
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Outcome
@using Blocktrust.CredentialWorkflow.Web.Components.Features.PropertyWindow.Trigger
@using Blocktrust.CredentialWorkflow.Web.Components.Features.PropertyWindow.Action
@using Blocktrust.CredentialWorkflow.Web.Components.Features.PropertyWindow.Trigger.IncomingRequests
@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@using WorkflowAction = Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action.Action

<div class="bg-white p-4 rounded-lg shadow-md">
    @if (SelectedItem == null)
    {
        <h3 class="text-lg font-medium text-gray-800 mb-6">Create new Action/Trigger</h3>

        <!-- Triggers Section -->
        <div class="mb-6">
            <div class="flex items-center mb-3">
                <span class="material-symbols-outlined text-gray-600 mr-2">touch_app</span>
                <h4 class="text-sm font-medium text-gray-700">Triggers</h4>
            </div>

            <div class="space-y-2 ml-8">
                <!-- Incoming Requests Group -->
                <div>
                    <div class="flex items-center text-sm text-gray-600">
                        <span class="material-symbols-outlined mr-2">http</span>
                        Incoming requests
                    </div>
                    <div class="ml-6 space-y-1 mt-1">
                        <MenuButton Icon="description" Label="Credential Issuance" OnClick="@(() => CreateNewItem(ETriggerType.IncomingRequest))" ShowAddButton="true" />
                        <MenuButton Icon="verified" Label="Credential Verification" OnClick="@(() => CreateNewItem(ETriggerType.IncomingRequest))" ShowAddButton="true" />
                    </div>
                </div>

                <MenuButton Icon="schedule" Label="Recurring timer" OnClick="@(() => CreateNewItem(ETriggerType.RecurringTimer))" />
                <MenuButton Icon="play_circle" Label="On demand" OnClick="@(() => CreateNewItem(ETriggerType.OnDemand))" />
            </div>
        </div>

        <!-- Actions Section -->
        <div class="mb-6">
            <div class="flex items-center mb-3">
                <span class="material-symbols-outlined text-gray-600 mr-2">smart_button</span>
                <h4 class="text-sm font-medium text-gray-700">Actions</h4>
            </div>

            <div class="space-y-2 ml-8">
                <!-- Issue Credential Group -->
                <MenuGroup Label="Issue credential" Icon="add_card" IsExpanded="@isIssueCredentialExpanded" OnToggle="@(() => ToggleGroup("issueCredential"))">
                    <MenuButton Icon="create" Label="Create credential" OnClick="@(() => CreateNewItem(EActionType.CredentialIssuance))" ShowAddButton="true" />
                    <MenuButton Icon="draw" Label="Sign credential" OnClick="@(() => CreateNewItem(EActionType.CredentialIssuance))" ShowAddButton="true" />
                </MenuGroup>

                <!-- Verify Credential Group -->
                <MenuGroup Label="Verify credential" Icon="verified_user" IsExpanded="@isVerifyCredentialExpanded" OnToggle="@(() => ToggleGroup("verifyCredential"))">
                    <MenuButton Icon="check" Label="Check signature" OnClick="@(() => CreateNewItem(EActionType.CredentialVerification))" ShowAddButton="true" />
                    <MenuButton Icon="schedule" Label="Check expiry" OnClick="@(() => CreateNewItem(EActionType.CredentialVerification))" ShowAddButton="true" />
                    <MenuButton Icon="block" Label="Check revocation" OnClick="@(() => CreateNewItem(EActionType.CredentialVerification))" ShowAddButton="true" />
                    <MenuButton Icon="verified" Label="Check trust registry" OnClick="@(() => CreateNewItem(EActionType.CredentialVerification))" ShowAddButton="true" />
                </MenuGroup>

                <!-- Outgoing Request Group -->
                <MenuGroup Label="Outgoing request" Icon="send" IsExpanded="@isOutgoingRequestExpanded" OnToggle="@(() => ToggleGroup("outgoingRequest"))">
                    <MenuButton Icon="swap_horiz" Label="DIDComm trust ping" OnClick="@(() => CreateNewItem(EActionType.OutgoingRequest))" ShowAddButton="true" />
                    <MenuButton Icon="message" Label="DIDComm message" OnClick="@(() => CreateNewItem(EActionType.OutgoingRequest))" ShowAddButton="true" />
                    <MenuButton Icon="http" Label="HTTP Post" OnClick="@(() => CreateNewItem(EActionType.OutgoingRequest))" ShowAddButton="true" />
                    <MenuButton Icon="mail" Label="Send email" OnClick="@(() => CreateNewItem(EActionType.OutgoingRequest))" ShowAddButton="true" />
                </MenuGroup>
            </div>
        </div>

        <!-- Outcome Section -->
        @if (hasActions && !hasOutcome)
        {
            <div class="mb-6">
                <div class="flex items-center mb-3">
                    <span class="material-symbols-outlined text-gray-600 mr-2">flag</span>
                    <h4 class="text-sm font-medium text-gray-700">Outcome</h4>
                </div>

                <div class="space-y-2 ml-8">
                    <MenuButton Icon="post_add" Label="Post outcome" OnClick="@CreateNewOutcome" ShowAddButton="true" />
                    <MenuButton Icon="note_add" Label="Log outcome" OnClick="@CreateNewOutcome" ShowAddButton="true" />
                </div>
            </div>
        }
    }
    else
    {
        <PropertyEditor Item="@SelectedItem" OnChange="@OnChange" TriggerParameters="@GetTriggerParameters()" />
    }
</div>

@code {
    
    [Parameter] public object? SelectedItem { get; set; }
    [Parameter] public EventCallback<object> OnItemCreated { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public List<object> flowItems { get; set; } = new();

    private bool isIssueCredentialExpanded;
    private bool isVerifyCredentialExpanded;
    private bool isOutgoingRequestExpanded;

    private bool hasActions => flowItems.Any(x => x is WorkflowAction);
    private bool hasOutcome => flowItems.Any(x => x is WorkflowOutcomeDefinition);

    private void ToggleGroup(string group)
    {
        switch (group)
        {
            case "issueCredential":
                isIssueCredentialExpanded = !isIssueCredentialExpanded;
                break;
            case "verifyCredential":
                isVerifyCredentialExpanded = !isVerifyCredentialExpanded;
                break;
            case "outgoingRequest":
                isOutgoingRequestExpanded = !isOutgoingRequestExpanded;
                break;
        }
    }

    private async Task HandleItemClick(object itemType, bool addOnly)
    {
        var newItem = CreateNewItem(itemType);
        await OnItemCreated.InvokeAsync(newItem);
        
        if (!addOnly)
        {
            // Set selected item to show configuration
            SelectedItem = newItem;
        }
    }

    private IEnumerable<string>? GetTriggerParameters()
    {
        var trigger = flowItems.FirstOrDefault(x => x is Core.Domain.ProcessFlow.Trigger.Trigger) as Core.Domain.ProcessFlow.Trigger.Trigger;
        if (trigger?.Input is TriggerInputIncomingRequest incomingRequest)
        {
            return incomingRequest.Parameters.Keys;
        }
        return null;
    }

    private async Task CreateNewItem(object itemType)
    {
        object newItem = itemType switch
        {
            ETriggerType triggerType => CreateNewTrigger(triggerType),
            EActionType actionType => CreateNewAction(actionType),
            _ => throw new ArgumentException("Invalid item type")
        };
        await OnItemCreated.InvokeAsync(newItem);
    }

    private async Task CreateNewOutcome()
    {
        var outcome = new WorkflowOutcomeDefinition
        {
            Type = EOutcomeType.Success,
            Message = "Workflow completed successfully"
        };
        await OnItemCreated.InvokeAsync(outcome);
    }

    private Core.Domain.ProcessFlow.Trigger.Trigger CreateNewTrigger(ETriggerType triggerType)
    {
        return new Core.Domain.ProcessFlow.Trigger.Trigger
        {
            Type = triggerType,
            Input = triggerType switch
            {
                ETriggerType.IncomingRequest => new TriggerInputIncomingRequest
                {
                    Id = Guid.NewGuid(),
                    Method = "POST",
                    Endpoint = "/credentials/issue/{workflowId}",
                    Template = "credential-issuance",
                    Parameters = RequestTemplates.Templates["credential-issuance"].Parameters
                },
                ETriggerType.RecurringTimer => new TriggerInputRecurringTimer
                {
                    Id = Guid.NewGuid(),
                    TimeSpan = TimeSpan.FromHours(1)
                },
                ETriggerType.OnDemand => new TriggerInputOnDemand
                {
                    Id = Guid.NewGuid()
                },
                _ => throw new NotImplementedException($"Trigger type {triggerType} is not implemented.")
            }
        };
    }

    private WorkflowAction CreateNewAction(EActionType actionType)
    {
        return new WorkflowAction
        {
            Type = actionType,
            Input = actionType switch
            {
                EActionType.CredentialIssuance => new ActionInputCredentialIssuance
                {
                    Id = Guid.NewGuid(),
                    SubjectDid = new ParameterReference
                    {
                        Source = ParameterSource.TriggerInput,
                        Path = "subjectDid",
                        DefaultValue = ""
                    },
                    IssuerDid = new ParameterReference
                    {
                        Source = ParameterSource.AppSettings,
                        Path = "DefaultIssuerDid",
                        DefaultValue = ""
                    },
                    Claims = new Dictionary<string, ClaimValue>()
                },
                EActionType.OutgoingRequest => new ActionInputOutgoingRequest
                {
                    Id = Guid.NewGuid(),
                    Method = "GET",
                    Uri = "https://example.com/api",
                    Body = "",
                    Headers = new Dictionary<string, string>()
                },
                EActionType.CredentialVerification => new ActionInputCredentialVerification
                {
                    Id = Guid.NewGuid(),
                    CheckExpiration = true,
                    CheckSignature = true,
                    CheckIssuer = false,
                    RequiredIssuer = null,
                    CheckSchema = false,
                    RequiredSchema = null,
                    CheckClaims = false,
                    RequiredClaims = new Dictionary<string, string>()
                },
                _ => throw new NotImplementedException($"Action type {actionType} is not implemented.")
            },
            RunAfter = new Dictionary<Guid, List<EFlowStatus>>()
        };
    }
}