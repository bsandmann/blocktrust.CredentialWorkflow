@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Trigger
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Outcome
@using Blocktrust.CredentialWorkflow.Web.Components.Features.PropertyWindow.Trigger
@using Blocktrust.CredentialWorkflow.Web.Components.Features.PropertyWindow.Action
@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@using WorkflowAction = Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action.Action

<div class="bg-white p-4 rounded-lg shadow-md">
    @if (SelectedItem == null)
    {
        <h3 class="text-lg font-bold mb-2">Create new Action/Trigger</h3>
        <div class="mb-4">
            <h4 class="text-md font-semibold mb-2">Triggers:</h4>
            <ul class="list-disc list-inside">
                <li>
                    <button class="text-blue-500 hover:underline" @onclick="() => CreateNewItem(ETriggerType.IncomingRequest)">Incoming Request</button>
                </li>
                <li>
                    <button class="text-blue-500 hover:underline" @onclick="() => CreateNewItem(ETriggerType.RecurringTimer)">Recurring Timer</button>
                </li>
                <li>
                    <button class="text-blue-500 hover:underline" @onclick="() => CreateNewItem(ETriggerType.OnDemand)">On Demand</button>
                </li>
            </ul>
        </div>
        <div class="mb-4">
            <h4 class="text-md font-semibold mb-2">Actions:</h4>
            <ul class="list-disc list-inside">
                <li>
                    <button class="text-blue-500 hover:underline" @onclick="() => CreateNewItem(EActionType.CredentialIssuance)">Credential Issuance</button>
                </li>
                <li>
                    <button class="text-blue-500 hover:underline" @onclick="() => CreateNewItem(EActionType.OutgoingRequest)">Outgoing Request</button>
                </li>
                <li>
                    <button class="text-blue-500 hover:underline" @onclick="() => CreateNewItem(EActionType.CredentialVerification)">Credential Verification</button>
                </li>
            </ul>
        </div>
        @if (hasActions && !hasOutcome)
        {
            <div>
                <h4 class="text-md font-semibold mb-2">Outcome:</h4>
                <ul class="list-disc list-inside">
                    <li>
                        <button class="text-blue-500 hover:underline" @onclick="CreateNewOutcome">Add Workflow Outcome</button>
                    </li>
                </ul>
            </div>
        }
    }
    else if (SelectedItem is Core.Domain.ProcessFlow.Trigger.Trigger trigger)
    {
        <h3 class="text-lg font-bold mb-2">Trigger Properties</h3>
        <p>
            <strong>Type:</strong> @trigger.Type
        </p>
        @if (trigger.Input is TriggerInputIncomingRequest incomingRequest)
        {
            <IncomingRequestComponent TriggerInput="incomingRequest" OnChange="OnChange"/>
        }
        else if (trigger.Input is TriggerInputRecurringTimer recurringTimer)
        {
            <div class="text-yellow-600">Recurring Timer properties editing not yet implemented</div>
        }
        else if (trigger.Input is TriggerInputOnDemand onDemand)
        {
            <div class="text-yellow-600">On Demand properties editing not yet implemented</div>
        }
    }
    else if (SelectedItem is WorkflowAction action)
    {
        <h3 class="text-lg font-bold mb-2">Action Properties</h3>
        <p>
            <strong>Type:</strong> @action.Type
        </p>
        @if (action.Input is ActionInputCredentialIssuance credentialIssuance)
        {
            <CredentialIssuanceComponent ActionInput="credentialIssuance" OnChange="OnChange"/>
        }
        else if (action.Input is ActionInputOutgoingRequest outgoingRequest)
        {
            <OutgoingRequestComponent ActionInput="outgoingRequest" OnChange="OnChange"/>
        }
        else if (action.Input is ActionInputCredentialVerification credentialVerification)
        {
            <div class="text-yellow-600">Credential Verification properties editing not yet implemented</div>
        }
    }
    else if (SelectedItem is WorkflowOutcomeDefinition outcome)
    {
        <h3 class="text-lg font-bold mb-2">Outcome Properties</h3>
        <WorkflowOutcomePropertyEditor Definition="outcome" OnChange="OnChange" />
    }
</div>

@code {
    [Parameter] public object? SelectedItem { get; set; }
    [Parameter] public EventCallback<object> OnItemCreated { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public List<object> flowItems { get; set; } = new();
    
    private bool hasActions => flowItems.Any(x => x is WorkflowAction);
    private bool hasOutcome => flowItems.Any(x => x is WorkflowOutcomeDefinition);

    private async Task CreateNewItem(object itemType)
    {
        object newItem = itemType switch
        {
            ETriggerType triggerType => CreateNewTrigger(triggerType),
            EActionType actionType => CreateNewAction(actionType),
            _ => throw new ArgumentException("Invalid item type")
        };
        await OnItemCreated.InvokeAsync(newItem);
    }

    private async Task CreateNewOutcome()
    {
        var outcome = new WorkflowOutcomeDefinition
        {
            Type = EOutcomeType.Success,
            Message = "Workflow completed successfully"
        };
        await OnItemCreated.InvokeAsync(outcome);
    }

    private Core.Domain.ProcessFlow.Trigger.Trigger CreateNewTrigger(ETriggerType triggerType)
    {
        return new Core.Domain.ProcessFlow.Trigger.Trigger
        {
            Type = triggerType,
            Input = triggerType switch
            {
                ETriggerType.IncomingRequest => new TriggerInputIncomingRequest
                {
                    Id = Guid.NewGuid(),
                    Method = "POST",
                    Endpoint = "/credentials/issue/{workflowId}",
                    Template = "credential-issuance",
                    Parameters = RequestTemplates.Templates["credential-issuance"].Parameters
                },
                ETriggerType.RecurringTimer => new TriggerInputRecurringTimer
                {
                    Id = Guid.NewGuid(),
                    TimeSpan = TimeSpan.FromHours(1)
                },
                ETriggerType.OnDemand => new TriggerInputOnDemand
                {
                    Id = Guid.NewGuid()
                },
                _ => throw new NotImplementedException($"Trigger type {triggerType} is not implemented.")
            }
        };
    }

    private WorkflowAction CreateNewAction(EActionType actionType)
    {
        return new WorkflowAction
        {
            Type = actionType,
            Input = actionType switch
            {
                EActionType.CredentialIssuance => new ActionInputCredentialIssuance
                {
                    Id = Guid.NewGuid(),
                    SubjectDid = new ParameterReference
                    {
                        Source = ParameterSource.TriggerInput,
                        Path = "subjectDid",
                        DefaultValue = ""
                    },
                    IssuerDid = new ParameterReference
                    {
                        Source = ParameterSource.AppSettings,
                        Path = "DefaultIssuerDid",
                        DefaultValue = ""
                    },
                    Claims = new Dictionary<string, ClaimValue>()
                },
                EActionType.OutgoingRequest => new ActionInputOutgoingRequest
                {
                    Id = Guid.NewGuid(),
                    Method = "GET",
                    Uri = "https://example.com/api",
                    Body = "",
                    Headers = new Dictionary<string, string>()
                },
                EActionType.CredentialVerification => new ActionInputCredentialVerification
                {
                    Id = Guid.NewGuid(),
                    CheckExpiration = true,
                    CheckSignature = true,
                    CheckIssuer = false,
                    RequiredIssuer = null,
                    CheckSchema = false,
                    RequiredSchema = null,
                    CheckClaims = false,
                    RequiredClaims = new Dictionary<string, string>()
                },
                _ => throw new NotImplementedException($"Action type {actionType} is not implemented.")
            },
            RunAfter = new Dictionary<Guid, List<EFlowStatus>>()
        };
    }
}