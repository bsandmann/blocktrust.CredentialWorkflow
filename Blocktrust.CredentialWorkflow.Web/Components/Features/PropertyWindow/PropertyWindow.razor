@using WorkflowAction = Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action.Action
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Trigger
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Outcome
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action
@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow
@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action.Input



<div class="bg-white p-4 rounded-lg shadow-md">
    @if (SelectedItem == null)
    {
        <h3 class="text-lg font-medium text-gray-800 mb-6">Create new Action/Trigger</h3>

        <!-- Triggers Section -->
        <div class="mb-6">
            <div class="flex items-center mb-3">
                <span class="material-symbols-outlined text-gray-600 mr-2">touch_app</span>
                <h4 class="text-sm font-medium text-gray-700">Triggers</h4>
            </div>

            <div class="space-y-2 ml-8">
                <!-- Incoming Requests Group -->
                <MenuGroup Label="Incoming requests" Icon="http" IsExpanded="@isIncomingRequestsExpanded" OnToggle="@(() => ToggleGroup("incomingRequests"))">
                    <MenuButton Icon="description" Label="Credential Issuance" 
                               OnClick="@(action => HandleItemClick(ETriggerType.CredentialIssuanceTrigger, action))" 
                               ShowAddButton="true" />
                    <MenuButton Icon="verified" Label="Credential Verification" 
                               OnClick="@(action => HandleItemClick(ETriggerType.CredentialVerificationTrigger, action))" 
                               ShowAddButton="true" />
                </MenuGroup>

                <!-- Timer Trigger Group -->
                <MenuGroup Label="Timer triggers" Icon="schedule" IsExpanded="@isTimerTriggersExpanded" OnToggle="@(() => ToggleGroup("timerTriggers"))">
                    <MenuButton Icon="update" Label="Recurring timer" 
                               OnClick="@(action => HandleItemClick(ETriggerType.RecurringTimer, action))" 
                               ShowAddButton="true" />
                    <MenuButton Icon="play_circle" Label="On demand" 
                               OnClick="@(action => HandleItemClick(ETriggerType.OnDemand, action))" 
                               ShowAddButton="true" />
                </MenuGroup>
            </div>
        </div>

        <!-- Actions Section -->
        <div class="mb-6">
            <div class="flex items-center mb-3">
                <span class="material-symbols-outlined text-gray-600 mr-2">smart_button</span>
                <h4 class="text-sm font-medium text-gray-700">Actions</h4>
            </div>

            <div class="space-y-2 ml-8">
                <!-- Issue Credential Group -->
                <MenuGroup Label="Issue credentials" Icon="verified" IsExpanded="@isIssueCredentialExpanded" OnToggle="@(() => ToggleGroup("issueCredential"))">
                    <MenuButton Icon="badge" Label="W3C VC" 
                               OnClick="@(action => HandleItemClick(EActionType.CreateW3cCredential, action))" 
                               ShowAddButton="true" />
                    <MenuButton Icon="verified_user" Label="W3C SD-VC" 
                               OnClick="@(action => HandleItemClick(EActionType.CreateW3cSdCredential, action))" 
                               ShowAddButton="true" />
                    <MenuButton Icon="fingerprint" Label="Anoncred" 
                               OnClick="@(action => HandleItemClick(EActionType.CreateAnoncredCredential, action))" 
                               ShowAddButton="true" />
                </MenuGroup>
          
                <!-- Verify Credential Group -->
                <MenuGroup Label="Verify credentials" Icon="fact_check" IsExpanded="@isVerifyCredentialExpanded" OnToggle="@(() => ToggleGroup("verifyCredential"))">
                    <MenuButton Icon="verified" Label="Verify W3C VC" 
                               OnClick="@(action => HandleItemClick(EActionType.VerifyW3cCredential, action))" 
                               ShowAddButton="true" />
                    <MenuButton Icon="verified_user" Label="Verify W3C SD-VC" 
                               OnClick="@(action => HandleItemClick(EActionType.VerifyW3cSdCredential, action))" 
                               ShowAddButton="true" />
                    <MenuButton Icon="fingerprint" Label="Verify Anoncred" 
                               OnClick="@(action => HandleItemClick(EActionType.VerifyAnoncredCredential, action))" 
                               ShowAddButton="true" />
                </MenuGroup>

                <!-- Outgoing Request Group -->
                      <MenuGroup Label="Outgoing request" Icon="send" IsExpanded="@isOutgoingRequestExpanded" OnToggle="@(() => ToggleGroup("outgoingRequest"))">
                                    <MenuButton Icon="swap_horiz" Label="DIDComm trust ping" 
                                               OnClick="@(action => HandleItemClick(EActionType.DIDCommTrustPing, action))" 
                                               ShowAddButton="true" />
                                    <MenuButton Icon="message" Label="DIDComm message" 
                                               OnClick="@(action => HandleItemClick(EActionType.DIDCommMessage, action))" 
                                               ShowAddButton="true" />
                                    <MenuButton Icon="http" Label="HTTP Post" 
                                               OnClick="@(action => HandleItemClick(EActionType.HTTPPost, action))" 
                                               ShowAddButton="true" />
                                    <MenuButton Icon="mail" Label="Send email" 
                                               OnClick="@(action => HandleItemClick(EActionType.SendEmail, action))" 
                                               ShowAddButton="true" />
                                </MenuGroup>
            </div>
        </div>

        <!-- Outcome Section -->
        <div class="mb-6 @(!hasActions ? "opacity-50" : "")">
            <div class="flex items-center mb-3">
                <span class="material-symbols-outlined text-gray-600 mr-2">flag</span>
                <h4 class="text-sm font-medium text-gray-700">Outcome</h4>
            </div>

            <div class="space-y-2 ml-8">
                <MenuButton Icon="post_add" Label="Post outcome" 
                           OnClick="@(action => HandleItemClick("outcome", action))" 
                           ShowAddButton="true" />
                <MenuButton Icon="note_add" Label="Log outcome" 
                           OnClick="@(action => HandleItemClick("outcome", action))" 
                           ShowAddButton="true" />
            </div>
        </div>
    }
    else
    {
        <PropertyEditor 
            Item="@SelectedItem" 
            OnBack="@(() => SelectItem(null))"
            OnChange="@OnChange" 
            TriggerParameters="@GetTriggerParameters()" />
    }

    @if (showError)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div class="bg-white rounded-lg p-6 max-w-md">
                <h3 class="text-xl font-bold mb-4">Warning</h3>
                <p class="text-gray-700 mb-6">@errorMessage</p>
                <button class="bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded transition-colors duration-200"
                        @onclick="CloseError">
                    OK
                </button>
            </div>
        </div>
    }
</div>
@code {
    [Parameter] public object? SelectedItem { get; set; }
    [Parameter] public EventCallback<object> OnItemCreated { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public List<object> flowItems { get; set; } = new();
    private string? errorMessage;
    private bool showError;


    private bool isIncomingRequestsExpanded = true;
    private bool isTimerTriggersExpanded;
    private bool isIssueCredentialExpanded;
    private bool isVerifyCredentialExpanded;
    private bool isOutgoingRequestExpanded;
    
    private bool hasActions => flowItems.Any(x => x is WorkflowAction);
    private bool hasOutcome => flowItems.Any(x => x is WorkflowOutcomeDefinition);

    private void ToggleGroup(string group)
    {
        switch (group)
        {
            case "incomingRequests":
                isIncomingRequestsExpanded = !isIncomingRequestsExpanded;
                break;
            case "timerTriggers":
                isTimerTriggersExpanded = !isTimerTriggersExpanded;
                break;
            case "issueCredential":
                isIssueCredentialExpanded = !isIssueCredentialExpanded;
                break;
            case "verifyCredential":
                isVerifyCredentialExpanded = !isVerifyCredentialExpanded;
                break;
            case "outgoingRequest":
                isOutgoingRequestExpanded = !isOutgoingRequestExpanded;
                break;
        }
    }

    private async Task HandleItemClick(object itemType, MenuButton.MenuButtonAction action)
    {
        if (!hasActions && itemType is string && (string)itemType == "outcome")
        {
            await HandleError("Cannot add outcome before adding actions. Please add actions first.");
            return;
        }

        var newItem = CreateNewItem(itemType);
        if (newItem != null)
        {
            await OnItemCreated.InvokeAsync(newItem);
            
            if (action == MenuButton.MenuButtonAction.Configure)
            {
                await SelectItem(newItem);
            }
        }
    }
    
    private async Task SelectItem(object? item)
    {
        SelectedItem = item;
        StateHasChanged();
    }

    private IEnumerable<string>? GetTriggerParameters()
    {
        var trigger = flowItems.FirstOrDefault(x => x is Trigger) as Trigger;
        if (trigger?.Input is TriggerInputIncomingRequest incomingRequest)
        {
            return incomingRequest.Parameters.Keys;
        }
        return null;
    }

    private async Task HandleError(string message)
    {
        errorMessage = message;
        showError = true;
        StateHasChanged();
    }

    private void CloseError()
    {
        errorMessage = null;
        showError = false;
        StateHasChanged();
    }

    private object CreateNewItem(object itemType)
    {
        try
        {
            return itemType switch
            {
                ETriggerType triggerType => CreateNewTrigger(triggerType),
                EActionType actionType => CreateNewAction(actionType),
                string s when s == "outcome" => CreateNewOutcome(),
                _ => throw new ArgumentException("Invalid item type")
            };
        }
        catch (Exception ex)
        {
            HandleError(ex.Message);
            throw;
        }
    }
    
    private Trigger CreateNewTrigger(ETriggerType triggerType)
    {
        return new Trigger
        {
            Type = triggerType,
            Input = triggerType switch
            {
                ETriggerType.CredentialIssuanceTrigger => new TriggerInputIncomingRequest
                {
                    Id = Guid.NewGuid(),
                    Method = "POST",
                    Endpoint = "/credentials/issue/{workflowId}",
                    Template = "credential-issuance",
                    Parameters = RequestTemplates.Templates["credential-issuance"].Parameters
                },
                ETriggerType.CredentialVerificationTrigger => new TriggerInputIncomingRequest
                {
                    Id = Guid.NewGuid(),
                    Method = "POST",
                    Endpoint = "/credentials/verify/{workflowId}",
                    Template = "credential-verification",
                    Parameters = RequestTemplates.Templates["credential-verification"].Parameters
                },
                ETriggerType.RecurringTimer => new TriggerInputRecurringTimer
                {
                    Id = Guid.NewGuid(),
                    TimeSpan = TimeSpan.FromHours(1)
                },
                ETriggerType.OnDemand => new TriggerInputOnDemand
                {
                    Id = Guid.NewGuid()
                },
                _ => throw new ArgumentException($"Trigger type {triggerType} is not implemented.")
            }
        };
    }
    private WorkflowOutcomeDefinition CreateNewOutcome()
    {
        return new WorkflowOutcomeDefinition
        {
            Type = EOutcomeType.Success,
            Message = "Workflow completed successfully"
        };
    }
    
    private WorkflowAction CreateNewAction(EActionType actionType)
{
    return new WorkflowAction
    {
        Type = actionType,
        Input = actionType switch
        {
            // Issue Credential Actions
            EActionType.CreateW3cCredential => new ActionInputW3cCredential
            {
                Id = Guid.NewGuid(),
                SubjectDid = new ParameterReference
                {
                    Source = ParameterSource.TriggerInput,
                    Path = "subjectDid"
                },
                IssuerDid = new ParameterReference
                {
                    Source = ParameterSource.AppSettings,
                    Path = "DefaultIssuerDid"
                },
                Claims = new Dictionary<string, ClaimValue>()
            },
            EActionType.CreateW3cSdCredential => new ActionInputW3cSdCredential
            {
                Id = Guid.NewGuid(),
                SubjectDid = new ParameterReference
                {
                    Source = ParameterSource.TriggerInput,
                    Path = "subjectDid"
                },
                IssuerDid = new ParameterReference
                {
                    Source = ParameterSource.AppSettings,
                    Path = "DefaultIssuerDid"
                },
                Claims = new Dictionary<string, ClaimValue>()
            },
            EActionType.CreateAnoncredCredential => new ActionInputAnoncredCredential
            {
                Id = Guid.NewGuid(),
                SubjectDid = new ParameterReference
                {
                    Source = ParameterSource.TriggerInput,
                    Path = "subjectDid"
                },
                IssuerDid = new ParameterReference
                {
                    Source = ParameterSource.AppSettings,
                    Path = "DefaultIssuerDid"
                },
                CredentialDefinitionId = "",
                Attributes = new Dictionary<string, ClaimValue>()
            },

            // Verify Credential Actions
            EActionType.VerifyW3cCredential => new ActionInputVerifyW3cCredential
            {
                Id = Guid.NewGuid(),
                CheckSignature = true,
                CheckStatus = true,
                CheckSchema = true,
                CheckExpiry = true,
                CheckTrustRegistry = false
            },
            EActionType.VerifyW3cSdCredential => new ActionInputVerifyW3cSdCredential
            {
                Id = Guid.NewGuid(),
                CheckSignature = true,
                CheckStatus = true,
                CheckSchema = true,
                CheckExpiry = true,
                CheckTrustRegistry = false
            },
            EActionType.VerifyAnoncredCredential => new ActionInputVerifyAnoncredCredential
            {
                Id = Guid.NewGuid(),
                CheckSignature = true,
                CheckStatus = true,
                CheckSchema = true,
                CheckExpiry = true,
                CheckTrustRegistry = false
            },
            
            // Outgoing Request Actions
            EActionType.DIDCommTrustPing => new ActionInputOutgoingRequest
            {
                Id = Guid.NewGuid(),
                Method = "POST",
                Uri = "didcomm://trustping",
                Headers = new Dictionary<string, string>
                {
                    ["Content-Type"] = "application/didcomm-message+json"
                }
            },
            EActionType.DIDCommMessage => new ActionInputOutgoingRequest
            {
                Id = Guid.NewGuid(),
                Method = "POST",
                Uri = "didcomm://message",
                Headers = new Dictionary<string, string>
                {
                    ["Content-Type"] = "application/didcomm-message+json"
                }
            },
            EActionType.HTTPPost => new ActionInputOutgoingRequest
            {
                Id = Guid.NewGuid(),
                Method = "POST",
                Uri = "https://api.example.com",
                Headers = new Dictionary<string, string>
                {
                    ["Content-Type"] = "application/json"
                }
            },
            EActionType.SendEmail => new ActionInputOutgoingRequest
            {
                Id = Guid.NewGuid(),
                Method = "POST",
                Uri = "smtp://email",
                Headers = new Dictionary<string, string>
                {
                    ["Content-Type"] = "text/plain"
                }
            },
            _ => throw new ArgumentException($"Action type {actionType} is not implemented.")
        },
        RunAfter = new Dictionary<Guid, List<EFlowStatus>>()
    };
}
}