@* @using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Trigger *@
@* @using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action *@
@* *@
@* <div class="space-y-4"> *@
@*     <div> *@
@*         <label class="block text-sm font-medium text-gray-700">Subject DID</label> *@
@*         <input type="text" class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2" *@
@*                @bind="TriggerInput.SubjectDid" *@
@*                @bind:event="oninput" *@
@*                @onchange="@(async () => await OnChange.InvokeAsync())" /> *@
@*     </div> *@
@* *@
@*     <div> *@
@*         <label class="block text-sm font-medium text-gray-700">Delivery Method</label> *@
@*         <select class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2" *@
@*                 @bind="TriggerInput.DeliveryType"> *@
@*             <option value="@EDeliveryType.Email">Email</option> *@
@*             <option value="@EDeliveryType.DIDComm">DIDComm</option> *@
@*         </select> *@
@*     </div> *@
@* *@
@*     <div> *@
@*         <label class="block text-sm font-medium text-gray-700"> *@
@*             @(TriggerInput.DeliveryType == EDeliveryType.Email ? "Email Address" : "Peer DID") *@
@*         </label> *@
@*         <input type="text" class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2" *@
@*                @bind="TriggerInput.Destination" *@
@*                @bind:event="oninput" *@
@*                @onchange="@(async () => await OnChange.InvokeAsync())" /> *@
@*     </div> *@
@* *@
@*     <div class="border-t pt-4"> *@
@*         <div class="flex justify-between items-center mb-4"> *@
@*             <h4 class="text-lg font-medium">Additional Properties</h4> *@
@*             <button class="bg-blue-500 text-white px-3 py-1 rounded-md text-sm" *@
@*                     @onclick="AddNewProperty"> *@
@*                 Add Property *@
@*             </button> *@
@*         </div> *@
@* *@
@*         @foreach (var prop in TriggerInput.AdditionalProperties) *@
@*         { *@
@*             <div class="flex space-x-2 mb-2"> *@
@*                 <input type="text" class="flex-1 rounded-md border border-gray-300 px-3 py-2" *@
@*                        value="@prop.Key" *@
@*                        @onchange="@(e => UpdatePropertyKey(prop.Key, e.Value?.ToString() ?? string.Empty))" /> *@
@*                 <button class="bg-red-500 text-white px-2 py-1 rounded-md" *@
@*                         @onclick="@(() => RemoveProperty(prop.Key))"> *@
@*                     <span class="material-symbols-outlined text-sm">delete</span> *@
@*                 </button> *@
@*             </div> *@
@*         } *@
@*     </div> *@
@* </div> *@
@* *@
@* @code { *@
@*     [Parameter] public TriggerInputCredentialIssuance TriggerInput { get; set; } = null!; *@
@*     [Parameter] public EventCallback OnChange { get; set; } *@
@* *@
@*     private void AddNewProperty() *@
@*     { *@
@*         var newPropName = $"property{TriggerInput.AdditionalProperties.Count + 1}"; *@
@*         TriggerInput.AdditionalProperties[newPropName] = string.Empty; *@
@*         OnChange.InvokeAsync(); *@
@*     } *@
@* *@
@*     private void UpdatePropertyKey(string oldKey, string newKey) *@
@*     { *@
@*         if (oldKey != newKey && !string.IsNullOrWhiteSpace(newKey)) *@
@*         { *@
@*             var value = TriggerInput.AdditionalProperties[oldKey]; *@
@*             TriggerInput.AdditionalProperties.Remove(oldKey); *@
@*             TriggerInput.AdditionalProperties[newKey] = value; *@
@*             OnChange.InvokeAsync(); *@
@*         } *@
@*     } *@
@* *@
@*     private void RemoveProperty(string key) *@
@*     { *@
@*         TriggerInput.AdditionalProperties.Remove(key); *@
@*         OnChange.InvokeAsync(); *@
@*     } *@
@* } *@
