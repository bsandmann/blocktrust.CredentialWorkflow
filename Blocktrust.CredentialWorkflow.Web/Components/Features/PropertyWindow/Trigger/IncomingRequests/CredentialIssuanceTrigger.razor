@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Trigger

<div class="border-t pt-3">
    <div class="flex justify-between items-center mb-2">
        <h4 class="text-sm font-medium">Parameters</h4>
    </div>

    <!-- Default Parameters -->
    <div class="space-y-2 mb-3">
        <!-- Subject DID parameter -->
        <div class="p-2 border rounded-md bg-gray-50">
            <div class="flex justify-between items-center">
                <span class="text-xs font-medium">Subject DID</span>
                <span class="text-xs text-gray-500">From Trigger Input</span>
            </div>
            <p class="text-xs text-gray-600 mt-1">DID of the credential subject</p>
        </div>

        <!-- Issuer DID parameter -->
        <div class="p-2 border rounded-md bg-gray-50">
            <div class="flex justify-between items-center">
                <span class="text-xs font-medium">Issuer DID</span>
                <span class="text-xs text-gray-500">From App Settings</span>
            </div>
            <p class="text-xs text-gray-600 mt-1">DID of the credential issuer</p>
        </div>

        <!-- Delivery Method -->
        <div class="p-2 border rounded-md">
            <div class="flex justify-between items-center mb-1">
                <span class="text-xs font-medium">Delivery Method</span>
            </div>
            <select class="w-full rounded border px-2 py-1 text-xs mt-1"
                    @bind="selectedDeliveryMethod"
                    @bind:after="OnDeliveryMethodChanged">
                <option value="">Select Delivery Method</option>
                <option value="didcomm">DIDComm</option>
                <option value="smtp">Email</option>
            </select>
        </div>

        <!-- Conditional Destination Parameter -->
        @if (!string.IsNullOrEmpty(selectedDeliveryMethod))
        {
            <div class="p-2 border rounded-md">
                <div class="flex justify-between items-center mb-1">
                    <span class="text-xs font-medium">
                        @(selectedDeliveryMethod == "didcomm" ? "Peer DID" : "Email")
                    </span>
                </div>
                <select class="w-full rounded border px-2 py-1 text-xs mt-1">
                    <option value="string">string</option>
                </select>
            </div>
        }
    </div>

    <!-- Custom Parameters -->
    @foreach (var param in customParameters)
    {
        <div class="p-2 border rounded-md mb-2">
            <div class="flex items-center justify-between mb-1">
                <input type="text" 
                       class="rounded border px-2 py-1 text-xs w-1/2"
                       placeholder="Parameter name"
                       @bind="param.Name"
                       @bind:event="oninput"
                       @bind:after="UpdateCustomParameters" />
                <select class="rounded border px-2 py-1 text-xs w-1/3"
                        @bind="param.Type"
                        @bind:after="UpdateCustomParameters">
                    <option value="string">string</option>
                </select>
                <button class="text-red-500 hover:text-red-700 px-2"
                        @onclick="() => RemoveParameter(param)">
                    <span class="material-symbols-outlined text-sm">delete</span>
                </button>
            </div>
        </div>    }

    <!-- Add Parameter Button -->
    <button class="w-full mt-2 bg-slate-700 hover:bg-slate-600 text-white text-xs py-1 px-2 rounded transition-colors duration-200 flex items-center justify-center"
            @onclick="AddParameter">
        <span class="material-symbols-outlined text-sm mr-1">add</span>
        Add Parameter
    </button>
</div>

@code {
    [Parameter] public TriggerInputIncomingRequest TriggerInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }

    private string selectedDeliveryMethod = "";
    private List<CustomParameter> customParameters = new();

    private class CustomParameter
    {
        public string Name { get; set; } = "";
        public string Type { get; set; } = "string";
    }

    protected override void OnInitialized()
    {
        InitializeDefaultParameters();
        InitializeCustomParameters();

        // Set initial delivery method if parameter exists
        if (TriggerInput.Parameters.ContainsKey("peerDid"))
        {
            selectedDeliveryMethod = "didcomm";
        }
        else if (TriggerInput.Parameters.ContainsKey("email"))
        {
            selectedDeliveryMethod = "smtp";
        }
    }

    private void InitializeDefaultParameters()
    {
        var parameters = TriggerInput.Parameters;
        if (!parameters.ContainsKey("subjectDid"))
        {
            parameters["subjectDid"] = new ParameterDefinition
            {
                Type = ParameterType.String,
                Required = true,
                Description = "DID of the credential subject"
            };
        }

        if (!parameters.ContainsKey("issuerDid"))
        {
            parameters["issuerDid"] = new ParameterDefinition
            {
                Type = ParameterType.String,
                Required = true,
                Description = "DID of the credential issuer"
            };
        }
    }

    private void InitializeCustomParameters()
    {
        var defaultParams = new[] { "subjectDid", "issuerDid", "peerDid", "email" };
        foreach (var param in TriggerInput.Parameters)
        {
            if (!defaultParams.Contains(param.Key))
            {
                customParameters.Add(new CustomParameter
                {
                    Name = param.Key,
                    Type = param.Value.Type.ToString().ToLower()
                });
            }
        }
    }

    private async Task AddParameter()
    {
        var param = new CustomParameter();
        customParameters.Add(param);
        await UpdateCustomParameters();
        StateHasChanged();
    }

    private async Task RemoveParameter(CustomParameter param)
    {
        customParameters.Remove(param);
        await UpdateCustomParameters();
        StateHasChanged();
    }

    private async Task UpdateCustomParameters()
    {
        // Remove any existing custom parameters from TriggerInput
        var defaultParams = new[] { "subjectDid", "issuerDid", "peerDid", "email" };
        var customParamKeys = TriggerInput.Parameters.Keys
            .Where(k => !defaultParams.Contains(k))
            .ToList();
    
        foreach (var key in customParamKeys)
        {
            TriggerInput.Parameters.Remove(key);
        }

        // Add current custom parameters
        foreach (var param in customParameters)
        {
            if (!string.IsNullOrEmpty(param.Name))
            {
                TriggerInput.Parameters[param.Name] = new ParameterDefinition
                {
                    Type = ParameterType.String,
                    Required = true,
                    Description = $"Custom parameter: {param.Name}"
                };
            }
        }

        await OnChange.InvokeAsync();
    }

    private async Task OnDeliveryMethodChanged()
    {
        // Remove any existing delivery-related parameters
        TriggerInput.Parameters.Remove("deliveryMethod");
        TriggerInput.Parameters.Remove("peerDid");
        TriggerInput.Parameters.Remove("email");

        if (!string.IsNullOrEmpty(selectedDeliveryMethod))
        {
            // Add only the appropriate destination parameter
            var destinationParam = selectedDeliveryMethod == "didcomm" ? "peerDid" : "email";
            var description = selectedDeliveryMethod == "didcomm" ? 
                "Peer DID for delivery" : "Email address for delivery";

            TriggerInput.Parameters[destinationParam] = new ParameterDefinition
            {
                Type = ParameterType.String,
                Required = true,
                Description = description
            };
        }

        await OnChange.InvokeAsync();
    }
}