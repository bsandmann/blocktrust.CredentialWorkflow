@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Trigger

<div class="p-4 text-sm">
    @if (showToast)
    {
        <div class="fixed top-4 right-4 bg-slate-800 text-white px-4 py-2 rounded-lg shadow-lg transition-opacity duration-500 @(showToast ? "opacity-100" : "opacity-0")">
            @toastMessage
        </div>
    }

    <div class="space-y-3">
        <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Request Template</label>
            <select class="w-full rounded-md border border-gray-300 px-2 py-1 text-sm"
                    @bind="selectedTemplate"
                    @bind:after="OnTemplateChanged">
                <option value="credential-issuance">Credential Issuance</option>
                <option value="credential-verification">Credential Verification</option>
            </select>
        </div>

        <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Endpoint</label>
            <select class="w-full rounded-md border border-gray-300 px-2 py-1 text-sm"
                    @bind="TriggerInput.Endpoint">
                <option value="/credentials/issue">/credentials/issue</option>
            </select>
        </div>

        <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Method</label>
            <select class="w-full rounded-md border border-gray-300 px-2 py-1 text-sm"
                    @bind="TriggerInput.Method">
                <option value="GET">GET</option>
                <option value="POST">POST</option>
            </select>
        </div>

        @if (selectedTemplate == "credential-issuance")
        {
            <CredentialIssuanceTrigger TriggerInput="TriggerInput" OnChange="OnChange" />
        }
    </div>
</div>

@code {
    [Parameter] public TriggerInputIncomingRequest TriggerInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }

    private string selectedTemplate = "credential-issuance";
    private string? toastMessage;
    private bool showToast;

    protected override void OnInitialized()
    {
        TriggerInput.Template = selectedTemplate;
    }

    private async Task ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        showToast = false;
        StateHasChanged();
    }

    private async Task OnTemplateChanged()
    {
        TriggerInput.Template = selectedTemplate;
        TriggerInput.Parameters.Clear();
        await OnChange.InvokeAsync();
    }
}