@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Trigger
@using Blocktrust.CredentialWorkflow.Web.Services
@inject WorkflowChangeTrackerService ChangeTracker

<div class="space-y-4">
    <div>
        <label class="block text-sm font-medium text-gray-700">Request Template</label>
        <select 
            class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2"
            value="@TriggerInput.Template"
            @onchange="OnTemplateChanged">
            @foreach (var template in RequestTemplates.Templates)
            {
                <option value="@template.Key">@template.Key</option>
            }
        </select>
    </div>

    <div>
        <label class="block text-sm font-medium text-gray-700">Endpoint</label>
        <input type="text" 
               class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2"
               value="@TriggerInput.Endpoint"
               readonly="true" />
    </div>

    <div>
        <label class="block text-sm font-medium text-gray-700">Method</label>
        <input type="text" 
               class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2"
               value="@TriggerInput.Method"
               readonly="true" />
    </div>

    <div class="border-t pt-4">
        <h4 class="text-lg font-medium mb-4">Parameters</h4>
        @foreach (var param in TriggerInput.Parameters)
        {
            <div class="mb-4 p-4 border rounded-md">
                <div class="flex justify-between items-center mb-2">
                    <span class="font-medium">@param.Key</span>
                    @if (param.Value.Required)
                    {
                        <span class="text-sm text-red-500">Required</span>
                    }
                </div>
                <p class="text-sm text-gray-600 mb-2">@param.Value.Description</p>
                @if (param.Value.AllowedValues != null)
                {
                    <select class="w-full p-2 border rounded"
                            @onchange="@(e => OnParameterValueChanged(param.Key, e.Value?.ToString()))">
                        <option value="">Select @param.Key</option>
                        @foreach (var value in param.Value.AllowedValues)
                        {
                            <option value="@value">@value</option>
                        }
                    </select>
                }
                else
                {
                    <input type="text" 
                           class="w-full p-2 border rounded"
                           placeholder="Enter @param.Key"
                           @onchange="@(e => OnParameterValueChanged(param.Key, e.Value?.ToString()))" />
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public TriggerInputIncomingRequest TriggerInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }

    private async Task OnTemplateChanged(ChangeEventArgs e)
    {
        var templateKey = e.Value?.ToString();
        if (templateKey != null && RequestTemplates.Templates.TryGetValue(templateKey, out var template))
        {
            TriggerInput.Endpoint = template.Endpoint;
            TriggerInput.Method = template.Method;
            TriggerInput.Parameters = template.Parameters;
            await OnChange.InvokeAsync();
        }
    }
    
    private async Task OnParameterValueChanged(string key, string? value)
    {
        if (value != null)
        {
            // Here we'll need to store the parameter values somewhere
            // This could be in a new property in TriggerInputIncomingRequest
            // For now, we'll just trigger the change event
            await OnChange.InvokeAsync();
        }
    }
}