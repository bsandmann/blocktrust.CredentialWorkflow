@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Trigger
@using Blocktrust.CredentialWorkflow.Web.Services
@using Blocktrust.CredentialWorkflow.Core.Domain.Common
@inject WorkflowChangeTrackerService ChangeTracker

<div class="p-4 text-sm">
    @if (showToast)
    {
        <div class="fixed top-4 right-4 bg-slate-800 text-white px-4 py-2 rounded-lg shadow-lg transition-opacity duration-500 @(showToast ? "opacity-100" : "opacity-0")">
            @toastMessage
        </div>
    }

    <div class="space-y-3">
        <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Request Template</label>
            <select class="w-full rounded-md border border-gray-300 px-2 py-1 text-sm"
                    @bind="selectedTemplate">
                <option value="credential-issuance">Credential Issuance</option>
                <option value="credential-verification">Credential Verification</option>
            </select>
        </div>

        <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Endpoint</label>
            <select class="w-full rounded-md border border-gray-300 px-2 py-1 text-sm"
                    @bind="TriggerInput.Endpoint">
                <option value="/credentials/issue">/credentials/issue</option>
            </select>
        </div>

        <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">Method</label>
            <select class="w-full rounded-md border border-gray-300 px-2 py-1 text-sm"
                    @bind="TriggerInput.Method">
                <option value="GET">GET</option>
                <option value="POST">POST</option>
            </select>
        </div>

        <div class="border-t pt-3">
            <div class="flex justify-between items-center mb-2">
                <h4 class="text-sm font-medium">Parameters</h4>
            </div>

            <!-- Default Parameters -->
            <div class="space-y-2 mb-3">
                <!-- Subject DID parameter -->
                <div class="p-2 border rounded-md bg-gray-50">
                    <div class="flex justify-between items-center">
                        <span class="text-xs font-medium">Subject DID</span>
                        <span class="text-xs text-gray-500">From Trigger Input</span>
                    </div>
                    <p class="text-xs text-gray-600 mt-1">DID of the credential subject</p>
                </div>

                <!-- Issuer DID parameter -->
                <div class="p-2 border rounded-md bg-gray-50">
                    <div class="flex justify-between items-center">
                        <span class="text-xs font-medium">Issuer DID</span>
                        <span class="text-xs text-gray-500">From App Settings</span>
                    </div>
                    <p class="text-xs text-gray-600 mt-1">DID of the credential issuer</p>
                </div>

                <!-- Delivery Method -->
                <div class="p-2 border rounded-md">
                    <div class="flex justify-between items-center mb-1">
                        <span class="text-xs font-medium">Delivery Method</span>
                    </div>
                    <select class="w-full rounded border px-2 py-1 text-xs mt-1"
                            @bind="selectedDeliveryMethod">
                        <option value="">Select Delivery Method</option>
                        <option value="didcomm">DIDComm</option>
                        <option value="smtp">Email</option>
                    </select>
                </div>

                <!-- Conditional Destination Parameter -->
                @if (!string.IsNullOrEmpty(selectedDeliveryMethod))
                {
                    <div class="p-2 border rounded-md">
                        <div class="flex justify-between items-center mb-1">
                            <span class="text-xs font-medium">
                                @(selectedDeliveryMethod == "didcomm" ? "Peer DID" : "Email")
                            </span>
                        </div>
                        <select class="w-full rounded border px-2 py-1 text-xs mt-1">
                            <option value="string">string</option>
                        </select>
                    </div>
                }
            </div>

            <!-- Custom Parameters -->
            @foreach (var param in customParameters)
            {
                <div class="p-2 border rounded-md mb-2">
                    <div class="flex items-center justify-between mb-1">
                        <input type="text" 
                               class="rounded border px-2 py-1 text-xs w-1/2"
                               placeholder="Parameter name"
                               @bind="param.Name" />
                        <select class="rounded border px-2 py-1 text-xs w-1/3"
                                @bind="param.Type">
                            <option value="string">string</option>
                        </select>
                        <button class="text-red-500 hover:text-red-700 px-2"
                                @onclick="() => RemoveParameter(param)">
                            <span class="material-symbols-outlined text-sm">delete</span>
                        </button>
                    </div>
                </div>
            }

            <!-- Add Parameter Button -->
            <button class="w-full mt-2 bg-slate-700 hover:bg-slate-600 text-white text-xs py-1 px-2 rounded transition-colors duration-200 flex items-center justify-center"
                    @onclick="AddParameter">
                <span class="material-symbols-outlined text-sm mr-1">add</span>
                Add Parameter
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public TriggerInputIncomingRequest TriggerInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }

    private string selectedTemplate = "credential-issuance";
    private string selectedDeliveryMethod = "";
    private List<CustomParameter> customParameters = new();
    private string? toastMessage;
    private bool showToast;

    private class CustomParameter
    {
        public string Name { get; set; } = "";
        public string Type { get; set; } = "string";
    }

    protected override void OnInitialized()
    {
        InitializeDefaultParameters();
    }

    private void InitializeDefaultParameters()
    {
        var parameters = new Dictionary<string, ParameterDefinition>();
        
        // Add default parameters
        parameters.Add("subjectDid", new ParameterDefinition
        {
            Type = ParameterType.String,
            Required = true,
            Description = "DID of the credential subject"
        });

        parameters.Add("issuerDid", new ParameterDefinition
        {
            Type = ParameterType.String,
            Required = true,
            Description = "DID of the credential issuer"
        });

        TriggerInput.Parameters = parameters;
    }

    private async Task ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        showToast = false;
        StateHasChanged();
    }

    private void AddParameter()
    {
        customParameters.Add(new CustomParameter());
        StateHasChanged();
    }

    private void RemoveParameter(CustomParameter param)
    {
        customParameters.Remove(param);
        StateHasChanged();
    }

    private async Task OnDeliveryMethodChanged(string method)
    {
        selectedDeliveryMethod = method;
        await UpdateParameters();
    }

    private async Task UpdateParameters()
    {
        var parameters = TriggerInput.Parameters;

        // Update or add delivery-related parameters
        if (!string.IsNullOrEmpty(selectedDeliveryMethod))
        {
            parameters["deliveryMethod"] = new ParameterDefinition
            {
                Type = ParameterType.String,
                Required = true,
                Description = selectedDeliveryMethod == "didcomm" ? "DIDComm delivery" : "Email delivery"
            };

            var destinationParam = selectedDeliveryMethod == "didcomm" ? "peerDid" : "email";
            parameters[destinationParam] = new ParameterDefinition
            {
                Type = ParameterType.String,
                Required = true,
                Description = selectedDeliveryMethod == "didcomm" ? "Peer DID for delivery" : "Email address for delivery"
            };
        }

        await OnChange.InvokeAsync();
    }
}