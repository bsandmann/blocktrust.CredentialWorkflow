@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Trigger

<div>
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Method</label>
        <input type="text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
               @bind="TriggerInput.Method"/>
    </div>
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">URI</label>
        <input type="text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
               @bind="TriggerInput.Uri"/>
    </div>
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Headers</label>
        @foreach (var header in TriggerInput.Headers)
        {
            <div class="flex mt-2">
                <input type="text" class="w-1/2 rounded-l-md border-gray-300 shadow-sm"
                       value="@header.Key"
                       @onchange="@(e => UpdateHeaderKey(header.Key, e.Value.ToString()))"/>
                <input type="text" class="w-1/2 rounded-r-md border-gray-300 shadow-sm"
                       value="@header.Value"
                       @onchange="@(e => UpdateHeaderValue(header.Key, e.Value.ToString()))"/>
                <button class="ml-2 px-2 py-1 bg-red-500 text-white rounded"
                        @onclick="() => RemoveHeader(header.Key)">
                    <span class="material-symbols-outlined text-sm">delete</span>
                </button>
            </div>
        }
        <div class="flex mt-2">
            <input type="text" placeholder="New Header Key" class="w-1/2 rounded-l-md border-gray-300 shadow-sm"
                   @bind="newHeaderKey"/>
            <input type="text" placeholder="New Header Value" class="w-1/2 rounded-r-md border-gray-300 shadow-sm"
                   @bind="newHeaderValue"/>
            <button class="ml-2 px-2 py-1 bg-green-500 text-white rounded"
                    @onclick="AddHeader">
                <span class="material-symbols-outlined text-sm">add</span>
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public TriggerInputIncomingRequest TriggerInput { get; set; } = null!;

    private string newHeaderKey = string.Empty;
    private string newHeaderValue = string.Empty;

    private void UpdateHeaderKey(string oldKey, string newKey)
    {
        if (oldKey != newKey && !string.IsNullOrWhiteSpace(newKey) && !TriggerInput.Headers.ContainsKey(newKey))
        {
            var value = TriggerInput.Headers[oldKey];
            TriggerInput.Headers.Remove(oldKey);
            TriggerInput.Headers[newKey] = value;
            StateHasChanged();
        }
    }

    private void UpdateHeaderValue(string key, string newValue)
    {
        TriggerInput.Headers[key] = newValue;
        StateHasChanged();
    }

    private void RemoveHeader(string key)
    {
        TriggerInput.Headers.Remove(key);
        StateHasChanged();
    }

    private void AddHeader()
    {
        if (!string.IsNullOrWhiteSpace(newHeaderKey) && !TriggerInput.Headers.ContainsKey(newHeaderKey))
        {
            TriggerInput.Headers[newHeaderKey] = newHeaderValue;
            newHeaderKey = string.Empty;
            newHeaderValue = string.Empty;
            StateHasChanged();
        }
    }
}