@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action

<div>
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Subject</label>
        <input type="text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" @bind="ActionInput.Subject"/>
    </div>
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Issuer</label>
        <input type="text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" @bind="ActionInput.Issuer"/>
    </div>
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Claims</label>
        @foreach (var claim in ActionInput.Claims)
        {
            <div class="flex mt-2">
                <input type="text" class="w-1/2 rounded-l-md border-gray-300 shadow-sm"
                       value="@claim.Key"
                       @onchange="@(e => UpdateClaimKey(claim.Key, e.Value.ToString()))"/>
                <input type="text" class="w-1/2 rounded-r-md border-gray-300 shadow-sm"
                       value="@claim.Value"
                       @onchange="@(e => UpdateClaimValue(claim.Key, e.Value.ToString()))"/>
                <button class="ml-2 px-2 py-1 bg-red-500 text-white rounded" @onclick="() => RemoveClaim(claim.Key)">
                    <span class="material-symbols-outlined text-sm">delete</span>
                </button>
            </div>
        }
        <div class="flex mt-2">
            <input type="text" placeholder="New Claim Key" class="w-1/2 rounded-l-md border-gray-300 shadow-sm" @bind="newClaimKey"/>
            <input type="text" placeholder="New Claim Value" class="w-1/2 rounded-r-md border-gray-300 shadow-sm" @bind="newClaimValue"/>
            <button class="ml-2 px-2 py-1 bg-green-500 text-white rounded" @onclick="AddClaim">
                <span class="material-symbols-outlined text-sm">add</span>
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public ActionInputCredentialIssuance ActionInput { get; set; } = null!;

    private string newClaimKey = string.Empty;
    private string newClaimValue = string.Empty;

    private void UpdateClaimKey(string oldKey, string newKey)
    {
        if (oldKey != newKey && !string.IsNullOrWhiteSpace(newKey) && !ActionInput.Claims.ContainsKey(newKey))
        {
            var value = ActionInput.Claims[oldKey];
            ActionInput.Claims.Remove(oldKey);
            ActionInput.Claims[newKey] = value;
            StateHasChanged();
        }
    }

    private void UpdateClaimValue(string key, string newValue)
    {
        ActionInput.Claims[key] = newValue;
        StateHasChanged();
    }

    private void RemoveClaim(string key)
    {
        ActionInput.Claims.Remove(key);
        StateHasChanged();
    }

    private void AddClaim()
    {
        if (!string.IsNullOrWhiteSpace(newClaimKey) && !ActionInput.Claims.ContainsKey(newClaimKey))
        {
            ActionInput.Claims[newClaimKey] = newClaimValue;
            newClaimKey = string.Empty;
            newClaimValue = string.Empty;
            StateHasChanged();
        }
    }

}