@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action
@using Blocktrust.CredentialWorkflow.Core.Domain.Common

<div class="p-4 text-sm">
    @if (showToast)
    {
        <div class="fixed top-4 right-4 bg-slate-800 text-white px-4 py-2 rounded-lg shadow-lg transition-opacity duration-500 @(showToast ? "opacity-100" : "opacity-0")">
            @toastMessage
        </div>
    }
    
    <div class="space-y-3">
        <!-- Subject DID Section -->
        <div class="p-2 border rounded-md">
            <label class="block text-xs font-medium text-gray-700 mb-1">Subject DID</label>
            <div class="flex space-x-2">
                <select class="w-1/3 rounded border px-2 py-1 text-xs"
                        @bind="ActionInput.SubjectDid.Source"
                        @bind:after="OnValueChanged">
                    <option value="@ParameterSource.Static">Static Value</option>
                    <option value="@ParameterSource.TriggerInput">From Trigger</option>
                </select>
                <input type="text" class="w-2/3 rounded border px-2 py-1 text-xs"
                       @bind="ActionInput.SubjectDid.Path"
                       @bind:after="OnValueChanged"
                       placeholder="@GetPlaceholder(ActionInput.SubjectDid.Source)" />
            </div>
        </div>

        <!-- Issuer DID Section -->
        <div class="p-2 border rounded-md">
            <label class="block text-xs font-medium text-gray-700 mb-1">Issuer DID</label>
            <div class="flex space-x-2">
                <select class="w-1/3 rounded border px-2 py-1 text-xs"
                        @bind="ActionInput.IssuerDid.Source"
                        @bind:after="OnValueChanged">
                    <option value="@ParameterSource.Static">Static Value</option>
                    <option value="@ParameterSource.TriggerInput">From Trigger</option>
                    <option value="@ParameterSource.AppSettings">From Settings</option>
                </select>
                <input type="text" class="w-2/3 rounded border px-2 py-1 text-xs"
                       @bind="ActionInput.IssuerDid.Path"
                       @bind:after="OnValueChanged"
                       placeholder="@GetPlaceholder(ActionInput.IssuerDid.Source)" />
            </div>
        </div>

        <!-- Claims Section -->
        <div class="border-t pt-3">
            <div class="flex justify-between items-center mb-2">
                <h4 class="text-xs font-medium text-gray-700">Claims</h4>
                <button class="bg-slate-700 hover:bg-slate-600 text-white text-xs py-1 px-2 rounded transition-colors duration-200 flex items-center"
                        @onclick="AddNewClaim">
                    <span class="material-symbols-outlined text-sm mr-1">add</span>
                    Add Claim
                </button>
            </div>

            @foreach (var claim in ActionInput.Claims)
            {
                <div class="p-2 border rounded-md mb-2 bg-gray-50">
                    <div class="flex justify-between items-center mb-2">
                        <input type="text" class="w-full rounded border px-2 py-1 text-xs bg-white"
                               placeholder="Claim Key"
                               value="@claim.Key"
                               @onchange="@(e => UpdateClaimKey(claim.Key, e.Value?.ToString() ?? string.Empty))" />
                        <button class="ml-2 text-red-500 hover:text-red-700"
                                @onclick="@(() => RemoveClaim(claim.Key))">
                            <span class="material-symbols-outlined text-sm">delete</span>
                        </button>
                    </div>

                    <div class="flex space-x-2">
                        <select class="w-1/3 rounded border px-2 py-1 text-xs bg-white"
                                @bind="claim.Value.Type"
                                @bind:after="OnValueChanged">
                            <option value="@ClaimValueType.Static">Static Value</option>
                            <option value="@ClaimValueType.TriggerProperty">From Trigger</option>
                        </select>

                        @if (claim.Value.Type == ClaimValueType.Static)
                        {
                            <input type="text" class="w-2/3 rounded border px-2 py-1 text-xs bg-white"
                                   placeholder="Static Value"
                                   @bind="claim.Value.Value"
                                   @bind:after="OnValueChanged" />
                        }
                        else
                        {
                            if (claim.Value.ParameterReference == null)
                            {
                                claim.Value.ParameterReference = new ParameterReference { Source = ParameterSource.TriggerInput };
                            }
                            <input type="text" class="w-2/3 rounded border px-2 py-1 text-xs bg-white"
                                   placeholder="Trigger Property Path"
                                   @bind="claim.Value.ParameterReference.Path"
                                   @bind:after="OnValueChanged" />
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public ActionInputCredentialIssuance ActionInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    private string? toastMessage;
    private bool showToast;

    private string GetPlaceholder(ParameterSource source) => source switch
    {
        ParameterSource.Static => "Enter static value",
        ParameterSource.TriggerInput => "Enter trigger property path",
        ParameterSource.AppSettings => "Enter settings key",
        _ => "Enter value"
    };

    private async Task OnValueChanged()
    {
        if (ActionInput != null)
        {
            await OnChange.InvokeAsync();
        }
    }

    private async Task ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        showToast = false;
        StateHasChanged();
    }

    private async Task AddNewClaim()
    {
        var newClaimKey = $"claim{ActionInput.Claims.Count + 1}";
        ActionInput.Claims[newClaimKey] = new ClaimValue
        {
            Type = ClaimValueType.Static,
            Value = string.Empty,
            ParameterReference = new ParameterReference
            {
                Source = ParameterSource.TriggerInput,
                Path = string.Empty
            }
        };
        await OnChange.InvokeAsync();
        await ShowToast("New claim added");
    }

    private async Task UpdateClaimKey(string oldKey, string newKey)
    {
        if (oldKey != newKey && !string.IsNullOrWhiteSpace(newKey) && !ActionInput.Claims.ContainsKey(newKey))
        {
            var value = ActionInput.Claims[oldKey];
            ActionInput.Claims.Remove(oldKey);
            ActionInput.Claims[newKey] = value;
            await OnChange.InvokeAsync();
        }
    }

    private async Task RemoveClaim(string key)
    {
        ActionInput.Claims.Remove(key);
        await OnChange.InvokeAsync();
        await ShowToast("Claim removed");
    }
}