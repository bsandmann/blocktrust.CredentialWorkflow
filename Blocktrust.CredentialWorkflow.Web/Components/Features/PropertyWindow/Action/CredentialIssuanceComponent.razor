@using Blocktrust.CredentialWorkflow.Core.Domain.ProcessFlow.Action

<div class="space-y-4">
    <div>
        <label class="block text-sm font-medium text-gray-700">Subject DID</label>
        <input type="text" class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2"
               @bind="ActionInput.SubjectDid"
               @bind:event="oninput"
               @onchange="@(async () => await OnChange.InvokeAsync())" />
    </div>

    <div>
        <label class="block text-sm font-medium text-gray-700">Issuer DID</label>
        <input type="text" class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2"
               @bind="ActionInput.IssuerDid"
               @bind:event="oninput"
               @onchange="@(async () => await OnChange.InvokeAsync())" />
    </div>

    <div>
        <div class="flex justify-between items-center mb-4">
            <label class="block text-sm font-medium text-gray-700">Claims</label>
            <button class="bg-blue-500 text-white px-3 py-1 rounded-md text-sm"
                    @onclick="AddNewClaim">
                Add Claim
            </button>
        </div>

        @foreach (var claim in ActionInput.Claims)
        {
            <div class="flex space-x-2 mb-2 p-2 border rounded-md">
                <div class="flex-1">
                    <input type="text" class="w-full rounded-md border border-gray-300 px-3 py-2 mb-2"
                           placeholder="Claim Key"
                           value="@claim.Key"
                           @onchange="@(e => UpdateClaimKey(claim.Key, e.Value?.ToString() ?? string.Empty))" />

                    <div class="flex space-x-2">
                        <select class="rounded-md border border-gray-300 px-3 py-2"
                                @bind="claim.Value.Type">
                            <option value="@ClaimValueType.Static">Static Value</option>
                            <option value="@ClaimValueType.TriggerProperty">From Trigger Property</option>
                        </select>

                        @if (claim.Value.Type == ClaimValueType.Static)
                        {
                            <input type="text" class="flex-1 rounded-md border border-gray-300 px-3 py-2"
                                   placeholder="Static Value"
                                   value="@claim.Value.Value"
                                   @onchange="@(e => UpdateClaimValue(claim.Key, e.Value?.ToString() ?? string.Empty))" />
                        }
                        else
                        {
                            <select class="flex-1 rounded-md border border-gray-300 px-3 py-2"
                                    value="@claim.Value.Value"
                                    @onchange="@(e => UpdateClaimValue(claim.Key, e.Value?.ToString() ?? string.Empty))">
                                <option value="">Select Trigger Property</option>
                                @foreach (var prop in TriggerProperties)
                                {
                                    <option value="@prop">@prop</option>
                                }
                            </select>
                        }
                    </div>
                </div>

                <button class="self-start bg-red-500 text-white px-2 py-1 rounded-md"
                        @onclick="@(() => RemoveClaim(claim.Key))">
                    <span class="material-symbols-outlined text-sm">delete</span>
                </button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public ActionInputCredentialIssuance ActionInput { get; set; } = null!;
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public IEnumerable<string> TriggerProperties { get; set; } = Array.Empty<string>();

    private void AddNewClaim()
    {
        var newClaimKey = $"claim{ActionInput.Claims.Count + 1}";
        ActionInput.Claims[newClaimKey] = new ClaimValue 
        { 
            Type = ClaimValueType.Static,
            Value = string.Empty
        };
        OnChange.InvokeAsync();
    }

    private void UpdateClaimKey(string oldKey, string newKey)
    {
        if (oldKey != newKey && !string.IsNullOrWhiteSpace(newKey))
        {
            var value = ActionInput.Claims[oldKey];
            ActionInput.Claims.Remove(oldKey);
            ActionInput.Claims[newKey] = value;
            OnChange.InvokeAsync();
        }
    }

    private void UpdateClaimValue(string key, string newValue)
    {
        if (ActionInput.Claims.TryGetValue(key, out var claim))
        {
            claim.Value = newValue;
            OnChange.InvokeAsync();
        }
    }

    private void RemoveClaim(string key)
    {
        ActionInput.Claims.Remove(key);
        OnChange.InvokeAsync();
    }
}