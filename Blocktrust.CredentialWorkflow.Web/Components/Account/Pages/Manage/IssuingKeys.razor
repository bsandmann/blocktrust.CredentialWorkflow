@page "/Account/Manage/IssuingKeys"

@using System.ComponentModel.DataAnnotations
@using Blocktrust.CredentialWorkflow.Core.Commands.Tenant.CreateIssuingKey
@using Blocktrust.CredentialWorkflow.Core.Commands.Tenant.DeleteIssuingKey
@using Blocktrust.CredentialWorkflow.Core.Commands.Tenant.GetIssuingKeys
@using Blocktrust.CredentialWorkflow.Core.Domain.IssuingKey
@using MediatR

@inject IMediator Mediator
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager


<PageTitle>Manage Issuing Keys</PageTitle>

<div class="container mx-auto">
    <div class="mx-auto w-3/4 bg-gray-100 p-4 rounded-xl mt-10">
        <div class="flex flex-col content-between items-center justify-between">
            <StatusMessage Message="@message"/>
            <h2 class="font-museo text-2xl mb-4">Manage Issuing Keys</h2>

            <!-- Add New Issuing Key Form -->
            <EditForm Model="NewKey" FormName="add-issuing-key" OnValidSubmit="OnAddKeySubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <div class="mt-4">
                    <InputText @bind-Value="NewKey.Name"
                               class="bg-slate-200 px-2 py-1 rounded-md border border-slate-400"
                               placeholder="Key Name"/>
                    <ValidationMessage For="() => NewKey.Name" class="font-light text-red-500"/>
                </div>
                <div class="mt-4">
                    <InputText @bind-Value="NewKey.Did"
                               class="bg-slate-200 px-2 py-1 rounded-md border border-slate-400" placeholder="DID"/>
                    <ValidationMessage For="() => NewKey.Did" class="font-light text-red-500"/>
                </div>
                <div class="mt-4">
                    <InputText @bind-Value="NewKey.KeyType"
                               class="bg-slate-200 px-2 py-1 rounded-md border border-slate-400"
                               placeholder="Key Type (e.g. secp256k1)"/>
                    <ValidationMessage For="() => NewKey.KeyType" class="font-light text-red-500"/>
                </div>
                <div class="mt-4">
                    <InputText @bind-Value="NewKey.PublicKey"
                               class="bg-slate-200 px-2 py-1 rounded-md border border-slate-400"
                               placeholder="Public Key (Base64 URL encoded (compressed)"/>
                    <ValidationMessage For="() => NewKey.PublicKey" class="font-light text-red-500"/>
                </div>
                <div class="mt-4">
                    <InputText @bind-Value="NewKey.PrivateKey"
                               class="bg-slate-200 px-2 py-1 rounded-md border border-slate-400"
                               placeholder="Private Key (Base64 URL encoded compressed)"/>
                    <ValidationMessage For="() => NewKey.PrivateKey" class="font-light text-red-500"/>
                </div>
                <button type="submit"
                        class="mt-4 bg-slate-700 rounded-md pl-4 py-1 pr-4 text-white font-light cursor-pointer">Add
                    Issuing Key
                </button>
            </EditForm>

            <div class="mt-8 w-full">
                @foreach (var key in IssuingKeysList)
                {
                    <div class="bg-white rounded-lg shadow-md p-4 mb-4">
                        <div class="flex flex-row">
                            <div class="flex flex-col">
                                <h3 class="font-semibold text-lg">@key.Name</h3>
                                <p class="text-sm text-gray-600">DID: @key.Did</p>
                                <p class="text-sm text-gray-600">Type: @key.KeyType</p>
                                <p class="text-sm text-gray-600">Public Key: @TruncateKey(key.PublicKey)</p>
                                <p class="text-sm text-gray-600">Private Key: @TruncateKey(key.PrivateKey)</p>
                                <p class="text-xs text-gray-500">Created: @key.CreatedUtc</p>
                            </div>
                            <div class="grow"></div>
                            <div class="flex flex-col items-end space-y-2">
                                <a href="/Account/Manage/DeleteIssuingKeys/@key.IssuingKeyId"
                                   class="bg-red-500 text-white rounded-md px-2 py-1 text-sm self-end">
                                    <span class="material-symbols-outlined text-sm">delete</span>
                                </a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string? message;
    private List<IssuingKey> IssuingKeysList { get; set; } = new();
    private Guid TenantId { get; set; }

    // Form model for creating a new key
    [SupplyParameterFromForm] private NewKeyModel NewKey { get; set; } = new();

    // Editing key details
    private IssuingKey? EditingKey { get; set; }
    private EditKeyModel EditingKeyModel { get; set; } = new();

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        TenantId = user.TenantEntityId.Value;
        await LoadIssuingKeys();
    }

    private async Task LoadIssuingKeys()
    {
        var result = await Mediator.Send(new GetIssuingKeysRequest(TenantId));
        if (result.IsFailed)
        {
            message = $"Error loading issuing keys: {string.Join(", ", result.Errors)}";
            IssuingKeysList = new();
        }
        else
        {
            IssuingKeysList = result.Value;
        }
    }

    private async Task OnAddKeySubmitAsync()
    {
        var request = new CreateIssuingKeyRequest(TenantId, NewKey.Name, NewKey.Did, NewKey.KeyType, NewKey.PublicKey, NewKey.PrivateKey);
        var result = await Mediator.Send(request);

        if (result.IsSuccess)
        {
            message = "Issuing Key added successfully.";
            await LoadIssuingKeys();
            NewKey = new NewKeyModel();
        }
        else
        {
            message = $"Error: {string.Join(", ", result.Errors)}";
        }
    }

    private void StartEditingKey(IssuingKey key)
    {
        EditingKey = key;
        EditingKeyModel = new EditKeyModel
        {
            Name = key.Name,
            KeyType = key.KeyType,
            PublicKey = key.PublicKey,
            PrivateKey = key.PrivateKey
        };
    }

    private void CancelEditing()
    {
        EditingKey = null;
    }

    private async Task RemoveKeyAsync(Guid keyId)
    {
        var request = new DeleteIssuingKeyRequest(keyId);
        var result = await Mediator.Send(request);

        if (result.IsSuccess)
        {
            message = "Issuing Key removed successfully.";
            await LoadIssuingKeys();
        }
        else
        {
            message = $"Error: {string.Join(", ", result.Errors)}";
        }
    }

    private string TruncateKey(string key)
    {
        if (string.IsNullOrEmpty(key))
        {
            return "";
        }

        // Just show first 10 chars and last 5 chars for safety
        if (key.Length <= 15)
        {
            return key;
        }

        return key.Substring(0, 10) + "..." + key.Substring(key.Length - 5);
    }

    private sealed class NewKeyModel
    {
        [Required]
        [Display(Name = "Key Name")]
        public string Name { get; set; } = "";

        [Required] [Display(Name = "DID")] public string Did { get; set; } = "";

        [Required]
        [Display(Name = "Key Type")]
        public string KeyType { get; set; } = "";

        [Required]
        [Display(Name = "Public Key")]
        public string PublicKey { get; set; } = "";

        [Required]
        [Display(Name = "Private Key")]
        public string PrivateKey { get; set; } = "";
    }

    private sealed class EditKeyModel
    {
        [Required] public string Name { get; set; } = "";
        [Required] public string Did { get; set; } = "";

        [Required] public string KeyType { get; set; } = "";

        [Required] public string PublicKey { get; set; } = "";

        [Required] public string PrivateKey { get; set; } = "";
    }

}
